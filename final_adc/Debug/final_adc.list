
final_adc.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008454  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080085dc  080085dc  000185dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008634  08008634  000200fc  2**0
                  CONTENTS
  4 .ARM          00000008  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800863c  0800863c  000200fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000fc  20000000  08008644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200fc  2**0
                  CONTENTS
 10 .bss          00001cc0  200000fc  200000fc  000200fc  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001dbc  20001dbc  000200fc  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200fc  2**0
                  CONTENTS, READONLY
 13 .debug_info   000141a4  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000030cd  00000000  00000000  000342d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001190  00000000  00000000  000373a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001028  00000000  00000000  00038530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002507d  00000000  00000000  00039558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000159ed  00000000  00000000  0005e5d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8f7b  00000000  00000000  00073fc2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0014cf3d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004960  00000000  00000000  0014cf90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000fc 	.word	0x200000fc
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080085c4 	.word	0x080085c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000100 	.word	0x20000100
 80001c4:	080085c4 	.word	0x080085c4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fac2 	bl	8000a58 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f82c 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f95c 	bl	8000794 <MX_GPIO_Init>
  MX_ADC1_Init();
 80004dc:	f000 f892 	bl	8000604 <MX_ADC1_Init>
  MX_TIM2_Init();
 80004e0:	f000 f8e2 	bl	80006a8 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 80004e4:	f007 fb40 	bl	8007b68 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start(&hadc1);
 80004e8:	480d      	ldr	r0, [pc, #52]	; (8000520 <main+0x54>)
 80004ea:	f000 fb8f 	bl	8000c0c <HAL_ADC_Start>
     HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004ee:	2104      	movs	r1, #4
 80004f0:	480c      	ldr	r0, [pc, #48]	; (8000524 <main+0x58>)
 80004f2:	f003 f98b 	bl	800380c <HAL_TIM_PWM_Start>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */


	  HAL_ADC_Start(&hadc1);
 80004f6:	480a      	ldr	r0, [pc, #40]	; (8000520 <main+0x54>)
 80004f8:	f000 fb88 	bl	8000c0c <HAL_ADC_Start>

	 	  if(HAL_ADC_PollForConversion(&hadc1,100000)== HAL_OK)
 80004fc:	490a      	ldr	r1, [pc, #40]	; (8000528 <main+0x5c>)
 80004fe:	4808      	ldr	r0, [pc, #32]	; (8000520 <main+0x54>)
 8000500:	f000 fc89 	bl	8000e16 <HAL_ADC_PollForConversion>
 8000504:	4603      	mov	r3, r0
 8000506:	2b00      	cmp	r3, #0
 8000508:	d106      	bne.n	8000518 <main+0x4c>
	 	  	adcdegeri = HAL_ADC_GetValue(&hadc1);
 800050a:	4805      	ldr	r0, [pc, #20]	; (8000520 <main+0x54>)
 800050c:	f000 fd0e 	bl	8000f2c <HAL_ADC_GetValue>
 8000510:	4603      	mov	r3, r0
 8000512:	b29a      	uxth	r2, r3
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <main+0x60>)
 8000516:	801a      	strh	r2, [r3, #0]

	 	  HAL_ADC_Stop(&hadc1);
 8000518:	4801      	ldr	r0, [pc, #4]	; (8000520 <main+0x54>)
 800051a:	f000 fc49 	bl	8000db0 <HAL_ADC_Stop>
	  HAL_ADC_Start(&hadc1);
 800051e:	e7ea      	b.n	80004f6 <main+0x2a>
 8000520:	2000011c 	.word	0x2000011c
 8000524:	20000164 	.word	0x20000164
 8000528:	000186a0 	.word	0x000186a0
 800052c:	20000118 	.word	0x20000118

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b094      	sub	sp, #80	; 0x50
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 0320 	add.w	r3, r7, #32
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f008 f838 	bl	80085b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 030c 	add.w	r3, r7, #12
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000554:	2300      	movs	r3, #0
 8000556:	60bb      	str	r3, [r7, #8]
 8000558:	4b28      	ldr	r3, [pc, #160]	; (80005fc <SystemClock_Config+0xcc>)
 800055a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800055c:	4a27      	ldr	r2, [pc, #156]	; (80005fc <SystemClock_Config+0xcc>)
 800055e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000562:	6413      	str	r3, [r2, #64]	; 0x40
 8000564:	4b25      	ldr	r3, [pc, #148]	; (80005fc <SystemClock_Config+0xcc>)
 8000566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800056c:	60bb      	str	r3, [r7, #8]
 800056e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000570:	2300      	movs	r3, #0
 8000572:	607b      	str	r3, [r7, #4]
 8000574:	4b22      	ldr	r3, [pc, #136]	; (8000600 <SystemClock_Config+0xd0>)
 8000576:	681b      	ldr	r3, [r3, #0]
 8000578:	4a21      	ldr	r2, [pc, #132]	; (8000600 <SystemClock_Config+0xd0>)
 800057a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800057e:	6013      	str	r3, [r2, #0]
 8000580:	4b1f      	ldr	r3, [pc, #124]	; (8000600 <SystemClock_Config+0xd0>)
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000588:	607b      	str	r3, [r7, #4]
 800058a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800058c:	2301      	movs	r3, #1
 800058e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000590:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000594:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000596:	2302      	movs	r3, #2
 8000598:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800059a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800059e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005a0:	2304      	movs	r3, #4
 80005a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80005a4:	23a8      	movs	r3, #168	; 0xa8
 80005a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005a8:	2302      	movs	r3, #2
 80005aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ac:	2307      	movs	r3, #7
 80005ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b0:	f107 0320 	add.w	r3, r7, #32
 80005b4:	4618      	mov	r0, r3
 80005b6:	f002 fc11 	bl	8002ddc <HAL_RCC_OscConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005c0:	f000 f910 	bl	80007e4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005c4:	230f      	movs	r3, #15
 80005c6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005c8:	2302      	movs	r3, #2
 80005ca:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005cc:	2300      	movs	r3, #0
 80005ce:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005da:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2105      	movs	r1, #5
 80005e2:	4618      	mov	r0, r3
 80005e4:	f002 fe72 	bl	80032cc <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005ee:	f000 f8f9 	bl	80007e4 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3750      	adds	r7, #80	; 0x50
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40023800 	.word	0x40023800
 8000600:	40007000 	.word	0x40007000

08000604 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000604:	b580      	push	{r7, lr}
 8000606:	b084      	sub	sp, #16
 8000608:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800060a:	463b      	mov	r3, r7
 800060c:	2200      	movs	r2, #0
 800060e:	601a      	str	r2, [r3, #0]
 8000610:	605a      	str	r2, [r3, #4]
 8000612:	609a      	str	r2, [r3, #8]
 8000614:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000616:	4b21      	ldr	r3, [pc, #132]	; (800069c <MX_ADC1_Init+0x98>)
 8000618:	4a21      	ldr	r2, [pc, #132]	; (80006a0 <MX_ADC1_Init+0x9c>)
 800061a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800061c:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_ADC1_Init+0x98>)
 800061e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000622:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000624:	4b1d      	ldr	r3, [pc, #116]	; (800069c <MX_ADC1_Init+0x98>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800062a:	4b1c      	ldr	r3, [pc, #112]	; (800069c <MX_ADC1_Init+0x98>)
 800062c:	2200      	movs	r2, #0
 800062e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000630:	4b1a      	ldr	r3, [pc, #104]	; (800069c <MX_ADC1_Init+0x98>)
 8000632:	2201      	movs	r2, #1
 8000634:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000636:	4b19      	ldr	r3, [pc, #100]	; (800069c <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800063e:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_ADC1_Init+0x98>)
 8000640:	2200      	movs	r2, #0
 8000642:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000644:	4b15      	ldr	r3, [pc, #84]	; (800069c <MX_ADC1_Init+0x98>)
 8000646:	4a17      	ldr	r2, [pc, #92]	; (80006a4 <MX_ADC1_Init+0xa0>)
 8000648:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_ADC1_Init+0x98>)
 800064c:	2200      	movs	r2, #0
 800064e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000650:	4b12      	ldr	r3, [pc, #72]	; (800069c <MX_ADC1_Init+0x98>)
 8000652:	2201      	movs	r2, #1
 8000654:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000656:	4b11      	ldr	r3, [pc, #68]	; (800069c <MX_ADC1_Init+0x98>)
 8000658:	2200      	movs	r2, #0
 800065a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065e:	4b0f      	ldr	r3, [pc, #60]	; (800069c <MX_ADC1_Init+0x98>)
 8000660:	2201      	movs	r2, #1
 8000662:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000664:	480d      	ldr	r0, [pc, #52]	; (800069c <MX_ADC1_Init+0x98>)
 8000666:	f000 fa8d 	bl	8000b84 <HAL_ADC_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000670:	f000 f8b8 	bl	80007e4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000674:	2301      	movs	r3, #1
 8000676:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000678:	2301      	movs	r3, #1
 800067a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800067c:	2300      	movs	r3, #0
 800067e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000680:	463b      	mov	r3, r7
 8000682:	4619      	mov	r1, r3
 8000684:	4805      	ldr	r0, [pc, #20]	; (800069c <MX_ADC1_Init+0x98>)
 8000686:	f000 fc5f 	bl	8000f48 <HAL_ADC_ConfigChannel>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000690:	f000 f8a8 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000694:	bf00      	nop
 8000696:	3710      	adds	r7, #16
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	2000011c 	.word	0x2000011c
 80006a0:	40012000 	.word	0x40012000
 80006a4:	0f000001 	.word	0x0f000001

080006a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b08e      	sub	sp, #56	; 0x38
 80006ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80006ae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
 80006b6:	605a      	str	r2, [r3, #4]
 80006b8:	609a      	str	r2, [r3, #8]
 80006ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006bc:	f107 0320 	add.w	r3, r7, #32
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80006c6:	1d3b      	adds	r3, r7, #4
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
 80006cc:	605a      	str	r2, [r3, #4]
 80006ce:	609a      	str	r2, [r3, #8]
 80006d0:	60da      	str	r2, [r3, #12]
 80006d2:	611a      	str	r2, [r3, #16]
 80006d4:	615a      	str	r2, [r3, #20]
 80006d6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80006d8:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <MX_TIM2_Init+0xe8>)
 80006da:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80006de:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 127;
 80006e0:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <MX_TIM2_Init+0xe8>)
 80006e2:	227f      	movs	r2, #127	; 0x7f
 80006e4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006e6:	4b2a      	ldr	r3, [pc, #168]	; (8000790 <MX_TIM2_Init+0xe8>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 625;
 80006ec:	4b28      	ldr	r3, [pc, #160]	; (8000790 <MX_TIM2_Init+0xe8>)
 80006ee:	f240 2271 	movw	r2, #625	; 0x271
 80006f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80006f4:	4b26      	ldr	r3, [pc, #152]	; (8000790 <MX_TIM2_Init+0xe8>)
 80006f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80006fa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006fc:	4b24      	ldr	r3, [pc, #144]	; (8000790 <MX_TIM2_Init+0xe8>)
 80006fe:	2200      	movs	r2, #0
 8000700:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000702:	4823      	ldr	r0, [pc, #140]	; (8000790 <MX_TIM2_Init+0xe8>)
 8000704:	f002 ffda 	bl	80036bc <HAL_TIM_Base_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800070e:	f000 f869 	bl	80007e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000712:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000716:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000718:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800071c:	4619      	mov	r1, r3
 800071e:	481c      	ldr	r0, [pc, #112]	; (8000790 <MX_TIM2_Init+0xe8>)
 8000720:	f003 f9fe 	bl	8003b20 <HAL_TIM_ConfigClockSource>
 8000724:	4603      	mov	r3, r0
 8000726:	2b00      	cmp	r3, #0
 8000728:	d001      	beq.n	800072e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800072a:	f000 f85b 	bl	80007e4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800072e:	4818      	ldr	r0, [pc, #96]	; (8000790 <MX_TIM2_Init+0xe8>)
 8000730:	f003 f813 	bl	800375a <HAL_TIM_PWM_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800073a:	f000 f853 	bl	80007e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800073e:	2300      	movs	r3, #0
 8000740:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000742:	2300      	movs	r3, #0
 8000744:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000746:	f107 0320 	add.w	r3, r7, #32
 800074a:	4619      	mov	r1, r3
 800074c:	4810      	ldr	r0, [pc, #64]	; (8000790 <MX_TIM2_Init+0xe8>)
 800074e:	f003 fdbf 	bl	80042d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000758:	f000 f844 	bl	80007e4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800075c:	2360      	movs	r3, #96	; 0x60
 800075e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000768:	2300      	movs	r3, #0
 800076a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800076c:	1d3b      	adds	r3, r7, #4
 800076e:	2200      	movs	r2, #0
 8000770:	4619      	mov	r1, r3
 8000772:	4807      	ldr	r0, [pc, #28]	; (8000790 <MX_TIM2_Init+0xe8>)
 8000774:	f003 f912 	bl	800399c <HAL_TIM_PWM_ConfigChannel>
 8000778:	4603      	mov	r3, r0
 800077a:	2b00      	cmp	r3, #0
 800077c:	d001      	beq.n	8000782 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800077e:	f000 f831 	bl	80007e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000782:	4803      	ldr	r0, [pc, #12]	; (8000790 <MX_TIM2_Init+0xe8>)
 8000784:	f000 f8c0 	bl	8000908 <HAL_TIM_MspPostInit>

}
 8000788:	bf00      	nop
 800078a:	3738      	adds	r7, #56	; 0x38
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	20000164 	.word	0x20000164

08000794 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800079a:	2300      	movs	r3, #0
 800079c:	607b      	str	r3, [r7, #4]
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_GPIO_Init+0x4c>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_GPIO_Init+0x4c>)
 80007a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_GPIO_Init+0x4c>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007b6:	2300      	movs	r3, #0
 80007b8:	603b      	str	r3, [r7, #0]
 80007ba:	4b09      	ldr	r3, [pc, #36]	; (80007e0 <MX_GPIO_Init+0x4c>)
 80007bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007be:	4a08      	ldr	r2, [pc, #32]	; (80007e0 <MX_GPIO_Init+0x4c>)
 80007c0:	f043 0301 	orr.w	r3, r3, #1
 80007c4:	6313      	str	r3, [r2, #48]	; 0x30
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <MX_GPIO_Init+0x4c>)
 80007c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ca:	f003 0301 	and.w	r3, r3, #1
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007d2:	bf00      	nop
 80007d4:	370c      	adds	r7, #12
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007e8:	b672      	cpsid	i
}
 80007ea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007ec:	e7fe      	b.n	80007ec <Error_Handler+0x8>
	...

080007f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007f6:	2300      	movs	r3, #0
 80007f8:	607b      	str	r3, [r7, #4]
 80007fa:	4b10      	ldr	r3, [pc, #64]	; (800083c <HAL_MspInit+0x4c>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <HAL_MspInit+0x4c>)
 8000800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000804:	6453      	str	r3, [r2, #68]	; 0x44
 8000806:	4b0d      	ldr	r3, [pc, #52]	; (800083c <HAL_MspInit+0x4c>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800080e:	607b      	str	r3, [r7, #4]
 8000810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	603b      	str	r3, [r7, #0]
 8000816:	4b09      	ldr	r3, [pc, #36]	; (800083c <HAL_MspInit+0x4c>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	4a08      	ldr	r2, [pc, #32]	; (800083c <HAL_MspInit+0x4c>)
 800081c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000820:	6413      	str	r3, [r2, #64]	; 0x40
 8000822:	4b06      	ldr	r3, [pc, #24]	; (800083c <HAL_MspInit+0x4c>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800082a:	603b      	str	r3, [r7, #0]
 800082c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	40023800 	.word	0x40023800

08000840 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08a      	sub	sp, #40	; 0x28
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000848:	f107 0314 	add.w	r3, r7, #20
 800084c:	2200      	movs	r2, #0
 800084e:	601a      	str	r2, [r3, #0]
 8000850:	605a      	str	r2, [r3, #4]
 8000852:	609a      	str	r2, [r3, #8]
 8000854:	60da      	str	r2, [r3, #12]
 8000856:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a17      	ldr	r2, [pc, #92]	; (80008bc <HAL_ADC_MspInit+0x7c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d127      	bne.n	80008b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b16      	ldr	r3, [pc, #88]	; (80008c0 <HAL_ADC_MspInit+0x80>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a15      	ldr	r2, [pc, #84]	; (80008c0 <HAL_ADC_MspInit+0x80>)
 800086c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
 8000872:	4b13      	ldr	r3, [pc, #76]	; (80008c0 <HAL_ADC_MspInit+0x80>)
 8000874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000876:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b0f      	ldr	r3, [pc, #60]	; (80008c0 <HAL_ADC_MspInit+0x80>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a0e      	ldr	r2, [pc, #56]	; (80008c0 <HAL_ADC_MspInit+0x80>)
 8000888:	f043 0301 	orr.w	r3, r3, #1
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b0c      	ldr	r3, [pc, #48]	; (80008c0 <HAL_ADC_MspInit+0x80>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0301 	and.w	r3, r3, #1
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800089a:	2302      	movs	r3, #2
 800089c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800089e:	2303      	movs	r3, #3
 80008a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a6:	f107 0314 	add.w	r3, r7, #20
 80008aa:	4619      	mov	r1, r3
 80008ac:	4805      	ldr	r0, [pc, #20]	; (80008c4 <HAL_ADC_MspInit+0x84>)
 80008ae:	f000 fe7b 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80008b2:	bf00      	nop
 80008b4:	3728      	adds	r7, #40	; 0x28
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40012000 	.word	0x40012000
 80008c0:	40023800 	.word	0x40023800
 80008c4:	40020000 	.word	0x40020000

080008c8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b085      	sub	sp, #20
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008d8:	d10d      	bne.n	80008f6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008da:	2300      	movs	r3, #0
 80008dc:	60fb      	str	r3, [r7, #12]
 80008de:	4b09      	ldr	r3, [pc, #36]	; (8000904 <HAL_TIM_Base_MspInit+0x3c>)
 80008e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e2:	4a08      	ldr	r2, [pc, #32]	; (8000904 <HAL_TIM_Base_MspInit+0x3c>)
 80008e4:	f043 0301 	orr.w	r3, r3, #1
 80008e8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_TIM_Base_MspInit+0x3c>)
 80008ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ee:	f003 0301 	and.w	r3, r3, #1
 80008f2:	60fb      	str	r3, [r7, #12]
 80008f4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80008f6:	bf00      	nop
 80008f8:	3714      	adds	r7, #20
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr
 8000902:	bf00      	nop
 8000904:	40023800 	.word	0x40023800

08000908 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b088      	sub	sp, #32
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000910:	f107 030c 	add.w	r3, r7, #12
 8000914:	2200      	movs	r2, #0
 8000916:	601a      	str	r2, [r3, #0]
 8000918:	605a      	str	r2, [r3, #4]
 800091a:	609a      	str	r2, [r3, #8]
 800091c:	60da      	str	r2, [r3, #12]
 800091e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000928:	d11d      	bne.n	8000966 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	60bb      	str	r3, [r7, #8]
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <HAL_TIM_MspPostInit+0x68>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a0f      	ldr	r2, [pc, #60]	; (8000970 <HAL_TIM_MspPostInit+0x68>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <HAL_TIM_MspPostInit+0x68>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60bb      	str	r3, [r7, #8]
 8000944:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000946:	2320      	movs	r3, #32
 8000948:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000956:	2301      	movs	r3, #1
 8000958:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 030c 	add.w	r3, r7, #12
 800095e:	4619      	mov	r1, r3
 8000960:	4804      	ldr	r0, [pc, #16]	; (8000974 <HAL_TIM_MspPostInit+0x6c>)
 8000962:	f000 fe21 	bl	80015a8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000966:	bf00      	nop
 8000968:	3720      	adds	r7, #32
 800096a:	46bd      	mov	sp, r7
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023800 	.word	0x40023800
 8000974:	40020000 	.word	0x40020000

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800097c:	e7fe      	b.n	800097c <NMI_Handler+0x4>

0800097e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097e:	b480      	push	{r7}
 8000980:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000982:	e7fe      	b.n	8000982 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	e7fe      	b.n	8000988 <MemManage_Handler+0x4>

0800098a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800098e:	e7fe      	b.n	800098e <BusFault_Handler+0x4>

08000990 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000994:	e7fe      	b.n	8000994 <UsageFault_Handler+0x4>

08000996 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000996:	b480      	push	{r7}
 8000998:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	46bd      	mov	sp, r7
 800099e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a2:	4770      	bx	lr

080009a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a8:	bf00      	nop
 80009aa:	46bd      	mov	sp, r7
 80009ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b0:	4770      	bx	lr

080009b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009b6:	bf00      	nop
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c4:	f000 f89a 	bl	8000afc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c8:	bf00      	nop
 80009ca:	bd80      	pop	{r7, pc}

080009cc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <OTG_FS_IRQHandler+0x10>)
 80009d2:	f001 f8d5 	bl	8001b80 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	20001690 	.word	0x20001690

080009e0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009e4:	4b06      	ldr	r3, [pc, #24]	; (8000a00 <SystemInit+0x20>)
 80009e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <SystemInit+0x20>)
 80009ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009f4:	bf00      	nop
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000a04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a3c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a08:	480d      	ldr	r0, [pc, #52]	; (8000a40 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a0a:	490e      	ldr	r1, [pc, #56]	; (8000a44 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a0c:	4a0e      	ldr	r2, [pc, #56]	; (8000a48 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a10:	e002      	b.n	8000a18 <LoopCopyDataInit>

08000a12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a16:	3304      	adds	r3, #4

08000a18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a1c:	d3f9      	bcc.n	8000a12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1e:	4a0b      	ldr	r2, [pc, #44]	; (8000a4c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a20:	4c0b      	ldr	r4, [pc, #44]	; (8000a50 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a24:	e001      	b.n	8000a2a <LoopFillZerobss>

08000a26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a28:	3204      	adds	r2, #4

08000a2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a2c:	d3fb      	bcc.n	8000a26 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a2e:	f7ff ffd7 	bl	80009e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a32:	f007 fd9b 	bl	800856c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a36:	f7ff fd49 	bl	80004cc <main>
  bx  lr    
 8000a3a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a3c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a40:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a44:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8000a48:	08008644 	.word	0x08008644
  ldr r2, =_sbss
 8000a4c:	200000fc 	.word	0x200000fc
  ldr r4, =_ebss
 8000a50:	20001dbc 	.word	0x20001dbc

08000a54 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a54:	e7fe      	b.n	8000a54 <ADC_IRQHandler>
	...

08000a58 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a5c:	4b0e      	ldr	r3, [pc, #56]	; (8000a98 <HAL_Init+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <HAL_Init+0x40>)
 8000a62:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a66:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a68:	4b0b      	ldr	r3, [pc, #44]	; (8000a98 <HAL_Init+0x40>)
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_Init+0x40>)
 8000a6e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a72:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a74:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a07      	ldr	r2, [pc, #28]	; (8000a98 <HAL_Init+0x40>)
 8000a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a80:	2003      	movs	r0, #3
 8000a82:	f000 fd4f 	bl	8001524 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a86:	200f      	movs	r0, #15
 8000a88:	f000 f808 	bl	8000a9c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a8c:	f7ff feb0 	bl	80007f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40023c00 	.word	0x40023c00

08000a9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b082      	sub	sp, #8
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000aa4:	4b12      	ldr	r3, [pc, #72]	; (8000af0 <HAL_InitTick+0x54>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	4b12      	ldr	r3, [pc, #72]	; (8000af4 <HAL_InitTick+0x58>)
 8000aaa:	781b      	ldrb	r3, [r3, #0]
 8000aac:	4619      	mov	r1, r3
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ab6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aba:	4618      	mov	r0, r3
 8000abc:	f000 fd67 	bl	800158e <HAL_SYSTICK_Config>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	d001      	beq.n	8000aca <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	e00e      	b.n	8000ae8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2b0f      	cmp	r3, #15
 8000ace:	d80a      	bhi.n	8000ae6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	6879      	ldr	r1, [r7, #4]
 8000ad4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad8:	f000 fd2f 	bl	800153a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000adc:	4a06      	ldr	r2, [pc, #24]	; (8000af8 <HAL_InitTick+0x5c>)
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	e000      	b.n	8000ae8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ae6:	2301      	movs	r3, #1
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000008 	.word	0x20000008
 8000af8:	20000004 	.word	0x20000004

08000afc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000afc:	b480      	push	{r7}
 8000afe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b00:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <HAL_IncTick+0x20>)
 8000b02:	781b      	ldrb	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	4b06      	ldr	r3, [pc, #24]	; (8000b20 <HAL_IncTick+0x24>)
 8000b08:	681b      	ldr	r3, [r3, #0]
 8000b0a:	4413      	add	r3, r2
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <HAL_IncTick+0x24>)
 8000b0e:	6013      	str	r3, [r2, #0]
}
 8000b10:	bf00      	nop
 8000b12:	46bd      	mov	sp, r7
 8000b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop
 8000b1c:	20000008 	.word	0x20000008
 8000b20:	200001ac 	.word	0x200001ac

08000b24 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return uwTick;
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetTick+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200001ac 	.word	0x200001ac

08000b3c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b084      	sub	sp, #16
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b44:	f7ff ffee 	bl	8000b24 <HAL_GetTick>
 8000b48:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b54:	d005      	beq.n	8000b62 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <HAL_Delay+0x44>)
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	4413      	add	r3, r2
 8000b60:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b62:	bf00      	nop
 8000b64:	f7ff ffde 	bl	8000b24 <HAL_GetTick>
 8000b68:	4602      	mov	r2, r0
 8000b6a:	68bb      	ldr	r3, [r7, #8]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	68fa      	ldr	r2, [r7, #12]
 8000b70:	429a      	cmp	r2, r3
 8000b72:	d8f7      	bhi.n	8000b64 <HAL_Delay+0x28>
  {
  }
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3710      	adds	r7, #16
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b084      	sub	sp, #16
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d101      	bne.n	8000b9a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
 8000b98:	e033      	b.n	8000c02 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d109      	bne.n	8000bb6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000ba2:	6878      	ldr	r0, [r7, #4]
 8000ba4:	f7ff fe4c 	bl	8000840 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2200      	movs	r2, #0
 8000bac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 0310 	and.w	r3, r3, #16
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d118      	bne.n	8000bf4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000bca:	f023 0302 	bic.w	r3, r3, #2
 8000bce:	f043 0202 	orr.w	r2, r3, #2
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000bd6:	6878      	ldr	r0, [r7, #4]
 8000bd8:	f000 fad8 	bl	800118c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2200      	movs	r2, #0
 8000be0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be6:	f023 0303 	bic.w	r3, r3, #3
 8000bea:	f043 0201 	orr.w	r2, r3, #1
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bf2:	e001      	b.n	8000bf8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000bf4:	2301      	movs	r3, #1
 8000bf6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000c00:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c02:	4618      	mov	r0, r3
 8000c04:	3710      	adds	r7, #16
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
	...

08000c0c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000c14:	2300      	movs	r3, #0
 8000c16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000c1e:	2b01      	cmp	r3, #1
 8000c20:	d101      	bne.n	8000c26 <HAL_ADC_Start+0x1a>
 8000c22:	2302      	movs	r3, #2
 8000c24:	e0b2      	b.n	8000d8c <HAL_ADC_Start+0x180>
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	2201      	movs	r2, #1
 8000c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	689b      	ldr	r3, [r3, #8]
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	2b01      	cmp	r3, #1
 8000c3a:	d018      	beq.n	8000c6e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	689a      	ldr	r2, [r3, #8]
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	f042 0201 	orr.w	r2, r2, #1
 8000c4a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000c4c:	4b52      	ldr	r3, [pc, #328]	; (8000d98 <HAL_ADC_Start+0x18c>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a52      	ldr	r2, [pc, #328]	; (8000d9c <HAL_ADC_Start+0x190>)
 8000c52:	fba2 2303 	umull	r2, r3, r2, r3
 8000c56:	0c9a      	lsrs	r2, r3, #18
 8000c58:	4613      	mov	r3, r2
 8000c5a:	005b      	lsls	r3, r3, #1
 8000c5c:	4413      	add	r3, r2
 8000c5e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c60:	e002      	b.n	8000c68 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	3b01      	subs	r3, #1
 8000c66:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	2b00      	cmp	r3, #0
 8000c6c:	d1f9      	bne.n	8000c62 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000c6e:	687b      	ldr	r3, [r7, #4]
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	689b      	ldr	r3, [r3, #8]
 8000c74:	f003 0301 	and.w	r3, r3, #1
 8000c78:	2b01      	cmp	r3, #1
 8000c7a:	d17a      	bne.n	8000d72 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c84:	f023 0301 	bic.w	r3, r3, #1
 8000c88:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d007      	beq.n	8000cae <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ca6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cba:	d106      	bne.n	8000cca <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cc0:	f023 0206 	bic.w	r2, r3, #6
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	645a      	str	r2, [r3, #68]	; 0x44
 8000cc8:	e002      	b.n	8000cd0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2200      	movs	r2, #0
 8000cce:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000cd8:	4b31      	ldr	r3, [pc, #196]	; (8000da0 <HAL_ADC_Start+0x194>)
 8000cda:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000ce4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	685b      	ldr	r3, [r3, #4]
 8000cea:	f003 031f 	and.w	r3, r3, #31
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d12a      	bne.n	8000d48 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	4a2b      	ldr	r2, [pc, #172]	; (8000da4 <HAL_ADC_Start+0x198>)
 8000cf8:	4293      	cmp	r3, r2
 8000cfa:	d015      	beq.n	8000d28 <HAL_ADC_Start+0x11c>
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	4a29      	ldr	r2, [pc, #164]	; (8000da8 <HAL_ADC_Start+0x19c>)
 8000d02:	4293      	cmp	r3, r2
 8000d04:	d105      	bne.n	8000d12 <HAL_ADC_Start+0x106>
 8000d06:	4b26      	ldr	r3, [pc, #152]	; (8000da0 <HAL_ADC_Start+0x194>)
 8000d08:	685b      	ldr	r3, [r3, #4]
 8000d0a:	f003 031f 	and.w	r3, r3, #31
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00a      	beq.n	8000d28 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	681b      	ldr	r3, [r3, #0]
 8000d16:	4a25      	ldr	r2, [pc, #148]	; (8000dac <HAL_ADC_Start+0x1a0>)
 8000d18:	4293      	cmp	r3, r2
 8000d1a:	d136      	bne.n	8000d8a <HAL_ADC_Start+0x17e>
 8000d1c:	4b20      	ldr	r3, [pc, #128]	; (8000da0 <HAL_ADC_Start+0x194>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 0310 	and.w	r3, r3, #16
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d130      	bne.n	8000d8a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	689b      	ldr	r3, [r3, #8]
 8000d2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d129      	bne.n	8000d8a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	689a      	ldr	r2, [r3, #8]
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d44:	609a      	str	r2, [r3, #8]
 8000d46:	e020      	b.n	8000d8a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	681b      	ldr	r3, [r3, #0]
 8000d4c:	4a15      	ldr	r2, [pc, #84]	; (8000da4 <HAL_ADC_Start+0x198>)
 8000d4e:	4293      	cmp	r3, r2
 8000d50:	d11b      	bne.n	8000d8a <HAL_ADC_Start+0x17e>
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	689b      	ldr	r3, [r3, #8]
 8000d58:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000d5c:	2b00      	cmp	r3, #0
 8000d5e:	d114      	bne.n	8000d8a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	689a      	ldr	r2, [r3, #8]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000d6e:	609a      	str	r2, [r3, #8]
 8000d70:	e00b      	b.n	8000d8a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d76:	f043 0210 	orr.w	r2, r3, #16
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	f043 0201 	orr.w	r2, r3, #1
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000d8a:	2300      	movs	r3, #0
}
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	3714      	adds	r7, #20
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr
 8000d98:	20000000 	.word	0x20000000
 8000d9c:	431bde83 	.word	0x431bde83
 8000da0:	40012300 	.word	0x40012300
 8000da4:	40012000 	.word	0x40012000
 8000da8:	40012100 	.word	0x40012100
 8000dac:	40012200 	.word	0x40012200

08000db0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000db0:	b480      	push	{r7}
 8000db2:	b083      	sub	sp, #12
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dbe:	2b01      	cmp	r3, #1
 8000dc0:	d101      	bne.n	8000dc6 <HAL_ADC_Stop+0x16>
 8000dc2:	2302      	movs	r3, #2
 8000dc4:	e021      	b.n	8000e0a <HAL_ADC_Stop+0x5a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	2201      	movs	r2, #1
 8000dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	689a      	ldr	r2, [r3, #8]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f022 0201 	bic.w	r2, r2, #1
 8000ddc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	689b      	ldr	r3, [r3, #8]
 8000de4:	f003 0301 	and.w	r3, r3, #1
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d109      	bne.n	8000e00 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df0:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000df4:	f023 0301 	bic.w	r3, r3, #1
 8000df8:	f043 0201 	orr.w	r2, r3, #1
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b084      	sub	sp, #16
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689b      	ldr	r3, [r3, #8]
 8000e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000e32:	d113      	bne.n	8000e5c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689b      	ldr	r3, [r3, #8]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000e3e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000e42:	d10b      	bne.n	8000e5c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e48:	f043 0220 	orr.w	r2, r3, #32
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000e58:	2301      	movs	r3, #1
 8000e5a:	e063      	b.n	8000f24 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e5c:	f7ff fe62 	bl	8000b24 <HAL_GetTick>
 8000e60:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e62:	e021      	b.n	8000ea8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e6a:	d01d      	beq.n	8000ea8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d007      	beq.n	8000e82 <HAL_ADC_PollForConversion+0x6c>
 8000e72:	f7ff fe57 	bl	8000b24 <HAL_GetTick>
 8000e76:	4602      	mov	r2, r0
 8000e78:	68fb      	ldr	r3, [r7, #12]
 8000e7a:	1ad3      	subs	r3, r2, r3
 8000e7c:	683a      	ldr	r2, [r7, #0]
 8000e7e:	429a      	cmp	r2, r3
 8000e80:	d212      	bcs.n	8000ea8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0302 	and.w	r3, r3, #2
 8000e8c:	2b02      	cmp	r3, #2
 8000e8e:	d00b      	beq.n	8000ea8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e94:	f043 0204 	orr.w	r2, r3, #4
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8000ea4:	2303      	movs	r3, #3
 8000ea6:	e03d      	b.n	8000f24 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f003 0302 	and.w	r3, r3, #2
 8000eb2:	2b02      	cmp	r3, #2
 8000eb4:	d1d6      	bne.n	8000e64 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f06f 0212 	mvn.w	r2, #18
 8000ebe:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	689b      	ldr	r3, [r3, #8]
 8000ed2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d123      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d11f      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ee8:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d006      	beq.n	8000efe <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	689b      	ldr	r3, [r3, #8]
 8000ef6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d111      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f02:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d105      	bne.n	8000f22 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1a:	f043 0201 	orr.w	r2, r3, #1
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8000f22:	2300      	movs	r3, #0
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3710      	adds	r7, #16
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	370c      	adds	r7, #12
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b085      	sub	sp, #20
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f5c:	2b01      	cmp	r3, #1
 8000f5e:	d101      	bne.n	8000f64 <HAL_ADC_ConfigChannel+0x1c>
 8000f60:	2302      	movs	r3, #2
 8000f62:	e105      	b.n	8001170 <HAL_ADC_ConfigChannel+0x228>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2201      	movs	r2, #1
 8000f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	2b09      	cmp	r3, #9
 8000f72:	d925      	bls.n	8000fc0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	68d9      	ldr	r1, [r3, #12]
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	b29b      	uxth	r3, r3
 8000f80:	461a      	mov	r2, r3
 8000f82:	4613      	mov	r3, r2
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	4413      	add	r3, r2
 8000f88:	3b1e      	subs	r3, #30
 8000f8a:	2207      	movs	r2, #7
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f90:	43da      	mvns	r2, r3
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	400a      	ands	r2, r1
 8000f98:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68d9      	ldr	r1, [r3, #12]
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	689a      	ldr	r2, [r3, #8]
 8000fa4:	683b      	ldr	r3, [r7, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	b29b      	uxth	r3, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	4603      	mov	r3, r0
 8000fae:	005b      	lsls	r3, r3, #1
 8000fb0:	4403      	add	r3, r0
 8000fb2:	3b1e      	subs	r3, #30
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	430a      	orrs	r2, r1
 8000fbc:	60da      	str	r2, [r3, #12]
 8000fbe:	e022      	b.n	8001006 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	6919      	ldr	r1, [r3, #16]
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	461a      	mov	r2, r3
 8000fce:	4613      	mov	r3, r2
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	4413      	add	r3, r2
 8000fd4:	2207      	movs	r2, #7
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	43da      	mvns	r2, r3
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	400a      	ands	r2, r1
 8000fe2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	6919      	ldr	r1, [r3, #16]
 8000fea:	683b      	ldr	r3, [r7, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	b29b      	uxth	r3, r3
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	4603      	mov	r3, r0
 8000ff8:	005b      	lsls	r3, r3, #1
 8000ffa:	4403      	add	r3, r0
 8000ffc:	409a      	lsls	r2, r3
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	430a      	orrs	r2, r1
 8001004:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	2b06      	cmp	r3, #6
 800100c:	d824      	bhi.n	8001058 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	685a      	ldr	r2, [r3, #4]
 8001018:	4613      	mov	r3, r2
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	4413      	add	r3, r2
 800101e:	3b05      	subs	r3, #5
 8001020:	221f      	movs	r2, #31
 8001022:	fa02 f303 	lsl.w	r3, r2, r3
 8001026:	43da      	mvns	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	400a      	ands	r2, r1
 800102e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	b29b      	uxth	r3, r3
 800103c:	4618      	mov	r0, r3
 800103e:	683b      	ldr	r3, [r7, #0]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	4613      	mov	r3, r2
 8001044:	009b      	lsls	r3, r3, #2
 8001046:	4413      	add	r3, r2
 8001048:	3b05      	subs	r3, #5
 800104a:	fa00 f203 	lsl.w	r2, r0, r3
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	430a      	orrs	r2, r1
 8001054:	635a      	str	r2, [r3, #52]	; 0x34
 8001056:	e04c      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	685b      	ldr	r3, [r3, #4]
 800105c:	2b0c      	cmp	r3, #12
 800105e:	d824      	bhi.n	80010aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685a      	ldr	r2, [r3, #4]
 800106a:	4613      	mov	r3, r2
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	4413      	add	r3, r2
 8001070:	3b23      	subs	r3, #35	; 0x23
 8001072:	221f      	movs	r2, #31
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43da      	mvns	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	400a      	ands	r2, r1
 8001080:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	b29b      	uxth	r3, r3
 800108e:	4618      	mov	r0, r3
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	4613      	mov	r3, r2
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	4413      	add	r3, r2
 800109a:	3b23      	subs	r3, #35	; 0x23
 800109c:	fa00 f203 	lsl.w	r2, r0, r3
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	430a      	orrs	r2, r1
 80010a6:	631a      	str	r2, [r3, #48]	; 0x30
 80010a8:	e023      	b.n	80010f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4613      	mov	r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4413      	add	r3, r2
 80010ba:	3b41      	subs	r3, #65	; 0x41
 80010bc:	221f      	movs	r2, #31
 80010be:	fa02 f303 	lsl.w	r3, r2, r3
 80010c2:	43da      	mvns	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	400a      	ands	r2, r1
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	4618      	mov	r0, r3
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	685a      	ldr	r2, [r3, #4]
 80010de:	4613      	mov	r3, r2
 80010e0:	009b      	lsls	r3, r3, #2
 80010e2:	4413      	add	r3, r2
 80010e4:	3b41      	subs	r3, #65	; 0x41
 80010e6:	fa00 f203 	lsl.w	r2, r0, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80010f2:	4b22      	ldr	r3, [pc, #136]	; (800117c <HAL_ADC_ConfigChannel+0x234>)
 80010f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a21      	ldr	r2, [pc, #132]	; (8001180 <HAL_ADC_ConfigChannel+0x238>)
 80010fc:	4293      	cmp	r3, r2
 80010fe:	d109      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1cc>
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	2b12      	cmp	r3, #18
 8001106:	d105      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	685b      	ldr	r3, [r3, #4]
 800110c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a19      	ldr	r2, [pc, #100]	; (8001180 <HAL_ADC_ConfigChannel+0x238>)
 800111a:	4293      	cmp	r3, r2
 800111c:	d123      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x21e>
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	2b10      	cmp	r3, #16
 8001124:	d003      	beq.n	800112e <HAL_ADC_ConfigChannel+0x1e6>
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	2b11      	cmp	r3, #17
 800112c:	d11b      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800113a:	683b      	ldr	r3, [r7, #0]
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	2b10      	cmp	r3, #16
 8001140:	d111      	bne.n	8001166 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001142:	4b10      	ldr	r3, [pc, #64]	; (8001184 <HAL_ADC_ConfigChannel+0x23c>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	4a10      	ldr	r2, [pc, #64]	; (8001188 <HAL_ADC_ConfigChannel+0x240>)
 8001148:	fba2 2303 	umull	r2, r3, r2, r3
 800114c:	0c9a      	lsrs	r2, r3, #18
 800114e:	4613      	mov	r3, r2
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	4413      	add	r3, r2
 8001154:	005b      	lsls	r3, r3, #1
 8001156:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001158:	e002      	b.n	8001160 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800115a:	68bb      	ldr	r3, [r7, #8]
 800115c:	3b01      	subs	r3, #1
 800115e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f9      	bne.n	800115a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	2200      	movs	r2, #0
 800116a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800116e:	2300      	movs	r3, #0
}
 8001170:	4618      	mov	r0, r3
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40012300 	.word	0x40012300
 8001180:	40012000 	.word	0x40012000
 8001184:	20000000 	.word	0x20000000
 8001188:	431bde83 	.word	0x431bde83

0800118c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001194:	4b79      	ldr	r3, [pc, #484]	; (800137c <ADC_Init+0x1f0>)
 8001196:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	685b      	ldr	r3, [r3, #4]
 800119c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	685a      	ldr	r2, [r3, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	685b      	ldr	r3, [r3, #4]
 80011ac:	431a      	orrs	r2, r3
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	685a      	ldr	r2, [r3, #4]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	6859      	ldr	r1, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	691b      	ldr	r3, [r3, #16]
 80011cc:	021a      	lsls	r2, r3, #8
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	430a      	orrs	r2, r1
 80011d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80011e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	6859      	ldr	r1, [r3, #4]
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689a      	ldr	r2, [r3, #8]
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6899      	ldr	r1, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	68da      	ldr	r2, [r3, #12]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	430a      	orrs	r2, r1
 8001218:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800121e:	4a58      	ldr	r2, [pc, #352]	; (8001380 <ADC_Init+0x1f4>)
 8001220:	4293      	cmp	r3, r2
 8001222:	d022      	beq.n	800126a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	689a      	ldr	r2, [r3, #8]
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001232:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	6899      	ldr	r1, [r3, #8]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	430a      	orrs	r2, r1
 8001244:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	6899      	ldr	r1, [r3, #8]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	609a      	str	r2, [r3, #8]
 8001268:	e00f      	b.n	800128a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001278:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	689a      	ldr	r2, [r3, #8]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001288:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	689a      	ldr	r2, [r3, #8]
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f022 0202 	bic.w	r2, r2, #2
 8001298:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	6899      	ldr	r1, [r3, #8]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	7e1b      	ldrb	r3, [r3, #24]
 80012a4:	005a      	lsls	r2, r3, #1
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	430a      	orrs	r2, r1
 80012ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d01b      	beq.n	80012f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80012c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	685a      	ldr	r2, [r3, #4]
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80012d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6859      	ldr	r1, [r3, #4]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012e2:	3b01      	subs	r3, #1
 80012e4:	035a      	lsls	r2, r3, #13
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	430a      	orrs	r2, r1
 80012ec:	605a      	str	r2, [r3, #4]
 80012ee:	e007      	b.n	8001300 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	685a      	ldr	r2, [r3, #4]
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80012fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800130e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	69db      	ldr	r3, [r3, #28]
 800131a:	3b01      	subs	r3, #1
 800131c:	051a      	lsls	r2, r3, #20
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	430a      	orrs	r2, r1
 8001324:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001334:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6899      	ldr	r1, [r3, #8]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001342:	025a      	lsls	r2, r3, #9
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	430a      	orrs	r2, r1
 800134a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	681b      	ldr	r3, [r3, #0]
 8001350:	689a      	ldr	r2, [r3, #8]
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800135a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	6899      	ldr	r1, [r3, #8]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	695b      	ldr	r3, [r3, #20]
 8001366:	029a      	lsls	r2, r3, #10
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
}
 8001370:	bf00      	nop
 8001372:	3714      	adds	r7, #20
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	40012300 	.word	0x40012300
 8001380:	0f000001 	.word	0x0f000001

08001384 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	f003 0307 	and.w	r3, r3, #7
 8001392:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001394:	4b0c      	ldr	r3, [pc, #48]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001396:	68db      	ldr	r3, [r3, #12]
 8001398:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800139a:	68ba      	ldr	r2, [r7, #8]
 800139c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80013a0:	4013      	ands	r3, r2
 80013a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013a8:	68bb      	ldr	r3, [r7, #8]
 80013aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80013b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80013b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013b6:	4a04      	ldr	r2, [pc, #16]	; (80013c8 <__NVIC_SetPriorityGrouping+0x44>)
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	60d3      	str	r3, [r2, #12]
}
 80013bc:	bf00      	nop
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr
 80013c8:	e000ed00 	.word	0xe000ed00

080013cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d0:	4b04      	ldr	r3, [pc, #16]	; (80013e4 <__NVIC_GetPriorityGrouping+0x18>)
 80013d2:	68db      	ldr	r3, [r3, #12]
 80013d4:	0a1b      	lsrs	r3, r3, #8
 80013d6:	f003 0307 	and.w	r3, r3, #7
}
 80013da:	4618      	mov	r0, r3
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr
 80013e4:	e000ed00 	.word	0xe000ed00

080013e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b083      	sub	sp, #12
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	db0b      	blt.n	8001412 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013fa:	79fb      	ldrb	r3, [r7, #7]
 80013fc:	f003 021f 	and.w	r2, r3, #31
 8001400:	4907      	ldr	r1, [pc, #28]	; (8001420 <__NVIC_EnableIRQ+0x38>)
 8001402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001406:	095b      	lsrs	r3, r3, #5
 8001408:	2001      	movs	r0, #1
 800140a:	fa00 f202 	lsl.w	r2, r0, r2
 800140e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001412:	bf00      	nop
 8001414:	370c      	adds	r7, #12
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	e000e100 	.word	0xe000e100

08001424 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001424:	b480      	push	{r7}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	4603      	mov	r3, r0
 800142c:	6039      	str	r1, [r7, #0]
 800142e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0a      	blt.n	800144e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	b2da      	uxtb	r2, r3
 800143c:	490c      	ldr	r1, [pc, #48]	; (8001470 <__NVIC_SetPriority+0x4c>)
 800143e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001442:	0112      	lsls	r2, r2, #4
 8001444:	b2d2      	uxtb	r2, r2
 8001446:	440b      	add	r3, r1
 8001448:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800144c:	e00a      	b.n	8001464 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	b2da      	uxtb	r2, r3
 8001452:	4908      	ldr	r1, [pc, #32]	; (8001474 <__NVIC_SetPriority+0x50>)
 8001454:	79fb      	ldrb	r3, [r7, #7]
 8001456:	f003 030f 	and.w	r3, r3, #15
 800145a:	3b04      	subs	r3, #4
 800145c:	0112      	lsls	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	440b      	add	r3, r1
 8001462:	761a      	strb	r2, [r3, #24]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr
 8001470:	e000e100 	.word	0xe000e100
 8001474:	e000ed00 	.word	0xe000ed00

08001478 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001478:	b480      	push	{r7}
 800147a:	b089      	sub	sp, #36	; 0x24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	f003 0307 	and.w	r3, r3, #7
 800148a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800148c:	69fb      	ldr	r3, [r7, #28]
 800148e:	f1c3 0307 	rsb	r3, r3, #7
 8001492:	2b04      	cmp	r3, #4
 8001494:	bf28      	it	cs
 8001496:	2304      	movcs	r3, #4
 8001498:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	3304      	adds	r3, #4
 800149e:	2b06      	cmp	r3, #6
 80014a0:	d902      	bls.n	80014a8 <NVIC_EncodePriority+0x30>
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3b03      	subs	r3, #3
 80014a6:	e000      	b.n	80014aa <NVIC_EncodePriority+0x32>
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014ac:	f04f 32ff 	mov.w	r2, #4294967295
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43da      	mvns	r2, r3
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	401a      	ands	r2, r3
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c0:	f04f 31ff 	mov.w	r1, #4294967295
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43d9      	mvns	r1, r3
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d0:	4313      	orrs	r3, r2
         );
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3724      	adds	r7, #36	; 0x24
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
	...

080014e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014f0:	d301      	bcc.n	80014f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014f2:	2301      	movs	r3, #1
 80014f4:	e00f      	b.n	8001516 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014f6:	4a0a      	ldr	r2, [pc, #40]	; (8001520 <SysTick_Config+0x40>)
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014fe:	210f      	movs	r1, #15
 8001500:	f04f 30ff 	mov.w	r0, #4294967295
 8001504:	f7ff ff8e 	bl	8001424 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001508:	4b05      	ldr	r3, [pc, #20]	; (8001520 <SysTick_Config+0x40>)
 800150a:	2200      	movs	r2, #0
 800150c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800150e:	4b04      	ldr	r3, [pc, #16]	; (8001520 <SysTick_Config+0x40>)
 8001510:	2207      	movs	r2, #7
 8001512:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001514:	2300      	movs	r3, #0
}
 8001516:	4618      	mov	r0, r3
 8001518:	3708      	adds	r7, #8
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	e000e010 	.word	0xe000e010

08001524 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800152c:	6878      	ldr	r0, [r7, #4]
 800152e:	f7ff ff29 	bl	8001384 <__NVIC_SetPriorityGrouping>
}
 8001532:	bf00      	nop
 8001534:	3708      	adds	r7, #8
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800153a:	b580      	push	{r7, lr}
 800153c:	b086      	sub	sp, #24
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	60b9      	str	r1, [r7, #8]
 8001544:	607a      	str	r2, [r7, #4]
 8001546:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001548:	2300      	movs	r3, #0
 800154a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800154c:	f7ff ff3e 	bl	80013cc <__NVIC_GetPriorityGrouping>
 8001550:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	68b9      	ldr	r1, [r7, #8]
 8001556:	6978      	ldr	r0, [r7, #20]
 8001558:	f7ff ff8e 	bl	8001478 <NVIC_EncodePriority>
 800155c:	4602      	mov	r2, r0
 800155e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001562:	4611      	mov	r1, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7ff ff5d 	bl	8001424 <__NVIC_SetPriority>
}
 800156a:	bf00      	nop
 800156c:	3718      	adds	r7, #24
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b082      	sub	sp, #8
 8001576:	af00      	add	r7, sp, #0
 8001578:	4603      	mov	r3, r0
 800157a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800157c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001580:	4618      	mov	r0, r3
 8001582:	f7ff ff31 	bl	80013e8 <__NVIC_EnableIRQ>
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}

0800158e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800158e:	b580      	push	{r7, lr}
 8001590:	b082      	sub	sp, #8
 8001592:	af00      	add	r7, sp, #0
 8001594:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001596:	6878      	ldr	r0, [r7, #4]
 8001598:	f7ff ffa2 	bl	80014e0 <SysTick_Config>
 800159c:	4603      	mov	r3, r0
}
 800159e:	4618      	mov	r0, r3
 80015a0:	3708      	adds	r7, #8
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
	...

080015a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b089      	sub	sp, #36	; 0x24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80015b6:	2300      	movs	r3, #0
 80015b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015be:	2300      	movs	r3, #0
 80015c0:	61fb      	str	r3, [r7, #28]
 80015c2:	e16b      	b.n	800189c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80015c4:	2201      	movs	r2, #1
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	fa02 f303 	lsl.w	r3, r2, r3
 80015cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	697a      	ldr	r2, [r7, #20]
 80015d4:	4013      	ands	r3, r2
 80015d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	429a      	cmp	r2, r3
 80015de:	f040 815a 	bne.w	8001896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	685b      	ldr	r3, [r3, #4]
 80015e6:	f003 0303 	and.w	r3, r3, #3
 80015ea:	2b01      	cmp	r3, #1
 80015ec:	d005      	beq.n	80015fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d130      	bne.n	800165c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	2203      	movs	r2, #3
 8001606:	fa02 f303 	lsl.w	r3, r2, r3
 800160a:	43db      	mvns	r3, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4013      	ands	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	68da      	ldr	r2, [r3, #12]
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	005b      	lsls	r3, r3, #1
 800161a:	fa02 f303 	lsl.w	r3, r2, r3
 800161e:	69ba      	ldr	r2, [r7, #24]
 8001620:	4313      	orrs	r3, r2
 8001622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	69ba      	ldr	r2, [r7, #24]
 8001628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001630:	2201      	movs	r2, #1
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	fa02 f303 	lsl.w	r3, r2, r3
 8001638:	43db      	mvns	r3, r3
 800163a:	69ba      	ldr	r2, [r7, #24]
 800163c:	4013      	ands	r3, r2
 800163e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001640:	683b      	ldr	r3, [r7, #0]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	091b      	lsrs	r3, r3, #4
 8001646:	f003 0201 	and.w	r2, r3, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	69ba      	ldr	r2, [r7, #24]
 8001652:	4313      	orrs	r3, r2
 8001654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800165c:	683b      	ldr	r3, [r7, #0]
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 0303 	and.w	r3, r3, #3
 8001664:	2b03      	cmp	r3, #3
 8001666:	d017      	beq.n	8001698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	68db      	ldr	r3, [r3, #12]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800166e:	69fb      	ldr	r3, [r7, #28]
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	2203      	movs	r2, #3
 8001674:	fa02 f303 	lsl.w	r3, r2, r3
 8001678:	43db      	mvns	r3, r3
 800167a:	69ba      	ldr	r2, [r7, #24]
 800167c:	4013      	ands	r3, r2
 800167e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	689a      	ldr	r2, [r3, #8]
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	fa02 f303 	lsl.w	r3, r2, r3
 800168c:	69ba      	ldr	r2, [r7, #24]
 800168e:	4313      	orrs	r3, r2
 8001690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	685b      	ldr	r3, [r3, #4]
 800169c:	f003 0303 	and.w	r3, r3, #3
 80016a0:	2b02      	cmp	r3, #2
 80016a2:	d123      	bne.n	80016ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	08da      	lsrs	r2, r3, #3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	3208      	adds	r2, #8
 80016ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	f003 0307 	and.w	r3, r3, #7
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	220f      	movs	r2, #15
 80016bc:	fa02 f303 	lsl.w	r3, r2, r3
 80016c0:	43db      	mvns	r3, r3
 80016c2:	69ba      	ldr	r2, [r7, #24]
 80016c4:	4013      	ands	r3, r2
 80016c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	691a      	ldr	r2, [r3, #16]
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	69ba      	ldr	r2, [r7, #24]
 80016da:	4313      	orrs	r3, r2
 80016dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	08da      	lsrs	r2, r3, #3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	3208      	adds	r2, #8
 80016e6:	69b9      	ldr	r1, [r7, #24]
 80016e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0203 	and.w	r2, r3, #3
 800170c:	69fb      	ldr	r3, [r7, #28]
 800170e:	005b      	lsls	r3, r3, #1
 8001710:	fa02 f303 	lsl.w	r3, r2, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4313      	orrs	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	69ba      	ldr	r2, [r7, #24]
 800171e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001728:	2b00      	cmp	r3, #0
 800172a:	f000 80b4 	beq.w	8001896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b60      	ldr	r3, [pc, #384]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001734:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001736:	4a5f      	ldr	r2, [pc, #380]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001738:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800173c:	6453      	str	r3, [r2, #68]	; 0x44
 800173e:	4b5d      	ldr	r3, [pc, #372]	; (80018b4 <HAL_GPIO_Init+0x30c>)
 8001740:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001742:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800174a:	4a5b      	ldr	r2, [pc, #364]	; (80018b8 <HAL_GPIO_Init+0x310>)
 800174c:	69fb      	ldr	r3, [r7, #28]
 800174e:	089b      	lsrs	r3, r3, #2
 8001750:	3302      	adds	r3, #2
 8001752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	220f      	movs	r2, #15
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43db      	mvns	r3, r3
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	4013      	ands	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4a52      	ldr	r2, [pc, #328]	; (80018bc <HAL_GPIO_Init+0x314>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d02b      	beq.n	80017ce <HAL_GPIO_Init+0x226>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	4a51      	ldr	r2, [pc, #324]	; (80018c0 <HAL_GPIO_Init+0x318>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d025      	beq.n	80017ca <HAL_GPIO_Init+0x222>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	4a50      	ldr	r2, [pc, #320]	; (80018c4 <HAL_GPIO_Init+0x31c>)
 8001782:	4293      	cmp	r3, r2
 8001784:	d01f      	beq.n	80017c6 <HAL_GPIO_Init+0x21e>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	4a4f      	ldr	r2, [pc, #316]	; (80018c8 <HAL_GPIO_Init+0x320>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d019      	beq.n	80017c2 <HAL_GPIO_Init+0x21a>
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4a4e      	ldr	r2, [pc, #312]	; (80018cc <HAL_GPIO_Init+0x324>)
 8001792:	4293      	cmp	r3, r2
 8001794:	d013      	beq.n	80017be <HAL_GPIO_Init+0x216>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	4a4d      	ldr	r2, [pc, #308]	; (80018d0 <HAL_GPIO_Init+0x328>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d00d      	beq.n	80017ba <HAL_GPIO_Init+0x212>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	4a4c      	ldr	r2, [pc, #304]	; (80018d4 <HAL_GPIO_Init+0x32c>)
 80017a2:	4293      	cmp	r3, r2
 80017a4:	d007      	beq.n	80017b6 <HAL_GPIO_Init+0x20e>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	4a4b      	ldr	r2, [pc, #300]	; (80018d8 <HAL_GPIO_Init+0x330>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d101      	bne.n	80017b2 <HAL_GPIO_Init+0x20a>
 80017ae:	2307      	movs	r3, #7
 80017b0:	e00e      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b2:	2308      	movs	r3, #8
 80017b4:	e00c      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017b6:	2306      	movs	r3, #6
 80017b8:	e00a      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ba:	2305      	movs	r3, #5
 80017bc:	e008      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017be:	2304      	movs	r3, #4
 80017c0:	e006      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c2:	2303      	movs	r3, #3
 80017c4:	e004      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017c6:	2302      	movs	r3, #2
 80017c8:	e002      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ca:	2301      	movs	r3, #1
 80017cc:	e000      	b.n	80017d0 <HAL_GPIO_Init+0x228>
 80017ce:	2300      	movs	r3, #0
 80017d0:	69fa      	ldr	r2, [r7, #28]
 80017d2:	f002 0203 	and.w	r2, r2, #3
 80017d6:	0092      	lsls	r2, r2, #2
 80017d8:	4093      	lsls	r3, r2
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4313      	orrs	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80017e0:	4935      	ldr	r1, [pc, #212]	; (80018b8 <HAL_GPIO_Init+0x310>)
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	089b      	lsrs	r3, r3, #2
 80017e6:	3302      	adds	r3, #2
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80017ee:	4b3b      	ldr	r3, [pc, #236]	; (80018dc <HAL_GPIO_Init+0x334>)
 80017f0:	689b      	ldr	r3, [r3, #8]
 80017f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	69ba      	ldr	r2, [r7, #24]
 80017fa:	4013      	ands	r3, r2
 80017fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800180a:	69ba      	ldr	r2, [r7, #24]
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001812:	4a32      	ldr	r2, [pc, #200]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001818:	4b30      	ldr	r3, [pc, #192]	; (80018dc <HAL_GPIO_Init+0x334>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001830:	2b00      	cmp	r3, #0
 8001832:	d003      	beq.n	800183c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001834:	69ba      	ldr	r2, [r7, #24]
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	4313      	orrs	r3, r2
 800183a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800183c:	4a27      	ldr	r2, [pc, #156]	; (80018dc <HAL_GPIO_Init+0x334>)
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001842:	4b26      	ldr	r3, [pc, #152]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	43db      	mvns	r3, r3
 800184c:	69ba      	ldr	r2, [r7, #24]
 800184e:	4013      	ands	r3, r2
 8001850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	693b      	ldr	r3, [r7, #16]
 8001862:	4313      	orrs	r3, r2
 8001864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001866:	4a1d      	ldr	r2, [pc, #116]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001868:	69bb      	ldr	r3, [r7, #24]
 800186a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800186c:	4b1b      	ldr	r3, [pc, #108]	; (80018dc <HAL_GPIO_Init+0x334>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	43db      	mvns	r3, r3
 8001876:	69ba      	ldr	r2, [r7, #24]
 8001878:	4013      	ands	r3, r2
 800187a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	685b      	ldr	r3, [r3, #4]
 8001880:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001884:	2b00      	cmp	r3, #0
 8001886:	d003      	beq.n	8001890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001888:	69ba      	ldr	r2, [r7, #24]
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001890:	4a12      	ldr	r2, [pc, #72]	; (80018dc <HAL_GPIO_Init+0x334>)
 8001892:	69bb      	ldr	r3, [r7, #24]
 8001894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b0f      	cmp	r3, #15
 80018a0:	f67f ae90 	bls.w	80015c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80018a4:	bf00      	nop
 80018a6:	bf00      	nop
 80018a8:	3724      	adds	r7, #36	; 0x24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40023800 	.word	0x40023800
 80018b8:	40013800 	.word	0x40013800
 80018bc:	40020000 	.word	0x40020000
 80018c0:	40020400 	.word	0x40020400
 80018c4:	40020800 	.word	0x40020800
 80018c8:	40020c00 	.word	0x40020c00
 80018cc:	40021000 	.word	0x40021000
 80018d0:	40021400 	.word	0x40021400
 80018d4:	40021800 	.word	0x40021800
 80018d8:	40021c00 	.word	0x40021c00
 80018dc:	40013c00 	.word	0x40013c00

080018e0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80018e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018e2:	b08f      	sub	sp, #60	; 0x3c
 80018e4:	af0a      	add	r7, sp, #40	; 0x28
 80018e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80018ee:	2301      	movs	r3, #1
 80018f0:	e10f      	b.n	8001b12 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	2b00      	cmp	r3, #0
 8001902:	d106      	bne.n	8001912 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	2200      	movs	r2, #0
 8001908:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800190c:	6878      	ldr	r0, [r7, #4]
 800190e:	f006 fb0b 	bl	8007f28 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2203      	movs	r2, #3
 8001916:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800191a:	68bb      	ldr	r3, [r7, #8]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001922:	2b00      	cmp	r3, #0
 8001924:	d102      	bne.n	800192c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	2200      	movs	r2, #0
 800192a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fe5e 	bl	80045f2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	687e      	ldr	r6, [r7, #4]
 800193e:	466d      	mov	r5, sp
 8001940:	f106 0410 	add.w	r4, r6, #16
 8001944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001948:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800194a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800194c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001950:	e885 0003 	stmia.w	r5, {r0, r1}
 8001954:	1d33      	adds	r3, r6, #4
 8001956:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001958:	6838      	ldr	r0, [r7, #0]
 800195a:	f002 fd35 	bl	80043c8 <USB_CoreInit>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d005      	beq.n	8001970 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2202      	movs	r2, #2
 8001968:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	e0d0      	b.n	8001b12 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	2100      	movs	r1, #0
 8001976:	4618      	mov	r0, r3
 8001978:	f002 fe4c 	bl	8004614 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800197c:	2300      	movs	r3, #0
 800197e:	73fb      	strb	r3, [r7, #15]
 8001980:	e04a      	b.n	8001a18 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001982:	7bfa      	ldrb	r2, [r7, #15]
 8001984:	6879      	ldr	r1, [r7, #4]
 8001986:	4613      	mov	r3, r2
 8001988:	00db      	lsls	r3, r3, #3
 800198a:	4413      	add	r3, r2
 800198c:	009b      	lsls	r3, r3, #2
 800198e:	440b      	add	r3, r1
 8001990:	333d      	adds	r3, #61	; 0x3d
 8001992:	2201      	movs	r2, #1
 8001994:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001996:	7bfa      	ldrb	r2, [r7, #15]
 8001998:	6879      	ldr	r1, [r7, #4]
 800199a:	4613      	mov	r3, r2
 800199c:	00db      	lsls	r3, r3, #3
 800199e:	4413      	add	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	440b      	add	r3, r1
 80019a4:	333c      	adds	r3, #60	; 0x3c
 80019a6:	7bfa      	ldrb	r2, [r7, #15]
 80019a8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80019aa:	7bfa      	ldrb	r2, [r7, #15]
 80019ac:	7bfb      	ldrb	r3, [r7, #15]
 80019ae:	b298      	uxth	r0, r3
 80019b0:	6879      	ldr	r1, [r7, #4]
 80019b2:	4613      	mov	r3, r2
 80019b4:	00db      	lsls	r3, r3, #3
 80019b6:	4413      	add	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	440b      	add	r3, r1
 80019bc:	3344      	adds	r3, #68	; 0x44
 80019be:	4602      	mov	r2, r0
 80019c0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80019c2:	7bfa      	ldrb	r2, [r7, #15]
 80019c4:	6879      	ldr	r1, [r7, #4]
 80019c6:	4613      	mov	r3, r2
 80019c8:	00db      	lsls	r3, r3, #3
 80019ca:	4413      	add	r3, r2
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	440b      	add	r3, r1
 80019d0:	3340      	adds	r3, #64	; 0x40
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80019d6:	7bfa      	ldrb	r2, [r7, #15]
 80019d8:	6879      	ldr	r1, [r7, #4]
 80019da:	4613      	mov	r3, r2
 80019dc:	00db      	lsls	r3, r3, #3
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	440b      	add	r3, r1
 80019e4:	3348      	adds	r3, #72	; 0x48
 80019e6:	2200      	movs	r2, #0
 80019e8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80019ea:	7bfa      	ldrb	r2, [r7, #15]
 80019ec:	6879      	ldr	r1, [r7, #4]
 80019ee:	4613      	mov	r3, r2
 80019f0:	00db      	lsls	r3, r3, #3
 80019f2:	4413      	add	r3, r2
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	440b      	add	r3, r1
 80019f8:	334c      	adds	r3, #76	; 0x4c
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80019fe:	7bfa      	ldrb	r2, [r7, #15]
 8001a00:	6879      	ldr	r1, [r7, #4]
 8001a02:	4613      	mov	r3, r2
 8001a04:	00db      	lsls	r3, r3, #3
 8001a06:	4413      	add	r3, r2
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	440b      	add	r3, r1
 8001a0c:	3354      	adds	r3, #84	; 0x54
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a12:	7bfb      	ldrb	r3, [r7, #15]
 8001a14:	3301      	adds	r3, #1
 8001a16:	73fb      	strb	r3, [r7, #15]
 8001a18:	7bfa      	ldrb	r2, [r7, #15]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	429a      	cmp	r2, r3
 8001a20:	d3af      	bcc.n	8001982 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001a22:	2300      	movs	r3, #0
 8001a24:	73fb      	strb	r3, [r7, #15]
 8001a26:	e044      	b.n	8001ab2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001a28:	7bfa      	ldrb	r2, [r7, #15]
 8001a2a:	6879      	ldr	r1, [r7, #4]
 8001a2c:	4613      	mov	r3, r2
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	4413      	add	r3, r2
 8001a32:	009b      	lsls	r3, r3, #2
 8001a34:	440b      	add	r3, r1
 8001a36:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001a3e:	7bfa      	ldrb	r2, [r7, #15]
 8001a40:	6879      	ldr	r1, [r7, #4]
 8001a42:	4613      	mov	r3, r2
 8001a44:	00db      	lsls	r3, r3, #3
 8001a46:	4413      	add	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	440b      	add	r3, r1
 8001a4c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001a50:	7bfa      	ldrb	r2, [r7, #15]
 8001a52:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001a54:	7bfa      	ldrb	r2, [r7, #15]
 8001a56:	6879      	ldr	r1, [r7, #4]
 8001a58:	4613      	mov	r3, r2
 8001a5a:	00db      	lsls	r3, r3, #3
 8001a5c:	4413      	add	r3, r2
 8001a5e:	009b      	lsls	r3, r3, #2
 8001a60:	440b      	add	r3, r1
 8001a62:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001a66:	2200      	movs	r2, #0
 8001a68:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001a6a:	7bfa      	ldrb	r2, [r7, #15]
 8001a6c:	6879      	ldr	r1, [r7, #4]
 8001a6e:	4613      	mov	r3, r2
 8001a70:	00db      	lsls	r3, r3, #3
 8001a72:	4413      	add	r3, r2
 8001a74:	009b      	lsls	r3, r3, #2
 8001a76:	440b      	add	r3, r1
 8001a78:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001a80:	7bfa      	ldrb	r2, [r7, #15]
 8001a82:	6879      	ldr	r1, [r7, #4]
 8001a84:	4613      	mov	r3, r2
 8001a86:	00db      	lsls	r3, r3, #3
 8001a88:	4413      	add	r3, r2
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001a96:	7bfa      	ldrb	r2, [r7, #15]
 8001a98:	6879      	ldr	r1, [r7, #4]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	4413      	add	r3, r2
 8001aa0:	009b      	lsls	r3, r3, #2
 8001aa2:	440b      	add	r3, r1
 8001aa4:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001aac:	7bfb      	ldrb	r3, [r7, #15]
 8001aae:	3301      	adds	r3, #1
 8001ab0:	73fb      	strb	r3, [r7, #15]
 8001ab2:	7bfa      	ldrb	r2, [r7, #15]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d3b5      	bcc.n	8001a28 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	603b      	str	r3, [r7, #0]
 8001ac2:	687e      	ldr	r6, [r7, #4]
 8001ac4:	466d      	mov	r5, sp
 8001ac6:	f106 0410 	add.w	r4, r6, #16
 8001aca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001acc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ace:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ad0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ad2:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ad6:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ada:	1d33      	adds	r3, r6, #4
 8001adc:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ade:	6838      	ldr	r0, [r7, #0]
 8001ae0:	f002 fde4 	bl	80046ac <USB_DevInit>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d005      	beq.n	8001af6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	2202      	movs	r2, #2
 8001aee:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001af2:	2301      	movs	r3, #1
 8001af4:	e00d      	b.n	8001b12 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2201      	movs	r2, #1
 8001b02:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f003 ff33 	bl	8005976 <USB_DevDisconnect>

  return HAL_OK;
 8001b10:	2300      	movs	r3, #0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3714      	adds	r7, #20
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001b1a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	b084      	sub	sp, #16
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001b2e:	2b01      	cmp	r3, #1
 8001b30:	d101      	bne.n	8001b36 <HAL_PCD_Start+0x1c>
 8001b32:	2302      	movs	r3, #2
 8001b34:	e020      	b.n	8001b78 <HAL_PCD_Start+0x5e>
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2201      	movs	r2, #1
 8001b3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d109      	bne.n	8001b5a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d005      	beq.n	8001b5a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b52:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f002 fd36 	bl	80045d0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4618      	mov	r0, r3
 8001b6a:	f003 fee3 	bl	8005934 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001b76:	2300      	movs	r3, #0
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	3710      	adds	r7, #16
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}

08001b80 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001b80:	b590      	push	{r4, r7, lr}
 8001b82:	b08d      	sub	sp, #52	; 0x34
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001b8e:	6a3b      	ldr	r3, [r7, #32]
 8001b90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f003 ffa1 	bl	8005ade <USB_GetMode>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f040 848a 	bne.w	80024b8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f003 ff05 	bl	80059b8 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	f000 8480 	beq.w	80024b6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001bb6:	69fb      	ldr	r3, [r7, #28]
 8001bb8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	0a1b      	lsrs	r3, r3, #8
 8001bc0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f003 fef2 	bl	80059b8 <USB_ReadInterrupts>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d107      	bne.n	8001bee <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f002 0202 	and.w	r2, r2, #2
 8001bec:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f003 fee0 	bl	80059b8 <USB_ReadInterrupts>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	f003 0310 	and.w	r3, r3, #16
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d161      	bne.n	8001cc6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	699a      	ldr	r2, [r3, #24]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0210 	bic.w	r2, r2, #16
 8001c10:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	6a1b      	ldr	r3, [r3, #32]
 8001c16:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	f003 020f 	and.w	r2, r3, #15
 8001c1e:	4613      	mov	r3, r2
 8001c20:	00db      	lsls	r3, r3, #3
 8001c22:	4413      	add	r3, r2
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	4413      	add	r3, r2
 8001c2e:	3304      	adds	r3, #4
 8001c30:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001c32:	69bb      	ldr	r3, [r7, #24]
 8001c34:	0c5b      	lsrs	r3, r3, #17
 8001c36:	f003 030f 	and.w	r3, r3, #15
 8001c3a:	2b02      	cmp	r3, #2
 8001c3c:	d124      	bne.n	8001c88 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001c44:	4013      	ands	r3, r2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d035      	beq.n	8001cb6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	091b      	lsrs	r3, r3, #4
 8001c52:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001c54:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c58:	b29b      	uxth	r3, r3
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	6a38      	ldr	r0, [r7, #32]
 8001c5e:	f003 fd17 	bl	8005690 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	691a      	ldr	r2, [r3, #16]
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	091b      	lsrs	r3, r3, #4
 8001c6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c6e:	441a      	add	r2, r3
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	6a1a      	ldr	r2, [r3, #32]
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001c80:	441a      	add	r2, r3
 8001c82:	697b      	ldr	r3, [r7, #20]
 8001c84:	621a      	str	r2, [r3, #32]
 8001c86:	e016      	b.n	8001cb6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	0c5b      	lsrs	r3, r3, #17
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	2b06      	cmp	r3, #6
 8001c92:	d110      	bne.n	8001cb6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001c9a:	2208      	movs	r2, #8
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	6a38      	ldr	r0, [r7, #32]
 8001ca0:	f003 fcf6 	bl	8005690 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ca4:	697b      	ldr	r3, [r7, #20]
 8001ca6:	6a1a      	ldr	r2, [r3, #32]
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	091b      	lsrs	r3, r3, #4
 8001cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001cb0:	441a      	add	r2, r3
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	699a      	ldr	r2, [r3, #24]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f042 0210 	orr.w	r2, r2, #16
 8001cc4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f003 fe74 	bl	80059b8 <USB_ReadInterrupts>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001cd6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001cda:	f040 80a7 	bne.w	8001e2c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 fe79 	bl	80059de <USB_ReadDevAllOutEpInterrupt>
 8001cec:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001cee:	e099      	b.n	8001e24 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cf2:	f003 0301 	and.w	r3, r3, #1
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	f000 808e 	beq.w	8001e18 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d02:	b2d2      	uxtb	r2, r2
 8001d04:	4611      	mov	r1, r2
 8001d06:	4618      	mov	r0, r3
 8001d08:	f003 fe9d 	bl	8005a46 <USB_ReadDevOutEPInterrupt>
 8001d0c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d00c      	beq.n	8001d32 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1a:	015a      	lsls	r2, r3, #5
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	4413      	add	r3, r2
 8001d20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d24:	461a      	mov	r2, r3
 8001d26:	2301      	movs	r3, #1
 8001d28:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001d2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f000 fec3 	bl	8002ab8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	f003 0308 	and.w	r3, r3, #8
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d00c      	beq.n	8001d56 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d3e:	015a      	lsls	r2, r3, #5
 8001d40:	69fb      	ldr	r3, [r7, #28]
 8001d42:	4413      	add	r3, r2
 8001d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d48:	461a      	mov	r2, r3
 8001d4a:	2308      	movs	r3, #8
 8001d4c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001d4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d50:	6878      	ldr	r0, [r7, #4]
 8001d52:	f000 ff99 	bl	8002c88 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	f003 0310 	and.w	r3, r3, #16
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d008      	beq.n	8001d72 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d62:	015a      	lsls	r2, r3, #5
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	4413      	add	r3, r2
 8001d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	2310      	movs	r3, #16
 8001d70:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	f003 0302 	and.w	r3, r3, #2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d030      	beq.n	8001dde <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001d7c:	6a3b      	ldr	r3, [r7, #32]
 8001d7e:	695b      	ldr	r3, [r3, #20]
 8001d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d84:	2b80      	cmp	r3, #128	; 0x80
 8001d86:	d109      	bne.n	8001d9c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001d88:	69fb      	ldr	r3, [r7, #28]
 8001d8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	69fa      	ldr	r2, [r7, #28]
 8001d92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001d96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d9a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	3304      	adds	r3, #4
 8001db0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	78db      	ldrb	r3, [r3, #3]
 8001db6:	2b01      	cmp	r3, #1
 8001db8:	d108      	bne.n	8001dcc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	6878      	ldr	r0, [r7, #4]
 8001dc8:	f006 f9c2 	bl	8008150 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dce:	015a      	lsls	r2, r3, #5
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	4413      	add	r3, r2
 8001dd4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001dd8:	461a      	mov	r2, r3
 8001dda:	2302      	movs	r3, #2
 8001ddc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	f003 0320 	and.w	r3, r3, #32
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d008      	beq.n	8001dfa <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dea:	015a      	lsls	r2, r3, #5
 8001dec:	69fb      	ldr	r3, [r7, #28]
 8001dee:	4413      	add	r3, r2
 8001df0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001df4:	461a      	mov	r2, r3
 8001df6:	2320      	movs	r3, #32
 8001df8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d009      	beq.n	8001e18 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e06:	015a      	lsls	r2, r3, #5
 8001e08:	69fb      	ldr	r3, [r7, #28]
 8001e0a:	4413      	add	r3, r2
 8001e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001e10:	461a      	mov	r2, r3
 8001e12:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e16:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001e18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1a:	3301      	adds	r3, #1
 8001e1c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001e1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e20:	085b      	lsrs	r3, r3, #1
 8001e22:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001e24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	f47f af62 	bne.w	8001cf0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f003 fdc1 	bl	80059b8 <USB_ReadInterrupts>
 8001e36:	4603      	mov	r3, r0
 8001e38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e3c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001e40:	f040 80db 	bne.w	8001ffa <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f003 fde2 	bl	8005a12 <USB_ReadDevAllInEpInterrupt>
 8001e4e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001e54:	e0cd      	b.n	8001ff2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001e56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e58:	f003 0301 	and.w	r3, r3, #1
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	f000 80c2 	beq.w	8001fe6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e68:	b2d2      	uxtb	r2, r2
 8001e6a:	4611      	mov	r1, r2
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	f003 fe08 	bl	8005a82 <USB_ReadDevInEPInterrupt>
 8001e72:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	f003 0301 	and.w	r3, r3, #1
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d057      	beq.n	8001f2e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	2201      	movs	r2, #1
 8001e86:	fa02 f303 	lsl.w	r3, r2, r3
 8001e8a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e92:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	43db      	mvns	r3, r3
 8001e98:	69f9      	ldr	r1, [r7, #28]
 8001e9a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea4:	015a      	lsls	r2, r3, #5
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	4413      	add	r3, r2
 8001eaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eae:	461a      	mov	r2, r3
 8001eb0:	2301      	movs	r3, #1
 8001eb2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d132      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	00db      	lsls	r3, r3, #3
 8001ec4:	4413      	add	r3, r2
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	440b      	add	r3, r1
 8001eca:	334c      	adds	r3, #76	; 0x4c
 8001ecc:	6819      	ldr	r1, [r3, #0]
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ed2:	4613      	mov	r3, r2
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	009b      	lsls	r3, r3, #2
 8001eda:	4403      	add	r3, r0
 8001edc:	3348      	adds	r3, #72	; 0x48
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4419      	add	r1, r3
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ee6:	4613      	mov	r3, r2
 8001ee8:	00db      	lsls	r3, r3, #3
 8001eea:	4413      	add	r3, r2
 8001eec:	009b      	lsls	r3, r3, #2
 8001eee:	4403      	add	r3, r0
 8001ef0:	334c      	adds	r3, #76	; 0x4c
 8001ef2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d113      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x3a2>
 8001efa:	6879      	ldr	r1, [r7, #4]
 8001efc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001efe:	4613      	mov	r3, r2
 8001f00:	00db      	lsls	r3, r3, #3
 8001f02:	4413      	add	r3, r2
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	440b      	add	r3, r1
 8001f08:	3354      	adds	r3, #84	; 0x54
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d108      	bne.n	8001f22 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6818      	ldr	r0, [r3, #0]
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	2101      	movs	r1, #1
 8001f1e:	f003 fe0f 	bl	8005b40 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	4619      	mov	r1, r3
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f006 f88c 	bl	8008046 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3a:	015a      	lsls	r2, r3, #5
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	4413      	add	r3, r2
 8001f40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f44:	461a      	mov	r2, r3
 8001f46:	2308      	movs	r3, #8
 8001f48:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	f003 0310 	and.w	r3, r3, #16
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d008      	beq.n	8001f66 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f56:	015a      	lsls	r2, r3, #5
 8001f58:	69fb      	ldr	r3, [r7, #28]
 8001f5a:	4413      	add	r3, r2
 8001f5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f60:	461a      	mov	r2, r3
 8001f62:	2310      	movs	r3, #16
 8001f64:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d008      	beq.n	8001f82 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f72:	015a      	lsls	r2, r3, #5
 8001f74:	69fb      	ldr	r3, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001f7c:	461a      	mov	r2, r3
 8001f7e:	2340      	movs	r3, #64	; 0x40
 8001f80:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001f82:	693b      	ldr	r3, [r7, #16]
 8001f84:	f003 0302 	and.w	r3, r3, #2
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d023      	beq.n	8001fd4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8e:	6a38      	ldr	r0, [r7, #32]
 8001f90:	f002 fcf0 	bl	8004974 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001f94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f96:	4613      	mov	r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	4413      	add	r3, r2
 8001f9c:	009b      	lsls	r3, r3, #2
 8001f9e:	3338      	adds	r3, #56	; 0x38
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	4413      	add	r3, r2
 8001fa4:	3304      	adds	r3, #4
 8001fa6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	78db      	ldrb	r3, [r3, #3]
 8001fac:	2b01      	cmp	r3, #1
 8001fae:	d108      	bne.n	8001fc2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001fb0:	697b      	ldr	r3, [r7, #20]
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f006 f8d9 	bl	8008174 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fce:	461a      	mov	r2, r3
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001fde:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fe0:	6878      	ldr	r0, [r7, #4]
 8001fe2:	f000 fcdb 	bl	800299c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001fe6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fe8:	3301      	adds	r3, #1
 8001fea:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001fec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fee:	085b      	lsrs	r3, r3, #1
 8001ff0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	f47f af2e 	bne.w	8001e56 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f003 fcda 	bl	80059b8 <USB_ReadInterrupts>
 8002004:	4603      	mov	r3, r0
 8002006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800200a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800200e:	d122      	bne.n	8002056 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	69fa      	ldr	r2, [r7, #28]
 800201a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800201e:	f023 0301 	bic.w	r3, r3, #1
 8002022:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800202a:	2b01      	cmp	r3, #1
 800202c:	d108      	bne.n	8002040 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002036:	2100      	movs	r1, #0
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f000 fec3 	bl	8002dc4 <HAL_PCDEx_LPM_Callback>
 800203e:	e002      	b.n	8002046 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f006 f877 	bl	8008134 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	695a      	ldr	r2, [r3, #20]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002054:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4618      	mov	r0, r3
 800205c:	f003 fcac 	bl	80059b8 <USB_ReadInterrupts>
 8002060:	4603      	mov	r3, r0
 8002062:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800206a:	d112      	bne.n	8002092 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002072:	689b      	ldr	r3, [r3, #8]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b01      	cmp	r3, #1
 800207a:	d102      	bne.n	8002082 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f006 f833 	bl	80080e8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	695a      	ldr	r2, [r3, #20]
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002090:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4618      	mov	r0, r3
 8002098:	f003 fc8e 	bl	80059b8 <USB_ReadInterrupts>
 800209c:	4603      	mov	r3, r0
 800209e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020a6:	f040 80b7 	bne.w	8002218 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	69fa      	ldr	r2, [r7, #28]
 80020b4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b8:	f023 0301 	bic.w	r3, r3, #1
 80020bc:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	2110      	movs	r1, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f002 fc55 	bl	8004974 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020ca:	2300      	movs	r3, #0
 80020cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020ce:	e046      	b.n	800215e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80020d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020d2:	015a      	lsls	r2, r3, #5
 80020d4:	69fb      	ldr	r3, [r7, #28]
 80020d6:	4413      	add	r3, r2
 80020d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020dc:	461a      	mov	r2, r3
 80020de:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80020e2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80020e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020e6:	015a      	lsls	r2, r3, #5
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	4413      	add	r3, r2
 80020ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80020f4:	0151      	lsls	r1, r2, #5
 80020f6:	69fa      	ldr	r2, [r7, #28]
 80020f8:	440a      	add	r2, r1
 80020fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80020fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002102:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002106:	015a      	lsls	r2, r3, #5
 8002108:	69fb      	ldr	r3, [r7, #28]
 800210a:	4413      	add	r3, r2
 800210c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002110:	461a      	mov	r2, r3
 8002112:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002116:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800211a:	015a      	lsls	r2, r3, #5
 800211c:	69fb      	ldr	r3, [r7, #28]
 800211e:	4413      	add	r3, r2
 8002120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002128:	0151      	lsls	r1, r2, #5
 800212a:	69fa      	ldr	r2, [r7, #28]
 800212c:	440a      	add	r2, r1
 800212e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002132:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002136:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800213a:	015a      	lsls	r2, r3, #5
 800213c:	69fb      	ldr	r3, [r7, #28]
 800213e:	4413      	add	r3, r2
 8002140:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002148:	0151      	lsls	r1, r2, #5
 800214a:	69fa      	ldr	r2, [r7, #28]
 800214c:	440a      	add	r2, r1
 800214e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002152:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002156:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002158:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800215a:	3301      	adds	r3, #1
 800215c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002164:	429a      	cmp	r2, r3
 8002166:	d3b3      	bcc.n	80020d0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	69fa      	ldr	r2, [r7, #28]
 8002172:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002176:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800217a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002180:	2b00      	cmp	r3, #0
 8002182:	d016      	beq.n	80021b2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002184:	69fb      	ldr	r3, [r7, #28]
 8002186:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800218a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800218e:	69fa      	ldr	r2, [r7, #28]
 8002190:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002194:	f043 030b 	orr.w	r3, r3, #11
 8002198:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a4:	69fa      	ldr	r2, [r7, #28]
 80021a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021aa:	f043 030b 	orr.w	r3, r3, #11
 80021ae:	6453      	str	r3, [r2, #68]	; 0x44
 80021b0:	e015      	b.n	80021de <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021b8:	695b      	ldr	r3, [r3, #20]
 80021ba:	69fa      	ldr	r2, [r7, #28]
 80021bc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021c0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80021c4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80021c8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	69fa      	ldr	r2, [r7, #28]
 80021d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021d8:	f043 030b 	orr.w	r3, r3, #11
 80021dc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80021de:	69fb      	ldr	r3, [r7, #28]
 80021e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	69fa      	ldr	r2, [r7, #28]
 80021e8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80021ec:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80021f0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	691b      	ldr	r3, [r3, #16]
 80021fa:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002202:	461a      	mov	r2, r3
 8002204:	f003 fc9c 	bl	8005b40 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	695a      	ldr	r2, [r3, #20]
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002216:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4618      	mov	r0, r3
 800221e:	f003 fbcb 	bl	80059b8 <USB_ReadInterrupts>
 8002222:	4603      	mov	r3, r0
 8002224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002228:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800222c:	d124      	bne.n	8002278 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	4618      	mov	r0, r3
 8002234:	f003 fc61 	bl	8005afa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f002 fc16 	bl	8004a6e <USB_GetDevSpeed>
 8002242:	4603      	mov	r3, r0
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681c      	ldr	r4, [r3, #0]
 800224e:	f001 fa29 	bl	80036a4 <HAL_RCC_GetHCLKFreq>
 8002252:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002258:	b2db      	uxtb	r3, r3
 800225a:	461a      	mov	r2, r3
 800225c:	4620      	mov	r0, r4
 800225e:	f002 f915 	bl	800448c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002262:	6878      	ldr	r0, [r7, #4]
 8002264:	f005 ff17 	bl	8008096 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	695a      	ldr	r2, [r3, #20]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002276:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4618      	mov	r0, r3
 800227e:	f003 fb9b 	bl	80059b8 <USB_ReadInterrupts>
 8002282:	4603      	mov	r3, r0
 8002284:	f003 0308 	and.w	r3, r3, #8
 8002288:	2b08      	cmp	r3, #8
 800228a:	d10a      	bne.n	80022a2 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800228c:	6878      	ldr	r0, [r7, #4]
 800228e:	f005 fef4 	bl	800807a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	695a      	ldr	r2, [r3, #20]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f002 0208 	and.w	r2, r2, #8
 80022a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f003 fb86 	bl	80059b8 <USB_ReadInterrupts>
 80022ac:	4603      	mov	r3, r0
 80022ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022b2:	2b80      	cmp	r3, #128	; 0x80
 80022b4:	d122      	bne.n	80022fc <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	699b      	ldr	r3, [r3, #24]
 80022ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80022be:	6a3b      	ldr	r3, [r7, #32]
 80022c0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022c2:	2301      	movs	r3, #1
 80022c4:	627b      	str	r3, [r7, #36]	; 0x24
 80022c6:	e014      	b.n	80022f2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022cc:	4613      	mov	r3, r2
 80022ce:	00db      	lsls	r3, r3, #3
 80022d0:	4413      	add	r3, r2
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	440b      	add	r3, r1
 80022d6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d105      	bne.n	80022ec <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80022e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022e2:	b2db      	uxtb	r3, r3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f000 fb27 	bl	800293a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80022ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ee:	3301      	adds	r3, #1
 80022f0:	627b      	str	r3, [r7, #36]	; 0x24
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3e5      	bcc.n	80022c8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 fb59 	bl	80059b8 <USB_ReadInterrupts>
 8002306:	4603      	mov	r3, r0
 8002308:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800230c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002310:	d13b      	bne.n	800238a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002312:	2301      	movs	r3, #1
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
 8002316:	e02b      	b.n	8002370 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800231a:	015a      	lsls	r2, r3, #5
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	4413      	add	r3, r2
 8002320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002328:	6879      	ldr	r1, [r7, #4]
 800232a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800232c:	4613      	mov	r3, r2
 800232e:	00db      	lsls	r3, r3, #3
 8002330:	4413      	add	r3, r2
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	440b      	add	r3, r1
 8002336:	3340      	adds	r3, #64	; 0x40
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d115      	bne.n	800236a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800233e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002340:	2b00      	cmp	r3, #0
 8002342:	da12      	bge.n	800236a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002344:	6879      	ldr	r1, [r7, #4]
 8002346:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002348:	4613      	mov	r3, r2
 800234a:	00db      	lsls	r3, r3, #3
 800234c:	4413      	add	r3, r2
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	440b      	add	r3, r1
 8002352:	333f      	adds	r3, #63	; 0x3f
 8002354:	2201      	movs	r2, #1
 8002356:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235a:	b2db      	uxtb	r3, r3
 800235c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002360:	b2db      	uxtb	r3, r3
 8002362:	4619      	mov	r1, r3
 8002364:	6878      	ldr	r0, [r7, #4]
 8002366:	f000 fae8 	bl	800293a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800236a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800236c:	3301      	adds	r3, #1
 800236e:	627b      	str	r3, [r7, #36]	; 0x24
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002376:	429a      	cmp	r2, r3
 8002378:	d3ce      	bcc.n	8002318 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	695a      	ldr	r2, [r3, #20]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002388:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4618      	mov	r0, r3
 8002390:	f003 fb12 	bl	80059b8 <USB_ReadInterrupts>
 8002394:	4603      	mov	r3, r0
 8002396:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800239a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800239e:	d155      	bne.n	800244c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80023a0:	2301      	movs	r3, #1
 80023a2:	627b      	str	r3, [r7, #36]	; 0x24
 80023a4:	e045      	b.n	8002432 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80023a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023a8:	015a      	lsls	r2, r3, #5
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023b6:	6879      	ldr	r1, [r7, #4]
 80023b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ba:	4613      	mov	r3, r2
 80023bc:	00db      	lsls	r3, r3, #3
 80023be:	4413      	add	r3, r2
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	440b      	add	r3, r1
 80023c4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d12e      	bne.n	800242c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023ce:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	da2b      	bge.n	800242c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80023e0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80023e4:	429a      	cmp	r2, r3
 80023e6:	d121      	bne.n	800242c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80023e8:	6879      	ldr	r1, [r7, #4]
 80023ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80023ec:	4613      	mov	r3, r2
 80023ee:	00db      	lsls	r3, r3, #3
 80023f0:	4413      	add	r3, r2
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	440b      	add	r3, r1
 80023f6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	699b      	ldr	r3, [r3, #24]
 8002402:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002406:	6a3b      	ldr	r3, [r7, #32]
 8002408:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800240a:	6a3b      	ldr	r3, [r7, #32]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002412:	2b00      	cmp	r3, #0
 8002414:	d10a      	bne.n	800242c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002416:	69fb      	ldr	r3, [r7, #28]
 8002418:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	69fa      	ldr	r2, [r7, #28]
 8002420:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002424:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002428:	6053      	str	r3, [r2, #4]
            break;
 800242a:	e007      	b.n	800243c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800242c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800242e:	3301      	adds	r3, #1
 8002430:	627b      	str	r3, [r7, #36]	; 0x24
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002438:	429a      	cmp	r2, r3
 800243a:	d3b4      	bcc.n	80023a6 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	695a      	ldr	r2, [r3, #20]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800244a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	4618      	mov	r0, r3
 8002452:	f003 fab1 	bl	80059b8 <USB_ReadInterrupts>
 8002456:	4603      	mov	r3, r0
 8002458:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800245c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002460:	d10a      	bne.n	8002478 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f005 fe98 	bl	8008198 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	695a      	ldr	r2, [r3, #20]
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002476:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4618      	mov	r0, r3
 800247e:	f003 fa9b 	bl	80059b8 <USB_ReadInterrupts>
 8002482:	4603      	mov	r3, r0
 8002484:	f003 0304 	and.w	r3, r3, #4
 8002488:	2b04      	cmp	r3, #4
 800248a:	d115      	bne.n	80024b8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002494:	69bb      	ldr	r3, [r7, #24]
 8002496:	f003 0304 	and.w	r3, r3, #4
 800249a:	2b00      	cmp	r3, #0
 800249c:	d002      	beq.n	80024a4 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800249e:	6878      	ldr	r0, [r7, #4]
 80024a0:	f005 fe88 	bl	80081b4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	6859      	ldr	r1, [r3, #4]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	430a      	orrs	r2, r1
 80024b2:	605a      	str	r2, [r3, #4]
 80024b4:	e000      	b.n	80024b8 <HAL_PCD_IRQHandler+0x938>
      return;
 80024b6:	bf00      	nop
    }
  }
}
 80024b8:	3734      	adds	r7, #52	; 0x34
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd90      	pop	{r4, r7, pc}

080024be <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80024be:	b580      	push	{r7, lr}
 80024c0:	b082      	sub	sp, #8
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	460b      	mov	r3, r1
 80024c8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80024d0:	2b01      	cmp	r3, #1
 80024d2:	d101      	bne.n	80024d8 <HAL_PCD_SetAddress+0x1a>
 80024d4:	2302      	movs	r3, #2
 80024d6:	e013      	b.n	8002500 <HAL_PCD_SetAddress+0x42>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2201      	movs	r2, #1
 80024dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	78fa      	ldrb	r2, [r7, #3]
 80024e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	78fa      	ldrb	r2, [r7, #3]
 80024ee:	4611      	mov	r1, r2
 80024f0:	4618      	mov	r0, r3
 80024f2:	f003 f9f9 	bl	80058e8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2200      	movs	r2, #0
 80024fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}

08002508 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b084      	sub	sp, #16
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	4608      	mov	r0, r1
 8002512:	4611      	mov	r1, r2
 8002514:	461a      	mov	r2, r3
 8002516:	4603      	mov	r3, r0
 8002518:	70fb      	strb	r3, [r7, #3]
 800251a:	460b      	mov	r3, r1
 800251c:	803b      	strh	r3, [r7, #0]
 800251e:	4613      	mov	r3, r2
 8002520:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002522:	2300      	movs	r3, #0
 8002524:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002526:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800252a:	2b00      	cmp	r3, #0
 800252c:	da0f      	bge.n	800254e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800252e:	78fb      	ldrb	r3, [r7, #3]
 8002530:	f003 020f 	and.w	r2, r3, #15
 8002534:	4613      	mov	r3, r2
 8002536:	00db      	lsls	r3, r3, #3
 8002538:	4413      	add	r3, r2
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	3338      	adds	r3, #56	; 0x38
 800253e:	687a      	ldr	r2, [r7, #4]
 8002540:	4413      	add	r3, r2
 8002542:	3304      	adds	r3, #4
 8002544:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	2201      	movs	r2, #1
 800254a:	705a      	strb	r2, [r3, #1]
 800254c:	e00f      	b.n	800256e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800254e:	78fb      	ldrb	r3, [r7, #3]
 8002550:	f003 020f 	and.w	r2, r3, #15
 8002554:	4613      	mov	r3, r2
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4413      	add	r3, r2
 800255a:	009b      	lsls	r3, r3, #2
 800255c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002560:	687a      	ldr	r2, [r7, #4]
 8002562:	4413      	add	r3, r2
 8002564:	3304      	adds	r3, #4
 8002566:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	2200      	movs	r2, #0
 800256c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800256e:	78fb      	ldrb	r3, [r7, #3]
 8002570:	f003 030f 	and.w	r3, r3, #15
 8002574:	b2da      	uxtb	r2, r3
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800257a:	883a      	ldrh	r2, [r7, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002580:	68fb      	ldr	r3, [r7, #12]
 8002582:	78ba      	ldrb	r2, [r7, #2]
 8002584:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	785b      	ldrb	r3, [r3, #1]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d004      	beq.n	8002598 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	781b      	ldrb	r3, [r3, #0]
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002598:	78bb      	ldrb	r3, [r7, #2]
 800259a:	2b02      	cmp	r3, #2
 800259c:	d102      	bne.n	80025a4 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2200      	movs	r2, #0
 80025a2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80025aa:	2b01      	cmp	r3, #1
 80025ac:	d101      	bne.n	80025b2 <HAL_PCD_EP_Open+0xaa>
 80025ae:	2302      	movs	r3, #2
 80025b0:	e00e      	b.n	80025d0 <HAL_PCD_EP_Open+0xc8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2201      	movs	r2, #1
 80025b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68f9      	ldr	r1, [r7, #12]
 80025c0:	4618      	mov	r0, r3
 80025c2:	f002 fa79 	bl	8004ab8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80025ce:	7afb      	ldrb	r3, [r7, #11]
}
 80025d0:	4618      	mov	r0, r3
 80025d2:	3710      	adds	r7, #16
 80025d4:	46bd      	mov	sp, r7
 80025d6:	bd80      	pop	{r7, pc}

080025d8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80025e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	da0f      	bge.n	800260c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ec:	78fb      	ldrb	r3, [r7, #3]
 80025ee:	f003 020f 	and.w	r2, r3, #15
 80025f2:	4613      	mov	r3, r2
 80025f4:	00db      	lsls	r3, r3, #3
 80025f6:	4413      	add	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	3338      	adds	r3, #56	; 0x38
 80025fc:	687a      	ldr	r2, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	3304      	adds	r3, #4
 8002602:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	2201      	movs	r2, #1
 8002608:	705a      	strb	r2, [r3, #1]
 800260a:	e00f      	b.n	800262c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800260c:	78fb      	ldrb	r3, [r7, #3]
 800260e:	f003 020f 	and.w	r2, r3, #15
 8002612:	4613      	mov	r3, r2
 8002614:	00db      	lsls	r3, r3, #3
 8002616:	4413      	add	r3, r2
 8002618:	009b      	lsls	r3, r3, #2
 800261a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	4413      	add	r3, r2
 8002622:	3304      	adds	r3, #4
 8002624:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800262c:	78fb      	ldrb	r3, [r7, #3]
 800262e:	f003 030f 	and.w	r3, r3, #15
 8002632:	b2da      	uxtb	r2, r3
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800263e:	2b01      	cmp	r3, #1
 8002640:	d101      	bne.n	8002646 <HAL_PCD_EP_Close+0x6e>
 8002642:	2302      	movs	r3, #2
 8002644:	e00e      	b.n	8002664 <HAL_PCD_EP_Close+0x8c>
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	68f9      	ldr	r1, [r7, #12]
 8002654:	4618      	mov	r0, r3
 8002656:	f002 fab7 	bl	8004bc8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b086      	sub	sp, #24
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	460b      	mov	r3, r1
 800267a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800267c:	7afb      	ldrb	r3, [r7, #11]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	4613      	mov	r3, r2
 8002684:	00db      	lsls	r3, r3, #3
 8002686:	4413      	add	r3, r2
 8002688:	009b      	lsls	r3, r3, #2
 800268a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800268e:	68fa      	ldr	r2, [r7, #12]
 8002690:	4413      	add	r3, r2
 8002692:	3304      	adds	r3, #4
 8002694:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	687a      	ldr	r2, [r7, #4]
 800269a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80026a2:	697b      	ldr	r3, [r7, #20]
 80026a4:	2200      	movs	r2, #0
 80026a6:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	2200      	movs	r2, #0
 80026ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026ae:	7afb      	ldrb	r3, [r7, #11]
 80026b0:	f003 030f 	and.w	r3, r3, #15
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	2b01      	cmp	r3, #1
 80026c0:	d102      	bne.n	80026c8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	697b      	ldr	r3, [r7, #20]
 80026c6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	f003 030f 	and.w	r3, r3, #15
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d109      	bne.n	80026e6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	6818      	ldr	r0, [r3, #0]
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	b2db      	uxtb	r3, r3
 80026dc:	461a      	mov	r2, r3
 80026de:	6979      	ldr	r1, [r7, #20]
 80026e0:	f002 fd96 	bl	8005210 <USB_EP0StartXfer>
 80026e4:	e008      	b.n	80026f8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6818      	ldr	r0, [r3, #0]
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	691b      	ldr	r3, [r3, #16]
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	461a      	mov	r2, r3
 80026f2:	6979      	ldr	r1, [r7, #20]
 80026f4:	f002 fb44 	bl	8004d80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80026f8:	2300      	movs	r3, #0
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3718      	adds	r7, #24
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}

08002702 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002702:	b480      	push	{r7}
 8002704:	b083      	sub	sp, #12
 8002706:	af00      	add	r7, sp, #0
 8002708:	6078      	str	r0, [r7, #4]
 800270a:	460b      	mov	r3, r1
 800270c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800270e:	78fb      	ldrb	r3, [r7, #3]
 8002710:	f003 020f 	and.w	r2, r3, #15
 8002714:	6879      	ldr	r1, [r7, #4]
 8002716:	4613      	mov	r3, r2
 8002718:	00db      	lsls	r3, r3, #3
 800271a:	4413      	add	r3, r2
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	440b      	add	r3, r1
 8002720:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8002724:	681b      	ldr	r3, [r3, #0]
}
 8002726:	4618      	mov	r0, r3
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002730:	4770      	bx	lr

08002732 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b086      	sub	sp, #24
 8002736:	af00      	add	r7, sp, #0
 8002738:	60f8      	str	r0, [r7, #12]
 800273a:	607a      	str	r2, [r7, #4]
 800273c:	603b      	str	r3, [r7, #0]
 800273e:	460b      	mov	r3, r1
 8002740:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002742:	7afb      	ldrb	r3, [r7, #11]
 8002744:	f003 020f 	and.w	r2, r3, #15
 8002748:	4613      	mov	r3, r2
 800274a:	00db      	lsls	r3, r3, #3
 800274c:	4413      	add	r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	3338      	adds	r3, #56	; 0x38
 8002752:	68fa      	ldr	r2, [r7, #12]
 8002754:	4413      	add	r3, r2
 8002756:	3304      	adds	r3, #4
 8002758:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002760:	697b      	ldr	r3, [r7, #20]
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	2200      	movs	r2, #0
 800276a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	2201      	movs	r2, #1
 8002770:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002772:	7afb      	ldrb	r3, [r7, #11]
 8002774:	f003 030f 	and.w	r3, r3, #15
 8002778:	b2da      	uxtb	r2, r3
 800277a:	697b      	ldr	r3, [r7, #20]
 800277c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	2b01      	cmp	r3, #1
 8002784:	d102      	bne.n	800278c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002786:	687a      	ldr	r2, [r7, #4]
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800278c:	7afb      	ldrb	r3, [r7, #11]
 800278e:	f003 030f 	and.w	r3, r3, #15
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	6818      	ldr	r0, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	691b      	ldr	r3, [r3, #16]
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	461a      	mov	r2, r3
 80027a2:	6979      	ldr	r1, [r7, #20]
 80027a4:	f002 fd34 	bl	8005210 <USB_EP0StartXfer>
 80027a8:	e008      	b.n	80027bc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	461a      	mov	r2, r3
 80027b6:	6979      	ldr	r1, [r7, #20]
 80027b8:	f002 fae2 	bl	8004d80 <USB_EPStartXfer>
  }

  return HAL_OK;
 80027bc:	2300      	movs	r3, #0
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b084      	sub	sp, #16
 80027ca:	af00      	add	r7, sp, #0
 80027cc:	6078      	str	r0, [r7, #4]
 80027ce:	460b      	mov	r3, r1
 80027d0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80027d2:	78fb      	ldrb	r3, [r7, #3]
 80027d4:	f003 020f 	and.w	r2, r3, #15
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	685b      	ldr	r3, [r3, #4]
 80027dc:	429a      	cmp	r2, r3
 80027de:	d901      	bls.n	80027e4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e050      	b.n	8002886 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80027e4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	da0f      	bge.n	800280c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027ec:	78fb      	ldrb	r3, [r7, #3]
 80027ee:	f003 020f 	and.w	r2, r3, #15
 80027f2:	4613      	mov	r3, r2
 80027f4:	00db      	lsls	r3, r3, #3
 80027f6:	4413      	add	r3, r2
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	3338      	adds	r3, #56	; 0x38
 80027fc:	687a      	ldr	r2, [r7, #4]
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	2201      	movs	r2, #1
 8002808:	705a      	strb	r2, [r3, #1]
 800280a:	e00d      	b.n	8002828 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800280c:	78fa      	ldrb	r2, [r7, #3]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800281a:	687a      	ldr	r2, [r7, #4]
 800281c:	4413      	add	r3, r2
 800281e:	3304      	adds	r3, #4
 8002820:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	2200      	movs	r2, #0
 8002826:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800282e:	78fb      	ldrb	r3, [r7, #3]
 8002830:	f003 030f 	and.w	r3, r3, #15
 8002834:	b2da      	uxtb	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002840:	2b01      	cmp	r3, #1
 8002842:	d101      	bne.n	8002848 <HAL_PCD_EP_SetStall+0x82>
 8002844:	2302      	movs	r3, #2
 8002846:	e01e      	b.n	8002886 <HAL_PCD_EP_SetStall+0xc0>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	68f9      	ldr	r1, [r7, #12]
 8002856:	4618      	mov	r0, r3
 8002858:	f002 ff72 	bl	8005740 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	2b00      	cmp	r3, #0
 8002864:	d10a      	bne.n	800287c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6818      	ldr	r0, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	b2d9      	uxtb	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002876:	461a      	mov	r2, r3
 8002878:	f003 f962 	bl	8005b40 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2200      	movs	r2, #0
 8002880:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3710      	adds	r7, #16
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800288e:	b580      	push	{r7, lr}
 8002890:	b084      	sub	sp, #16
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
 8002896:	460b      	mov	r3, r1
 8002898:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800289a:	78fb      	ldrb	r3, [r7, #3]
 800289c:	f003 020f 	and.w	r2, r3, #15
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d901      	bls.n	80028ac <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80028a8:	2301      	movs	r3, #1
 80028aa:	e042      	b.n	8002932 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80028ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	da0f      	bge.n	80028d4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80028b4:	78fb      	ldrb	r3, [r7, #3]
 80028b6:	f003 020f 	and.w	r2, r3, #15
 80028ba:	4613      	mov	r3, r2
 80028bc:	00db      	lsls	r3, r3, #3
 80028be:	4413      	add	r3, r2
 80028c0:	009b      	lsls	r3, r3, #2
 80028c2:	3338      	adds	r3, #56	; 0x38
 80028c4:	687a      	ldr	r2, [r7, #4]
 80028c6:	4413      	add	r3, r2
 80028c8:	3304      	adds	r3, #4
 80028ca:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2201      	movs	r2, #1
 80028d0:	705a      	strb	r2, [r3, #1]
 80028d2:	e00f      	b.n	80028f4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028d4:	78fb      	ldrb	r3, [r7, #3]
 80028d6:	f003 020f 	and.w	r2, r3, #15
 80028da:	4613      	mov	r3, r2
 80028dc:	00db      	lsls	r3, r3, #3
 80028de:	4413      	add	r3, r2
 80028e0:	009b      	lsls	r3, r3, #2
 80028e2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80028e6:	687a      	ldr	r2, [r7, #4]
 80028e8:	4413      	add	r3, r2
 80028ea:	3304      	adds	r3, #4
 80028ec:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	2200      	movs	r2, #0
 80028f2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2200      	movs	r2, #0
 80028f8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028fa:	78fb      	ldrb	r3, [r7, #3]
 80028fc:	f003 030f 	and.w	r3, r3, #15
 8002900:	b2da      	uxtb	r2, r3
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800290c:	2b01      	cmp	r3, #1
 800290e:	d101      	bne.n	8002914 <HAL_PCD_EP_ClrStall+0x86>
 8002910:	2302      	movs	r3, #2
 8002912:	e00e      	b.n	8002932 <HAL_PCD_EP_ClrStall+0xa4>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	4618      	mov	r0, r3
 8002924:	f002 ff7a 	bl	800581c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2200      	movs	r2, #0
 800292c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002930:	2300      	movs	r3, #0
}
 8002932:	4618      	mov	r0, r3
 8002934:	3710      	adds	r7, #16
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}

0800293a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800293a:	b580      	push	{r7, lr}
 800293c:	b084      	sub	sp, #16
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	460b      	mov	r3, r1
 8002944:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002946:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800294a:	2b00      	cmp	r3, #0
 800294c:	da0c      	bge.n	8002968 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800294e:	78fb      	ldrb	r3, [r7, #3]
 8002950:	f003 020f 	and.w	r2, r3, #15
 8002954:	4613      	mov	r3, r2
 8002956:	00db      	lsls	r3, r3, #3
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	3338      	adds	r3, #56	; 0x38
 800295e:	687a      	ldr	r2, [r7, #4]
 8002960:	4413      	add	r3, r2
 8002962:	3304      	adds	r3, #4
 8002964:	60fb      	str	r3, [r7, #12]
 8002966:	e00c      	b.n	8002982 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002968:	78fb      	ldrb	r3, [r7, #3]
 800296a:	f003 020f 	and.w	r2, r3, #15
 800296e:	4613      	mov	r3, r2
 8002970:	00db      	lsls	r3, r3, #3
 8002972:	4413      	add	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	4413      	add	r3, r2
 800297e:	3304      	adds	r3, #4
 8002980:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	68f9      	ldr	r1, [r7, #12]
 8002988:	4618      	mov	r0, r3
 800298a:	f002 fd99 	bl	80054c0 <USB_EPStopXfer>
 800298e:	4603      	mov	r3, r0
 8002990:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002992:	7afb      	ldrb	r3, [r7, #11]
}
 8002994:	4618      	mov	r0, r3
 8002996:	3710      	adds	r7, #16
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}

0800299c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b08a      	sub	sp, #40	; 0x28
 80029a0:	af02      	add	r7, sp, #8
 80029a2:	6078      	str	r0, [r7, #4]
 80029a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	3338      	adds	r3, #56	; 0x38
 80029bc:	687a      	ldr	r2, [r7, #4]
 80029be:	4413      	add	r3, r2
 80029c0:	3304      	adds	r3, #4
 80029c2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a1a      	ldr	r2, [r3, #32]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d901      	bls.n	80029d4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e06c      	b.n	8002aae <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	699a      	ldr	r2, [r3, #24]
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	1ad3      	subs	r3, r2, r3
 80029de:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	69fa      	ldr	r2, [r7, #28]
 80029e6:	429a      	cmp	r2, r3
 80029e8:	d902      	bls.n	80029f0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	68db      	ldr	r3, [r3, #12]
 80029ee:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	3303      	adds	r3, #3
 80029f4:	089b      	lsrs	r3, r3, #2
 80029f6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80029f8:	e02b      	b.n	8002a52 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	699a      	ldr	r2, [r3, #24]
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	6a1b      	ldr	r3, [r3, #32]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d902      	bls.n	8002a16 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3303      	adds	r3, #3
 8002a1a:	089b      	lsrs	r3, r3, #2
 8002a1c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	6919      	ldr	r1, [r3, #16]
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	69fb      	ldr	r3, [r7, #28]
 8002a28:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	9300      	str	r3, [sp, #0]
 8002a32:	4603      	mov	r3, r0
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f002 fded 	bl	8005614 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	691a      	ldr	r2, [r3, #16]
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	441a      	add	r2, r3
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1a      	ldr	r2, [r3, #32]
 8002a4a:	69fb      	ldr	r3, [r7, #28]
 8002a4c:	441a      	add	r2, r3
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	015a      	lsls	r2, r3, #5
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	4413      	add	r3, r2
 8002a5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a5e:	699b      	ldr	r3, [r3, #24]
 8002a60:	b29b      	uxth	r3, r3
 8002a62:	69ba      	ldr	r2, [r7, #24]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	d809      	bhi.n	8002a7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	6a1a      	ldr	r2, [r3, #32]
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d203      	bcs.n	8002a7c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	699b      	ldr	r3, [r3, #24]
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d1be      	bne.n	80029fa <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	699a      	ldr	r2, [r3, #24]
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	6a1b      	ldr	r3, [r3, #32]
 8002a84:	429a      	cmp	r2, r3
 8002a86:	d811      	bhi.n	8002aac <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	f003 030f 	and.w	r3, r3, #15
 8002a8e:	2201      	movs	r2, #1
 8002a90:	fa02 f303 	lsl.w	r3, r2, r3
 8002a94:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002a9c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	43db      	mvns	r3, r3
 8002aa2:	6939      	ldr	r1, [r7, #16]
 8002aa4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002aac:	2300      	movs	r3, #0
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3720      	adds	r7, #32
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b088      	sub	sp, #32
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
 8002ac0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002ac8:	69fb      	ldr	r3, [r7, #28]
 8002aca:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002acc:	69fb      	ldr	r3, [r7, #28]
 8002ace:	333c      	adds	r3, #60	; 0x3c
 8002ad0:	3304      	adds	r3, #4
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ae2:	689b      	ldr	r3, [r3, #8]
 8002ae4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	691b      	ldr	r3, [r3, #16]
 8002aea:	2b01      	cmp	r3, #1
 8002aec:	d17b      	bne.n	8002be6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002aee:	693b      	ldr	r3, [r7, #16]
 8002af0:	f003 0308 	and.w	r3, r3, #8
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d015      	beq.n	8002b24 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002af8:	697b      	ldr	r3, [r7, #20]
 8002afa:	4a61      	ldr	r2, [pc, #388]	; (8002c80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002afc:	4293      	cmp	r3, r2
 8002afe:	f240 80b9 	bls.w	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80b3 	beq.w	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69bb      	ldr	r3, [r7, #24]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b20:	6093      	str	r3, [r2, #8]
 8002b22:	e0a7      	b.n	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	f003 0320 	and.w	r3, r3, #32
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d009      	beq.n	8002b42 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	015a      	lsls	r2, r3, #5
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	4413      	add	r3, r2
 8002b36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3a:	461a      	mov	r2, r3
 8002b3c:	2320      	movs	r3, #32
 8002b3e:	6093      	str	r3, [r2, #8]
 8002b40:	e098      	b.n	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002b42:	693b      	ldr	r3, [r7, #16]
 8002b44:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f040 8093 	bne.w	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4a4b      	ldr	r2, [pc, #300]	; (8002c80 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d90f      	bls.n	8002b76 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d00a      	beq.n	8002b76 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69bb      	ldr	r3, [r7, #24]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b72:	6093      	str	r3, [r2, #8]
 8002b74:	e07e      	b.n	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002b76:	683a      	ldr	r2, [r7, #0]
 8002b78:	4613      	mov	r3, r2
 8002b7a:	00db      	lsls	r3, r3, #3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	009b      	lsls	r3, r3, #2
 8002b80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	4413      	add	r3, r2
 8002b88:	3304      	adds	r3, #4
 8002b8a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	0159      	lsls	r1, r3, #5
 8002b94:	69bb      	ldr	r3, [r7, #24]
 8002b96:	440b      	add	r3, r1
 8002b98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002ba2:	1ad2      	subs	r2, r2, r3
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d114      	bne.n	8002bd8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	699b      	ldr	r3, [r3, #24]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d109      	bne.n	8002bca <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6818      	ldr	r0, [r3, #0]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	f002 ffbc 	bl	8005b40 <USB_EP0_OutStart>
 8002bc8:	e006      	b.n	8002bd8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	691a      	ldr	r2, [r3, #16]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	441a      	add	r2, r3
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	4619      	mov	r1, r3
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f005 fa16 	bl	8008010 <HAL_PCD_DataOutStageCallback>
 8002be4:	e046      	b.n	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	4a26      	ldr	r2, [pc, #152]	; (8002c84 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d124      	bne.n	8002c38 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002bee:	693b      	ldr	r3, [r7, #16]
 8002bf0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00a      	beq.n	8002c0e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	015a      	lsls	r2, r3, #5
 8002bfc:	69bb      	ldr	r3, [r7, #24]
 8002bfe:	4413      	add	r3, r2
 8002c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c04:	461a      	mov	r2, r3
 8002c06:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c0a:	6093      	str	r3, [r2, #8]
 8002c0c:	e032      	b.n	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002c0e:	693b      	ldr	r3, [r7, #16]
 8002c10:	f003 0320 	and.w	r3, r3, #32
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d008      	beq.n	8002c2a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	015a      	lsls	r2, r3, #5
 8002c1c:	69bb      	ldr	r3, [r7, #24]
 8002c1e:	4413      	add	r3, r2
 8002c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c24:	461a      	mov	r2, r3
 8002c26:	2320      	movs	r3, #32
 8002c28:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	4619      	mov	r1, r3
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f005 f9ed 	bl	8008010 <HAL_PCD_DataOutStageCallback>
 8002c36:	e01d      	b.n	8002c74 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d114      	bne.n	8002c68 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002c3e:	6879      	ldr	r1, [r7, #4]
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	440b      	add	r3, r1
 8002c4c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d108      	bne.n	8002c68 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6818      	ldr	r0, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c60:	461a      	mov	r2, r3
 8002c62:	2100      	movs	r1, #0
 8002c64:	f002 ff6c 	bl	8005b40 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	b2db      	uxtb	r3, r3
 8002c6c:	4619      	mov	r1, r3
 8002c6e:	6878      	ldr	r0, [r7, #4]
 8002c70:	f005 f9ce 	bl	8008010 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002c74:	2300      	movs	r3, #0
}
 8002c76:	4618      	mov	r0, r3
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	4f54300a 	.word	0x4f54300a
 8002c84:	4f54310a 	.word	0x4f54310a

08002c88 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
 8002c90:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c98:	697b      	ldr	r3, [r7, #20]
 8002c9a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	333c      	adds	r3, #60	; 0x3c
 8002ca0:	3304      	adds	r3, #4
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	015a      	lsls	r2, r3, #5
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	4413      	add	r3, r2
 8002cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4a15      	ldr	r2, [pc, #84]	; (8002d10 <PCD_EP_OutSetupPacket_int+0x88>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d90e      	bls.n	8002cdc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d009      	beq.n	8002cdc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	015a      	lsls	r2, r3, #5
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4413      	add	r3, r2
 8002cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cda:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f005 f985 	bl	8007fec <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4a0a      	ldr	r2, [pc, #40]	; (8002d10 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d90c      	bls.n	8002d04 <PCD_EP_OutSetupPacket_int+0x7c>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	691b      	ldr	r3, [r3, #16]
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d108      	bne.n	8002d04 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6818      	ldr	r0, [r3, #0]
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002cfc:	461a      	mov	r2, r3
 8002cfe:	2101      	movs	r1, #1
 8002d00:	f002 ff1e 	bl	8005b40 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3718      	adds	r7, #24
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	4f54300a 	.word	0x4f54300a

08002d14 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002d14:	b480      	push	{r7}
 8002d16:	b085      	sub	sp, #20
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
 8002d1c:	460b      	mov	r3, r1
 8002d1e:	70fb      	strb	r3, [r7, #3]
 8002d20:	4613      	mov	r3, r2
 8002d22:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d107      	bne.n	8002d42 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002d32:	883b      	ldrh	r3, [r7, #0]
 8002d34:	0419      	lsls	r1, r3, #16
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	629a      	str	r2, [r3, #40]	; 0x28
 8002d40:	e028      	b.n	8002d94 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d48:	0c1b      	lsrs	r3, r3, #16
 8002d4a:	68ba      	ldr	r2, [r7, #8]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d50:	2300      	movs	r3, #0
 8002d52:	73fb      	strb	r3, [r7, #15]
 8002d54:	e00d      	b.n	8002d72 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	3340      	adds	r3, #64	; 0x40
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	4413      	add	r3, r2
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	0c1b      	lsrs	r3, r3, #16
 8002d66:	68ba      	ldr	r2, [r7, #8]
 8002d68:	4413      	add	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002d6c:	7bfb      	ldrb	r3, [r7, #15]
 8002d6e:	3301      	adds	r3, #1
 8002d70:	73fb      	strb	r3, [r7, #15]
 8002d72:	7bfa      	ldrb	r2, [r7, #15]
 8002d74:	78fb      	ldrb	r3, [r7, #3]
 8002d76:	3b01      	subs	r3, #1
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d3ec      	bcc.n	8002d56 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002d7c:	883b      	ldrh	r3, [r7, #0]
 8002d7e:	0418      	lsls	r0, r3, #16
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6819      	ldr	r1, [r3, #0]
 8002d84:	78fb      	ldrb	r3, [r7, #3]
 8002d86:	3b01      	subs	r3, #1
 8002d88:	68ba      	ldr	r2, [r7, #8]
 8002d8a:	4302      	orrs	r2, r0
 8002d8c:	3340      	adds	r3, #64	; 0x40
 8002d8e:	009b      	lsls	r3, r3, #2
 8002d90:	440b      	add	r3, r1
 8002d92:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002d94:	2300      	movs	r3, #0
}
 8002d96:	4618      	mov	r0, r3
 8002d98:	3714      	adds	r7, #20
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da0:	4770      	bx	lr

08002da2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002da2:	b480      	push	{r7}
 8002da4:	b083      	sub	sp, #12
 8002da6:	af00      	add	r7, sp, #0
 8002da8:	6078      	str	r0, [r7, #4]
 8002daa:	460b      	mov	r3, r1
 8002dac:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	887a      	ldrh	r2, [r7, #2]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr

08002dc4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
 8002dcc:	460b      	mov	r3, r1
 8002dce:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002dd0:	bf00      	nop
 8002dd2:	370c      	adds	r7, #12
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dda:	4770      	bx	lr

08002ddc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b086      	sub	sp, #24
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d101      	bne.n	8002dee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e267      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f003 0301 	and.w	r3, r3, #1
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d075      	beq.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002dfa:	4b88      	ldr	r3, [pc, #544]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
 8002e02:	2b04      	cmp	r3, #4
 8002e04:	d00c      	beq.n	8002e20 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e06:	4b85      	ldr	r3, [pc, #532]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e0e:	2b08      	cmp	r3, #8
 8002e10:	d112      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e12:	4b82      	ldr	r3, [pc, #520]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e1a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e1e:	d10b      	bne.n	8002e38 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e20:	4b7e      	ldr	r3, [pc, #504]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d05b      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x108>
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d157      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e34:	2301      	movs	r3, #1
 8002e36:	e242      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e40:	d106      	bne.n	8002e50 <HAL_RCC_OscConfig+0x74>
 8002e42:	4b76      	ldr	r3, [pc, #472]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a75      	ldr	r2, [pc, #468]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]
 8002e4e:	e01d      	b.n	8002e8c <HAL_RCC_OscConfig+0xb0>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002e58:	d10c      	bne.n	8002e74 <HAL_RCC_OscConfig+0x98>
 8002e5a:	4b70      	ldr	r3, [pc, #448]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6f      	ldr	r2, [pc, #444]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	4b6d      	ldr	r3, [pc, #436]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a6c      	ldr	r2, [pc, #432]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e70:	6013      	str	r3, [r2, #0]
 8002e72:	e00b      	b.n	8002e8c <HAL_RCC_OscConfig+0xb0>
 8002e74:	4b69      	ldr	r3, [pc, #420]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a68      	ldr	r2, [pc, #416]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e7e:	6013      	str	r3, [r2, #0]
 8002e80:	4b66      	ldr	r3, [pc, #408]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a65      	ldr	r2, [pc, #404]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002e86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e94:	f7fd fe46 	bl	8000b24 <HAL_GetTick>
 8002e98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e9a:	e008      	b.n	8002eae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e9c:	f7fd fe42 	bl	8000b24 <HAL_GetTick>
 8002ea0:	4602      	mov	r2, r0
 8002ea2:	693b      	ldr	r3, [r7, #16]
 8002ea4:	1ad3      	subs	r3, r2, r3
 8002ea6:	2b64      	cmp	r3, #100	; 0x64
 8002ea8:	d901      	bls.n	8002eae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eaa:	2303      	movs	r3, #3
 8002eac:	e207      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002eae:	4b5b      	ldr	r3, [pc, #364]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d0f0      	beq.n	8002e9c <HAL_RCC_OscConfig+0xc0>
 8002eba:	e014      	b.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ebc:	f7fd fe32 	bl	8000b24 <HAL_GetTick>
 8002ec0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ec2:	e008      	b.n	8002ed6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ec4:	f7fd fe2e 	bl	8000b24 <HAL_GetTick>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b64      	cmp	r3, #100	; 0x64
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e1f3      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ed6:	4b51      	ldr	r3, [pc, #324]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d1f0      	bne.n	8002ec4 <HAL_RCC_OscConfig+0xe8>
 8002ee2:	e000      	b.n	8002ee6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d063      	beq.n	8002fba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002ef2:	4b4a      	ldr	r3, [pc, #296]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d00b      	beq.n	8002f16 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efe:	4b47      	ldr	r3, [pc, #284]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f06:	2b08      	cmp	r3, #8
 8002f08:	d11c      	bne.n	8002f44 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f0a:	4b44      	ldr	r3, [pc, #272]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d116      	bne.n	8002f44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f16:	4b41      	ldr	r3, [pc, #260]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0302 	and.w	r3, r3, #2
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d005      	beq.n	8002f2e <HAL_RCC_OscConfig+0x152>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	68db      	ldr	r3, [r3, #12]
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d001      	beq.n	8002f2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e1c7      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f2e:	4b3b      	ldr	r3, [pc, #236]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	691b      	ldr	r3, [r3, #16]
 8002f3a:	00db      	lsls	r3, r3, #3
 8002f3c:	4937      	ldr	r1, [pc, #220]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f42:	e03a      	b.n	8002fba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d020      	beq.n	8002f8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f4c:	4b34      	ldr	r3, [pc, #208]	; (8003020 <HAL_RCC_OscConfig+0x244>)
 8002f4e:	2201      	movs	r2, #1
 8002f50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f52:	f7fd fde7 	bl	8000b24 <HAL_GetTick>
 8002f56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f58:	e008      	b.n	8002f6c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f5a:	f7fd fde3 	bl	8000b24 <HAL_GetTick>
 8002f5e:	4602      	mov	r2, r0
 8002f60:	693b      	ldr	r3, [r7, #16]
 8002f62:	1ad3      	subs	r3, r2, r3
 8002f64:	2b02      	cmp	r3, #2
 8002f66:	d901      	bls.n	8002f6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e1a8      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f6c:	4b2b      	ldr	r3, [pc, #172]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0302 	and.w	r3, r3, #2
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d0f0      	beq.n	8002f5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f78:	4b28      	ldr	r3, [pc, #160]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	691b      	ldr	r3, [r3, #16]
 8002f84:	00db      	lsls	r3, r3, #3
 8002f86:	4925      	ldr	r1, [pc, #148]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]
 8002f8c:	e015      	b.n	8002fba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f8e:	4b24      	ldr	r3, [pc, #144]	; (8003020 <HAL_RCC_OscConfig+0x244>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f94:	f7fd fdc6 	bl	8000b24 <HAL_GetTick>
 8002f98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f9a:	e008      	b.n	8002fae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f9c:	f7fd fdc2 	bl	8000b24 <HAL_GetTick>
 8002fa0:	4602      	mov	r2, r0
 8002fa2:	693b      	ldr	r3, [r7, #16]
 8002fa4:	1ad3      	subs	r3, r2, r3
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d901      	bls.n	8002fae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002faa:	2303      	movs	r3, #3
 8002fac:	e187      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fae:	4b1b      	ldr	r3, [pc, #108]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d1f0      	bne.n	8002f9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f003 0308 	and.w	r3, r3, #8
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d036      	beq.n	8003034 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	695b      	ldr	r3, [r3, #20]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d016      	beq.n	8002ffc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fce:	4b15      	ldr	r3, [pc, #84]	; (8003024 <HAL_RCC_OscConfig+0x248>)
 8002fd0:	2201      	movs	r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fd4:	f7fd fda6 	bl	8000b24 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002fdc:	f7fd fda2 	bl	8000b24 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b02      	cmp	r3, #2
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e167      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fee:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_OscConfig+0x240>)
 8002ff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ff2:	f003 0302 	and.w	r3, r3, #2
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d0f0      	beq.n	8002fdc <HAL_RCC_OscConfig+0x200>
 8002ffa:	e01b      	b.n	8003034 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ffc:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_OscConfig+0x248>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003002:	f7fd fd8f 	bl	8000b24 <HAL_GetTick>
 8003006:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003008:	e00e      	b.n	8003028 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800300a:	f7fd fd8b 	bl	8000b24 <HAL_GetTick>
 800300e:	4602      	mov	r2, r0
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	1ad3      	subs	r3, r2, r3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d907      	bls.n	8003028 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003018:	2303      	movs	r3, #3
 800301a:	e150      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
 800301c:	40023800 	.word	0x40023800
 8003020:	42470000 	.word	0x42470000
 8003024:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003028:	4b88      	ldr	r3, [pc, #544]	; (800324c <HAL_RCC_OscConfig+0x470>)
 800302a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800302c:	f003 0302 	and.w	r3, r3, #2
 8003030:	2b00      	cmp	r3, #0
 8003032:	d1ea      	bne.n	800300a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	f000 8097 	beq.w	8003170 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003042:	2300      	movs	r3, #0
 8003044:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003046:	4b81      	ldr	r3, [pc, #516]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10f      	bne.n	8003072 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003052:	2300      	movs	r3, #0
 8003054:	60bb      	str	r3, [r7, #8]
 8003056:	4b7d      	ldr	r3, [pc, #500]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a7c      	ldr	r2, [pc, #496]	; (800324c <HAL_RCC_OscConfig+0x470>)
 800305c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
 8003062:	4b7a      	ldr	r3, [pc, #488]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800306a:	60bb      	str	r3, [r7, #8]
 800306c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800306e:	2301      	movs	r3, #1
 8003070:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003072:	4b77      	ldr	r3, [pc, #476]	; (8003250 <HAL_RCC_OscConfig+0x474>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800307a:	2b00      	cmp	r3, #0
 800307c:	d118      	bne.n	80030b0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800307e:	4b74      	ldr	r3, [pc, #464]	; (8003250 <HAL_RCC_OscConfig+0x474>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a73      	ldr	r2, [pc, #460]	; (8003250 <HAL_RCC_OscConfig+0x474>)
 8003084:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003088:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800308a:	f7fd fd4b 	bl	8000b24 <HAL_GetTick>
 800308e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003090:	e008      	b.n	80030a4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003092:	f7fd fd47 	bl	8000b24 <HAL_GetTick>
 8003096:	4602      	mov	r2, r0
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	1ad3      	subs	r3, r2, r3
 800309c:	2b02      	cmp	r3, #2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e10c      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030a4:	4b6a      	ldr	r3, [pc, #424]	; (8003250 <HAL_RCC_OscConfig+0x474>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d0f0      	beq.n	8003092 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	689b      	ldr	r3, [r3, #8]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d106      	bne.n	80030c6 <HAL_RCC_OscConfig+0x2ea>
 80030b8:	4b64      	ldr	r3, [pc, #400]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030bc:	4a63      	ldr	r2, [pc, #396]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030be:	f043 0301 	orr.w	r3, r3, #1
 80030c2:	6713      	str	r3, [r2, #112]	; 0x70
 80030c4:	e01c      	b.n	8003100 <HAL_RCC_OscConfig+0x324>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	689b      	ldr	r3, [r3, #8]
 80030ca:	2b05      	cmp	r3, #5
 80030cc:	d10c      	bne.n	80030e8 <HAL_RCC_OscConfig+0x30c>
 80030ce:	4b5f      	ldr	r3, [pc, #380]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d2:	4a5e      	ldr	r2, [pc, #376]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030d4:	f043 0304 	orr.w	r3, r3, #4
 80030d8:	6713      	str	r3, [r2, #112]	; 0x70
 80030da:	4b5c      	ldr	r3, [pc, #368]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030de:	4a5b      	ldr	r2, [pc, #364]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	6713      	str	r3, [r2, #112]	; 0x70
 80030e6:	e00b      	b.n	8003100 <HAL_RCC_OscConfig+0x324>
 80030e8:	4b58      	ldr	r3, [pc, #352]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030ec:	4a57      	ldr	r2, [pc, #348]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030ee:	f023 0301 	bic.w	r3, r3, #1
 80030f2:	6713      	str	r3, [r2, #112]	; 0x70
 80030f4:	4b55      	ldr	r3, [pc, #340]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030f8:	4a54      	ldr	r2, [pc, #336]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80030fa:	f023 0304 	bic.w	r3, r3, #4
 80030fe:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d015      	beq.n	8003134 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003108:	f7fd fd0c 	bl	8000b24 <HAL_GetTick>
 800310c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800310e:	e00a      	b.n	8003126 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003110:	f7fd fd08 	bl	8000b24 <HAL_GetTick>
 8003114:	4602      	mov	r2, r0
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	1ad3      	subs	r3, r2, r3
 800311a:	f241 3288 	movw	r2, #5000	; 0x1388
 800311e:	4293      	cmp	r3, r2
 8003120:	d901      	bls.n	8003126 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003122:	2303      	movs	r3, #3
 8003124:	e0cb      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003126:	4b49      	ldr	r3, [pc, #292]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003128:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800312a:	f003 0302 	and.w	r3, r3, #2
 800312e:	2b00      	cmp	r3, #0
 8003130:	d0ee      	beq.n	8003110 <HAL_RCC_OscConfig+0x334>
 8003132:	e014      	b.n	800315e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003134:	f7fd fcf6 	bl	8000b24 <HAL_GetTick>
 8003138:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800313a:	e00a      	b.n	8003152 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800313c:	f7fd fcf2 	bl	8000b24 <HAL_GetTick>
 8003140:	4602      	mov	r2, r0
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	1ad3      	subs	r3, r2, r3
 8003146:	f241 3288 	movw	r2, #5000	; 0x1388
 800314a:	4293      	cmp	r3, r2
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e0b5      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003152:	4b3e      	ldr	r3, [pc, #248]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003154:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003156:	f003 0302 	and.w	r3, r3, #2
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1ee      	bne.n	800313c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800315e:	7dfb      	ldrb	r3, [r7, #23]
 8003160:	2b01      	cmp	r3, #1
 8003162:	d105      	bne.n	8003170 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003164:	4b39      	ldr	r3, [pc, #228]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003168:	4a38      	ldr	r2, [pc, #224]	; (800324c <HAL_RCC_OscConfig+0x470>)
 800316a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800316e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 80a1 	beq.w	80032bc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800317a:	4b34      	ldr	r3, [pc, #208]	; (800324c <HAL_RCC_OscConfig+0x470>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
 8003182:	2b08      	cmp	r3, #8
 8003184:	d05c      	beq.n	8003240 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	699b      	ldr	r3, [r3, #24]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d141      	bne.n	8003212 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <HAL_RCC_OscConfig+0x478>)
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003194:	f7fd fcc6 	bl	8000b24 <HAL_GetTick>
 8003198:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319a:	e008      	b.n	80031ae <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800319c:	f7fd fcc2 	bl	8000b24 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d901      	bls.n	80031ae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e087      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031ae:	4b27      	ldr	r3, [pc, #156]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d1f0      	bne.n	800319c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c8:	019b      	lsls	r3, r3, #6
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031d0:	085b      	lsrs	r3, r3, #1
 80031d2:	3b01      	subs	r3, #1
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031dc:	061b      	lsls	r3, r3, #24
 80031de:	491b      	ldr	r1, [pc, #108]	; (800324c <HAL_RCC_OscConfig+0x470>)
 80031e0:	4313      	orrs	r3, r2
 80031e2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031e4:	4b1b      	ldr	r3, [pc, #108]	; (8003254 <HAL_RCC_OscConfig+0x478>)
 80031e6:	2201      	movs	r2, #1
 80031e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ea:	f7fd fc9b 	bl	8000b24 <HAL_GetTick>
 80031ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f0:	e008      	b.n	8003204 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031f2:	f7fd fc97 	bl	8000b24 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	2b02      	cmp	r3, #2
 80031fe:	d901      	bls.n	8003204 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003200:	2303      	movs	r3, #3
 8003202:	e05c      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003204:	4b11      	ldr	r3, [pc, #68]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800320c:	2b00      	cmp	r3, #0
 800320e:	d0f0      	beq.n	80031f2 <HAL_RCC_OscConfig+0x416>
 8003210:	e054      	b.n	80032bc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003212:	4b10      	ldr	r3, [pc, #64]	; (8003254 <HAL_RCC_OscConfig+0x478>)
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003218:	f7fd fc84 	bl	8000b24 <HAL_GetTick>
 800321c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800321e:	e008      	b.n	8003232 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003220:	f7fd fc80 	bl	8000b24 <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b02      	cmp	r3, #2
 800322c:	d901      	bls.n	8003232 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e045      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003232:	4b06      	ldr	r3, [pc, #24]	; (800324c <HAL_RCC_OscConfig+0x470>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1f0      	bne.n	8003220 <HAL_RCC_OscConfig+0x444>
 800323e:	e03d      	b.n	80032bc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	699b      	ldr	r3, [r3, #24]
 8003244:	2b01      	cmp	r3, #1
 8003246:	d107      	bne.n	8003258 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003248:	2301      	movs	r3, #1
 800324a:	e038      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
 800324c:	40023800 	.word	0x40023800
 8003250:	40007000 	.word	0x40007000
 8003254:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003258:	4b1b      	ldr	r3, [pc, #108]	; (80032c8 <HAL_RCC_OscConfig+0x4ec>)
 800325a:	685b      	ldr	r3, [r3, #4]
 800325c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	699b      	ldr	r3, [r3, #24]
 8003262:	2b01      	cmp	r3, #1
 8003264:	d028      	beq.n	80032b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003270:	429a      	cmp	r2, r3
 8003272:	d121      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800327e:	429a      	cmp	r2, r3
 8003280:	d11a      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003282:	68fa      	ldr	r2, [r7, #12]
 8003284:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003288:	4013      	ands	r3, r2
 800328a:	687a      	ldr	r2, [r7, #4]
 800328c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800328e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003290:	4293      	cmp	r3, r2
 8003292:	d111      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800329e:	085b      	lsrs	r3, r3, #1
 80032a0:	3b01      	subs	r3, #1
 80032a2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032a4:	429a      	cmp	r2, r3
 80032a6:	d107      	bne.n	80032b8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032b2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d001      	beq.n	80032bc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80032b8:	2301      	movs	r3, #1
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032bc:	2300      	movs	r3, #0
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3718      	adds	r7, #24
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40023800 	.word	0x40023800

080032cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	b084      	sub	sp, #16
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d101      	bne.n	80032e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032dc:	2301      	movs	r3, #1
 80032de:	e0cc      	b.n	800347a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80032e0:	4b68      	ldr	r3, [pc, #416]	; (8003484 <HAL_RCC_ClockConfig+0x1b8>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f003 0307 	and.w	r3, r3, #7
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d90c      	bls.n	8003308 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032ee:	4b65      	ldr	r3, [pc, #404]	; (8003484 <HAL_RCC_ClockConfig+0x1b8>)
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	b2d2      	uxtb	r2, r2
 80032f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f6:	4b63      	ldr	r3, [pc, #396]	; (8003484 <HAL_RCC_ClockConfig+0x1b8>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	683a      	ldr	r2, [r7, #0]
 8003300:	429a      	cmp	r2, r3
 8003302:	d001      	beq.n	8003308 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	e0b8      	b.n	800347a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0302 	and.w	r3, r3, #2
 8003310:	2b00      	cmp	r3, #0
 8003312:	d020      	beq.n	8003356 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	2b00      	cmp	r3, #0
 800331e:	d005      	beq.n	800332c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003320:	4b59      	ldr	r3, [pc, #356]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 8003322:	689b      	ldr	r3, [r3, #8]
 8003324:	4a58      	ldr	r2, [pc, #352]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 8003326:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800332a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f003 0308 	and.w	r3, r3, #8
 8003334:	2b00      	cmp	r3, #0
 8003336:	d005      	beq.n	8003344 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003338:	4b53      	ldr	r3, [pc, #332]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	4a52      	ldr	r2, [pc, #328]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800333e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003342:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003344:	4b50      	ldr	r3, [pc, #320]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689b      	ldr	r3, [r3, #8]
 8003350:	494d      	ldr	r1, [pc, #308]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f003 0301 	and.w	r3, r3, #1
 800335e:	2b00      	cmp	r3, #0
 8003360:	d044      	beq.n	80033ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d107      	bne.n	800337a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336a:	4b47      	ldr	r3, [pc, #284]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d119      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003376:	2301      	movs	r3, #1
 8003378:	e07f      	b.n	800347a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	2b02      	cmp	r3, #2
 8003380:	d003      	beq.n	800338a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003386:	2b03      	cmp	r3, #3
 8003388:	d107      	bne.n	800339a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800338a:	4b3f      	ldr	r3, [pc, #252]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d109      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e06f      	b.n	800347a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800339a:	4b3b      	ldr	r3, [pc, #236]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e067      	b.n	800347a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033aa:	4b37      	ldr	r3, [pc, #220]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f023 0203 	bic.w	r2, r3, #3
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4934      	ldr	r1, [pc, #208]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 80033b8:	4313      	orrs	r3, r2
 80033ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033bc:	f7fd fbb2 	bl	8000b24 <HAL_GetTick>
 80033c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033c2:	e00a      	b.n	80033da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033c4:	f7fd fbae 	bl	8000b24 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d901      	bls.n	80033da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e04f      	b.n	800347a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033da:	4b2b      	ldr	r3, [pc, #172]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 80033dc:	689b      	ldr	r3, [r3, #8]
 80033de:	f003 020c 	and.w	r2, r3, #12
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d1eb      	bne.n	80033c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80033ec:	4b25      	ldr	r3, [pc, #148]	; (8003484 <HAL_RCC_ClockConfig+0x1b8>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0307 	and.w	r3, r3, #7
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	429a      	cmp	r2, r3
 80033f8:	d20c      	bcs.n	8003414 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033fa:	4b22      	ldr	r3, [pc, #136]	; (8003484 <HAL_RCC_ClockConfig+0x1b8>)
 80033fc:	683a      	ldr	r2, [r7, #0]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003402:	4b20      	ldr	r3, [pc, #128]	; (8003484 <HAL_RCC_ClockConfig+0x1b8>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	683a      	ldr	r2, [r7, #0]
 800340c:	429a      	cmp	r2, r3
 800340e:	d001      	beq.n	8003414 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003410:	2301      	movs	r3, #1
 8003412:	e032      	b.n	800347a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	d008      	beq.n	8003432 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003420:	4b19      	ldr	r3, [pc, #100]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	689b      	ldr	r3, [r3, #8]
 8003424:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	4916      	ldr	r1, [pc, #88]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800342e:	4313      	orrs	r3, r2
 8003430:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0308 	and.w	r3, r3, #8
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800343e:	4b12      	ldr	r3, [pc, #72]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	00db      	lsls	r3, r3, #3
 800344c:	490e      	ldr	r1, [pc, #56]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	4313      	orrs	r3, r2
 8003450:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003452:	f000 f821 	bl	8003498 <HAL_RCC_GetSysClockFreq>
 8003456:	4602      	mov	r2, r0
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_RCC_ClockConfig+0x1bc>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	091b      	lsrs	r3, r3, #4
 800345e:	f003 030f 	and.w	r3, r3, #15
 8003462:	490a      	ldr	r1, [pc, #40]	; (800348c <HAL_RCC_ClockConfig+0x1c0>)
 8003464:	5ccb      	ldrb	r3, [r1, r3]
 8003466:	fa22 f303 	lsr.w	r3, r2, r3
 800346a:	4a09      	ldr	r2, [pc, #36]	; (8003490 <HAL_RCC_ClockConfig+0x1c4>)
 800346c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800346e:	4b09      	ldr	r3, [pc, #36]	; (8003494 <HAL_RCC_ClockConfig+0x1c8>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4618      	mov	r0, r3
 8003474:	f7fd fb12 	bl	8000a9c <HAL_InitTick>

  return HAL_OK;
 8003478:	2300      	movs	r3, #0
}
 800347a:	4618      	mov	r0, r3
 800347c:	3710      	adds	r7, #16
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	40023c00 	.word	0x40023c00
 8003488:	40023800 	.word	0x40023800
 800348c:	08008624 	.word	0x08008624
 8003490:	20000000 	.word	0x20000000
 8003494:	20000004 	.word	0x20000004

08003498 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003498:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800349c:	b094      	sub	sp, #80	; 0x50
 800349e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	647b      	str	r3, [r7, #68]	; 0x44
 80034a4:	2300      	movs	r3, #0
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034a8:	2300      	movs	r3, #0
 80034aa:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80034ac:	2300      	movs	r3, #0
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034b0:	4b79      	ldr	r3, [pc, #484]	; (8003698 <HAL_RCC_GetSysClockFreq+0x200>)
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 030c 	and.w	r3, r3, #12
 80034b8:	2b08      	cmp	r3, #8
 80034ba:	d00d      	beq.n	80034d8 <HAL_RCC_GetSysClockFreq+0x40>
 80034bc:	2b08      	cmp	r3, #8
 80034be:	f200 80e1 	bhi.w	8003684 <HAL_RCC_GetSysClockFreq+0x1ec>
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d002      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x34>
 80034c6:	2b04      	cmp	r3, #4
 80034c8:	d003      	beq.n	80034d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80034ca:	e0db      	b.n	8003684 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034cc:	4b73      	ldr	r3, [pc, #460]	; (800369c <HAL_RCC_GetSysClockFreq+0x204>)
 80034ce:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80034d0:	e0db      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034d2:	4b73      	ldr	r3, [pc, #460]	; (80036a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80034d4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80034d6:	e0d8      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034d8:	4b6f      	ldr	r3, [pc, #444]	; (8003698 <HAL_RCC_GetSysClockFreq+0x200>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80034e0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034e2:	4b6d      	ldr	r3, [pc, #436]	; (8003698 <HAL_RCC_GetSysClockFreq+0x200>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d063      	beq.n	80035b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ee:	4b6a      	ldr	r3, [pc, #424]	; (8003698 <HAL_RCC_GetSysClockFreq+0x200>)
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	099b      	lsrs	r3, r3, #6
 80034f4:	2200      	movs	r2, #0
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80034fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80034fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
 8003502:	2300      	movs	r3, #0
 8003504:	637b      	str	r3, [r7, #52]	; 0x34
 8003506:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800350a:	4622      	mov	r2, r4
 800350c:	462b      	mov	r3, r5
 800350e:	f04f 0000 	mov.w	r0, #0
 8003512:	f04f 0100 	mov.w	r1, #0
 8003516:	0159      	lsls	r1, r3, #5
 8003518:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800351c:	0150      	lsls	r0, r2, #5
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4621      	mov	r1, r4
 8003524:	1a51      	subs	r1, r2, r1
 8003526:	6139      	str	r1, [r7, #16]
 8003528:	4629      	mov	r1, r5
 800352a:	eb63 0301 	sbc.w	r3, r3, r1
 800352e:	617b      	str	r3, [r7, #20]
 8003530:	f04f 0200 	mov.w	r2, #0
 8003534:	f04f 0300 	mov.w	r3, #0
 8003538:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800353c:	4659      	mov	r1, fp
 800353e:	018b      	lsls	r3, r1, #6
 8003540:	4651      	mov	r1, sl
 8003542:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003546:	4651      	mov	r1, sl
 8003548:	018a      	lsls	r2, r1, #6
 800354a:	4651      	mov	r1, sl
 800354c:	ebb2 0801 	subs.w	r8, r2, r1
 8003550:	4659      	mov	r1, fp
 8003552:	eb63 0901 	sbc.w	r9, r3, r1
 8003556:	f04f 0200 	mov.w	r2, #0
 800355a:	f04f 0300 	mov.w	r3, #0
 800355e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003562:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003566:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800356a:	4690      	mov	r8, r2
 800356c:	4699      	mov	r9, r3
 800356e:	4623      	mov	r3, r4
 8003570:	eb18 0303 	adds.w	r3, r8, r3
 8003574:	60bb      	str	r3, [r7, #8]
 8003576:	462b      	mov	r3, r5
 8003578:	eb49 0303 	adc.w	r3, r9, r3
 800357c:	60fb      	str	r3, [r7, #12]
 800357e:	f04f 0200 	mov.w	r2, #0
 8003582:	f04f 0300 	mov.w	r3, #0
 8003586:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800358a:	4629      	mov	r1, r5
 800358c:	024b      	lsls	r3, r1, #9
 800358e:	4621      	mov	r1, r4
 8003590:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003594:	4621      	mov	r1, r4
 8003596:	024a      	lsls	r2, r1, #9
 8003598:	4610      	mov	r0, r2
 800359a:	4619      	mov	r1, r3
 800359c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800359e:	2200      	movs	r2, #0
 80035a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80035a2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80035a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80035a8:	f7fc fe0e 	bl	80001c8 <__aeabi_uldivmod>
 80035ac:	4602      	mov	r2, r0
 80035ae:	460b      	mov	r3, r1
 80035b0:	4613      	mov	r3, r2
 80035b2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80035b4:	e058      	b.n	8003668 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035b6:	4b38      	ldr	r3, [pc, #224]	; (8003698 <HAL_RCC_GetSysClockFreq+0x200>)
 80035b8:	685b      	ldr	r3, [r3, #4]
 80035ba:	099b      	lsrs	r3, r3, #6
 80035bc:	2200      	movs	r2, #0
 80035be:	4618      	mov	r0, r3
 80035c0:	4611      	mov	r1, r2
 80035c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80035c6:	623b      	str	r3, [r7, #32]
 80035c8:	2300      	movs	r3, #0
 80035ca:	627b      	str	r3, [r7, #36]	; 0x24
 80035cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80035d0:	4642      	mov	r2, r8
 80035d2:	464b      	mov	r3, r9
 80035d4:	f04f 0000 	mov.w	r0, #0
 80035d8:	f04f 0100 	mov.w	r1, #0
 80035dc:	0159      	lsls	r1, r3, #5
 80035de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035e2:	0150      	lsls	r0, r2, #5
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4641      	mov	r1, r8
 80035ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80035ee:	4649      	mov	r1, r9
 80035f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80035f4:	f04f 0200 	mov.w	r2, #0
 80035f8:	f04f 0300 	mov.w	r3, #0
 80035fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003600:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003604:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003608:	ebb2 040a 	subs.w	r4, r2, sl
 800360c:	eb63 050b 	sbc.w	r5, r3, fp
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	f04f 0300 	mov.w	r3, #0
 8003618:	00eb      	lsls	r3, r5, #3
 800361a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800361e:	00e2      	lsls	r2, r4, #3
 8003620:	4614      	mov	r4, r2
 8003622:	461d      	mov	r5, r3
 8003624:	4643      	mov	r3, r8
 8003626:	18e3      	adds	r3, r4, r3
 8003628:	603b      	str	r3, [r7, #0]
 800362a:	464b      	mov	r3, r9
 800362c:	eb45 0303 	adc.w	r3, r5, r3
 8003630:	607b      	str	r3, [r7, #4]
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800363e:	4629      	mov	r1, r5
 8003640:	028b      	lsls	r3, r1, #10
 8003642:	4621      	mov	r1, r4
 8003644:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003648:	4621      	mov	r1, r4
 800364a:	028a      	lsls	r2, r1, #10
 800364c:	4610      	mov	r0, r2
 800364e:	4619      	mov	r1, r3
 8003650:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003652:	2200      	movs	r2, #0
 8003654:	61bb      	str	r3, [r7, #24]
 8003656:	61fa      	str	r2, [r7, #28]
 8003658:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800365c:	f7fc fdb4 	bl	80001c8 <__aeabi_uldivmod>
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	4613      	mov	r3, r2
 8003666:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003668:	4b0b      	ldr	r3, [pc, #44]	; (8003698 <HAL_RCC_GetSysClockFreq+0x200>)
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	0c1b      	lsrs	r3, r3, #16
 800366e:	f003 0303 	and.w	r3, r3, #3
 8003672:	3301      	adds	r3, #1
 8003674:	005b      	lsls	r3, r3, #1
 8003676:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003678:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800367a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800367c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003680:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003682:	e002      	b.n	800368a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <HAL_RCC_GetSysClockFreq+0x204>)
 8003686:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003688:	bf00      	nop
    }
  }
  return sysclockfreq;
 800368a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800368c:	4618      	mov	r0, r3
 800368e:	3750      	adds	r7, #80	; 0x50
 8003690:	46bd      	mov	sp, r7
 8003692:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003696:	bf00      	nop
 8003698:	40023800 	.word	0x40023800
 800369c:	00f42400 	.word	0x00f42400
 80036a0:	007a1200 	.word	0x007a1200

080036a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036a8:	4b03      	ldr	r3, [pc, #12]	; (80036b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80036aa:	681b      	ldr	r3, [r3, #0]
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	20000000 	.word	0x20000000

080036bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b082      	sub	sp, #8
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d101      	bne.n	80036ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036ca:	2301      	movs	r3, #1
 80036cc:	e041      	b.n	8003752 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d106      	bne.n	80036e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2200      	movs	r2, #0
 80036de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036e2:	6878      	ldr	r0, [r7, #4]
 80036e4:	f7fd f8f0 	bl	80008c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	3304      	adds	r3, #4
 80036f8:	4619      	mov	r1, r3
 80036fa:	4610      	mov	r0, r2
 80036fc:	f000 fad8 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2201      	movs	r2, #1
 8003704:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2201      	movs	r2, #1
 800370c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2201      	movs	r2, #1
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003750:	2300      	movs	r3, #0
}
 8003752:	4618      	mov	r0, r3
 8003754:	3708      	adds	r7, #8
 8003756:	46bd      	mov	sp, r7
 8003758:	bd80      	pop	{r7, pc}

0800375a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800375a:	b580      	push	{r7, lr}
 800375c:	b082      	sub	sp, #8
 800375e:	af00      	add	r7, sp, #0
 8003760:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d101      	bne.n	800376c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003768:	2301      	movs	r3, #1
 800376a:	e041      	b.n	80037f0 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003772:	b2db      	uxtb	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d106      	bne.n	8003786 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003780:	6878      	ldr	r0, [r7, #4]
 8003782:	f000 f839 	bl	80037f8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2202      	movs	r2, #2
 800378a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	3304      	adds	r3, #4
 8003796:	4619      	mov	r1, r3
 8003798:	4610      	mov	r0, r2
 800379a:	f000 fa89 	bl	8003cb0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2201      	movs	r2, #1
 80037a2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	2201      	movs	r2, #1
 80037aa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2201      	movs	r2, #1
 80037ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2201      	movs	r2, #1
 80037ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	2201      	movs	r2, #1
 80037d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	2201      	movs	r2, #1
 80037da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2201      	movs	r2, #1
 80037ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80037ee:	2300      	movs	r3, #0
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3708      	adds	r7, #8
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bd80      	pop	{r7, pc}

080037f8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003800:	bf00      	nop
 8003802:	370c      	adds	r7, #12
 8003804:	46bd      	mov	sp, r7
 8003806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380a:	4770      	bx	lr

0800380c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d109      	bne.n	8003830 <HAL_TIM_PWM_Start+0x24>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003822:	b2db      	uxtb	r3, r3
 8003824:	2b01      	cmp	r3, #1
 8003826:	bf14      	ite	ne
 8003828:	2301      	movne	r3, #1
 800382a:	2300      	moveq	r3, #0
 800382c:	b2db      	uxtb	r3, r3
 800382e:	e022      	b.n	8003876 <HAL_TIM_PWM_Start+0x6a>
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b04      	cmp	r3, #4
 8003834:	d109      	bne.n	800384a <HAL_TIM_PWM_Start+0x3e>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800383c:	b2db      	uxtb	r3, r3
 800383e:	2b01      	cmp	r3, #1
 8003840:	bf14      	ite	ne
 8003842:	2301      	movne	r3, #1
 8003844:	2300      	moveq	r3, #0
 8003846:	b2db      	uxtb	r3, r3
 8003848:	e015      	b.n	8003876 <HAL_TIM_PWM_Start+0x6a>
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b08      	cmp	r3, #8
 800384e:	d109      	bne.n	8003864 <HAL_TIM_PWM_Start+0x58>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e008      	b.n	8003876 <HAL_TIM_PWM_Start+0x6a>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800386a:	b2db      	uxtb	r3, r3
 800386c:	2b01      	cmp	r3, #1
 800386e:	bf14      	ite	ne
 8003870:	2301      	movne	r3, #1
 8003872:	2300      	moveq	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e07c      	b.n	8003978 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b00      	cmp	r3, #0
 8003882:	d104      	bne.n	800388e <HAL_TIM_PWM_Start+0x82>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2202      	movs	r2, #2
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800388c:	e013      	b.n	80038b6 <HAL_TIM_PWM_Start+0xaa>
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	2b04      	cmp	r3, #4
 8003892:	d104      	bne.n	800389e <HAL_TIM_PWM_Start+0x92>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	2202      	movs	r2, #2
 8003898:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800389c:	e00b      	b.n	80038b6 <HAL_TIM_PWM_Start+0xaa>
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	2b08      	cmp	r3, #8
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start+0xa2>
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2202      	movs	r2, #2
 80038a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038ac:	e003      	b.n	80038b6 <HAL_TIM_PWM_Start+0xaa>
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2202      	movs	r2, #2
 80038b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	2201      	movs	r2, #1
 80038bc:	6839      	ldr	r1, [r7, #0]
 80038be:	4618      	mov	r0, r3
 80038c0:	f000 fce0 	bl	8004284 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a2d      	ldr	r2, [pc, #180]	; (8003980 <HAL_TIM_PWM_Start+0x174>)
 80038ca:	4293      	cmp	r3, r2
 80038cc:	d004      	beq.n	80038d8 <HAL_TIM_PWM_Start+0xcc>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4a2c      	ldr	r2, [pc, #176]	; (8003984 <HAL_TIM_PWM_Start+0x178>)
 80038d4:	4293      	cmp	r3, r2
 80038d6:	d101      	bne.n	80038dc <HAL_TIM_PWM_Start+0xd0>
 80038d8:	2301      	movs	r3, #1
 80038da:	e000      	b.n	80038de <HAL_TIM_PWM_Start+0xd2>
 80038dc:	2300      	movs	r3, #0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d007      	beq.n	80038f2 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80038f0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a22      	ldr	r2, [pc, #136]	; (8003980 <HAL_TIM_PWM_Start+0x174>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d022      	beq.n	8003942 <HAL_TIM_PWM_Start+0x136>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d01d      	beq.n	8003942 <HAL_TIM_PWM_Start+0x136>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	4a1f      	ldr	r2, [pc, #124]	; (8003988 <HAL_TIM_PWM_Start+0x17c>)
 800390c:	4293      	cmp	r3, r2
 800390e:	d018      	beq.n	8003942 <HAL_TIM_PWM_Start+0x136>
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_TIM_PWM_Start+0x180>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d013      	beq.n	8003942 <HAL_TIM_PWM_Start+0x136>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	4a1c      	ldr	r2, [pc, #112]	; (8003990 <HAL_TIM_PWM_Start+0x184>)
 8003920:	4293      	cmp	r3, r2
 8003922:	d00e      	beq.n	8003942 <HAL_TIM_PWM_Start+0x136>
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_TIM_PWM_Start+0x178>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d009      	beq.n	8003942 <HAL_TIM_PWM_Start+0x136>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a18      	ldr	r2, [pc, #96]	; (8003994 <HAL_TIM_PWM_Start+0x188>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d004      	beq.n	8003942 <HAL_TIM_PWM_Start+0x136>
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_TIM_PWM_Start+0x18c>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d111      	bne.n	8003966 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	f003 0307 	and.w	r3, r3, #7
 800394c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	2b06      	cmp	r3, #6
 8003952:	d010      	beq.n	8003976 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	681a      	ldr	r2, [r3, #0]
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f042 0201 	orr.w	r2, r2, #1
 8003962:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003964:	e007      	b.n	8003976 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f042 0201 	orr.w	r2, r2, #1
 8003974:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003976:	2300      	movs	r3, #0
}
 8003978:	4618      	mov	r0, r3
 800397a:	3710      	adds	r7, #16
 800397c:	46bd      	mov	sp, r7
 800397e:	bd80      	pop	{r7, pc}
 8003980:	40010000 	.word	0x40010000
 8003984:	40010400 	.word	0x40010400
 8003988:	40000400 	.word	0x40000400
 800398c:	40000800 	.word	0x40000800
 8003990:	40000c00 	.word	0x40000c00
 8003994:	40014000 	.word	0x40014000
 8003998:	40001800 	.word	0x40001800

0800399c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b086      	sub	sp, #24
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	60f8      	str	r0, [r7, #12]
 80039a4:	60b9      	str	r1, [r7, #8]
 80039a6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80039a8:	2300      	movs	r3, #0
 80039aa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d101      	bne.n	80039ba <HAL_TIM_PWM_ConfigChannel+0x1e>
 80039b6:	2302      	movs	r3, #2
 80039b8:	e0ae      	b.n	8003b18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	2201      	movs	r2, #1
 80039be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2b0c      	cmp	r3, #12
 80039c6:	f200 809f 	bhi.w	8003b08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80039ca:	a201      	add	r2, pc, #4	; (adr r2, 80039d0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80039cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039d0:	08003a05 	.word	0x08003a05
 80039d4:	08003b09 	.word	0x08003b09
 80039d8:	08003b09 	.word	0x08003b09
 80039dc:	08003b09 	.word	0x08003b09
 80039e0:	08003a45 	.word	0x08003a45
 80039e4:	08003b09 	.word	0x08003b09
 80039e8:	08003b09 	.word	0x08003b09
 80039ec:	08003b09 	.word	0x08003b09
 80039f0:	08003a87 	.word	0x08003a87
 80039f4:	08003b09 	.word	0x08003b09
 80039f8:	08003b09 	.word	0x08003b09
 80039fc:	08003b09 	.word	0x08003b09
 8003a00:	08003ac7 	.word	0x08003ac7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	68b9      	ldr	r1, [r7, #8]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f000 f9f0 	bl	8003df0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	699a      	ldr	r2, [r3, #24]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f042 0208 	orr.w	r2, r2, #8
 8003a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	699a      	ldr	r2, [r3, #24]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f022 0204 	bic.w	r2, r2, #4
 8003a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	6999      	ldr	r1, [r3, #24]
 8003a36:	68bb      	ldr	r3, [r7, #8]
 8003a38:	691a      	ldr	r2, [r3, #16]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	430a      	orrs	r2, r1
 8003a40:	619a      	str	r2, [r3, #24]
      break;
 8003a42:	e064      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68b9      	ldr	r1, [r7, #8]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fa40 	bl	8003ed0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	699a      	ldr	r2, [r3, #24]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	699a      	ldr	r2, [r3, #24]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	6999      	ldr	r1, [r3, #24]
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	691b      	ldr	r3, [r3, #16]
 8003a7a:	021a      	lsls	r2, r3, #8
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	619a      	str	r2, [r3, #24]
      break;
 8003a84:	e043      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	68b9      	ldr	r1, [r7, #8]
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 fa95 	bl	8003fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	69da      	ldr	r2, [r3, #28]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f042 0208 	orr.w	r2, r2, #8
 8003aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69da      	ldr	r2, [r3, #28]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f022 0204 	bic.w	r2, r2, #4
 8003ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	69d9      	ldr	r1, [r3, #28]
 8003ab8:	68bb      	ldr	r3, [r7, #8]
 8003aba:	691a      	ldr	r2, [r3, #16]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	61da      	str	r2, [r3, #28]
      break;
 8003ac4:	e023      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	68b9      	ldr	r1, [r7, #8]
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 fae9 	bl	80040a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69da      	ldr	r2, [r3, #28]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ae0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	69da      	ldr	r2, [r3, #28]
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003af0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	69d9      	ldr	r1, [r3, #28]
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	691b      	ldr	r3, [r3, #16]
 8003afc:	021a      	lsls	r2, r3, #8
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	61da      	str	r2, [r3, #28]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003b16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	3718      	adds	r7, #24
 8003b1c:	46bd      	mov	sp, r7
 8003b1e:	bd80      	pop	{r7, pc}

08003b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b084      	sub	sp, #16
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d101      	bne.n	8003b3c <HAL_TIM_ConfigClockSource+0x1c>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	e0b4      	b.n	8003ca6 <HAL_TIM_ConfigClockSource+0x186>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	689b      	ldr	r3, [r3, #8]
 8003b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b5c:	68bb      	ldr	r3, [r7, #8]
 8003b5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	68ba      	ldr	r2, [r7, #8]
 8003b6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b74:	d03e      	beq.n	8003bf4 <HAL_TIM_ConfigClockSource+0xd4>
 8003b76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b7a:	f200 8087 	bhi.w	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003b7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b82:	f000 8086 	beq.w	8003c92 <HAL_TIM_ConfigClockSource+0x172>
 8003b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b8a:	d87f      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003b8c:	2b70      	cmp	r3, #112	; 0x70
 8003b8e:	d01a      	beq.n	8003bc6 <HAL_TIM_ConfigClockSource+0xa6>
 8003b90:	2b70      	cmp	r3, #112	; 0x70
 8003b92:	d87b      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003b94:	2b60      	cmp	r3, #96	; 0x60
 8003b96:	d050      	beq.n	8003c3a <HAL_TIM_ConfigClockSource+0x11a>
 8003b98:	2b60      	cmp	r3, #96	; 0x60
 8003b9a:	d877      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003b9c:	2b50      	cmp	r3, #80	; 0x50
 8003b9e:	d03c      	beq.n	8003c1a <HAL_TIM_ConfigClockSource+0xfa>
 8003ba0:	2b50      	cmp	r3, #80	; 0x50
 8003ba2:	d873      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003ba4:	2b40      	cmp	r3, #64	; 0x40
 8003ba6:	d058      	beq.n	8003c5a <HAL_TIM_ConfigClockSource+0x13a>
 8003ba8:	2b40      	cmp	r3, #64	; 0x40
 8003baa:	d86f      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003bac:	2b30      	cmp	r3, #48	; 0x30
 8003bae:	d064      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15a>
 8003bb0:	2b30      	cmp	r3, #48	; 0x30
 8003bb2:	d86b      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003bb4:	2b20      	cmp	r3, #32
 8003bb6:	d060      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15a>
 8003bb8:	2b20      	cmp	r3, #32
 8003bba:	d867      	bhi.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d05c      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15a>
 8003bc0:	2b10      	cmp	r3, #16
 8003bc2:	d05a      	beq.n	8003c7a <HAL_TIM_ConfigClockSource+0x15a>
 8003bc4:	e062      	b.n	8003c8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6818      	ldr	r0, [r3, #0]
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	6899      	ldr	r1, [r3, #8]
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	68db      	ldr	r3, [r3, #12]
 8003bd6:	f000 fb35 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	689b      	ldr	r3, [r3, #8]
 8003be0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003be8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	609a      	str	r2, [r3, #8]
      break;
 8003bf2:	e04f      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6818      	ldr	r0, [r3, #0]
 8003bf8:	683b      	ldr	r3, [r7, #0]
 8003bfa:	6899      	ldr	r1, [r3, #8]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	68db      	ldr	r3, [r3, #12]
 8003c04:	f000 fb1e 	bl	8004244 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	689a      	ldr	r2, [r3, #8]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c16:	609a      	str	r2, [r3, #8]
      break;
 8003c18:	e03c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6818      	ldr	r0, [r3, #0]
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	6859      	ldr	r1, [r3, #4]
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	68db      	ldr	r3, [r3, #12]
 8003c26:	461a      	mov	r2, r3
 8003c28:	f000 fa92 	bl	8004150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2150      	movs	r1, #80	; 0x50
 8003c32:	4618      	mov	r0, r3
 8003c34:	f000 faeb 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003c38:	e02c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	6818      	ldr	r0, [r3, #0]
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	6859      	ldr	r1, [r3, #4]
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	68db      	ldr	r3, [r3, #12]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f000 fab1 	bl	80041ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	2160      	movs	r1, #96	; 0x60
 8003c52:	4618      	mov	r0, r3
 8003c54:	f000 fadb 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003c58:	e01c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6818      	ldr	r0, [r3, #0]
 8003c5e:	683b      	ldr	r3, [r7, #0]
 8003c60:	6859      	ldr	r1, [r3, #4]
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f000 fa72 	bl	8004150 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	2140      	movs	r1, #64	; 0x40
 8003c72:	4618      	mov	r0, r3
 8003c74:	f000 facb 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003c78:	e00c      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4619      	mov	r1, r3
 8003c84:	4610      	mov	r0, r2
 8003c86:	f000 fac2 	bl	800420e <TIM_ITRx_SetConfig>
      break;
 8003c8a:	e003      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c90:	e000      	b.n	8003c94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2201      	movs	r2, #1
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
	...

08003cb0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
 8003cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a40      	ldr	r2, [pc, #256]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d013      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cce:	d00f      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	4a3d      	ldr	r2, [pc, #244]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003cd4:	4293      	cmp	r3, r2
 8003cd6:	d00b      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	4a3c      	ldr	r2, [pc, #240]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d007      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	4a3b      	ldr	r2, [pc, #236]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d003      	beq.n	8003cf0 <TIM_Base_SetConfig+0x40>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	4a3a      	ldr	r2, [pc, #232]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d108      	bne.n	8003d02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a2f      	ldr	r2, [pc, #188]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d02b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d10:	d027      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <TIM_Base_SetConfig+0x118>)
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d023      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a2b      	ldr	r2, [pc, #172]	; (8003dcc <TIM_Base_SetConfig+0x11c>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d01f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	4a2a      	ldr	r2, [pc, #168]	; (8003dd0 <TIM_Base_SetConfig+0x120>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d01b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a29      	ldr	r2, [pc, #164]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d017      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	4a28      	ldr	r2, [pc, #160]	; (8003dd8 <TIM_Base_SetConfig+0x128>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d013      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a27      	ldr	r2, [pc, #156]	; (8003ddc <TIM_Base_SetConfig+0x12c>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d00f      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a26      	ldr	r2, [pc, #152]	; (8003de0 <TIM_Base_SetConfig+0x130>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00b      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a25      	ldr	r2, [pc, #148]	; (8003de4 <TIM_Base_SetConfig+0x134>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d007      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a24      	ldr	r2, [pc, #144]	; (8003de8 <TIM_Base_SetConfig+0x138>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d003      	beq.n	8003d62 <TIM_Base_SetConfig+0xb2>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a23      	ldr	r2, [pc, #140]	; (8003dec <TIM_Base_SetConfig+0x13c>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d108      	bne.n	8003d74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	68db      	ldr	r3, [r3, #12]
 8003d6e:	68fa      	ldr	r2, [r7, #12]
 8003d70:	4313      	orrs	r3, r2
 8003d72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	4313      	orrs	r3, r2
 8003d80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	68fa      	ldr	r2, [r7, #12]
 8003d86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681a      	ldr	r2, [r3, #0]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <TIM_Base_SetConfig+0x114>)
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d003      	beq.n	8003da8 <TIM_Base_SetConfig+0xf8>
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a0c      	ldr	r2, [pc, #48]	; (8003dd4 <TIM_Base_SetConfig+0x124>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40010400 	.word	0x40010400
 8003dd8:	40014000 	.word	0x40014000
 8003ddc:	40014400 	.word	0x40014400
 8003de0:	40014800 	.word	0x40014800
 8003de4:	40001800 	.word	0x40001800
 8003de8:	40001c00 	.word	0x40001c00
 8003dec:	40002000 	.word	0x40002000

08003df0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b087      	sub	sp, #28
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
 8003df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	685b      	ldr	r3, [r3, #4]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f023 0303 	bic.w	r3, r3, #3
 8003e26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	f023 0302 	bic.w	r3, r3, #2
 8003e38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	697a      	ldr	r2, [r7, #20]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	4a20      	ldr	r2, [pc, #128]	; (8003ec8 <TIM_OC1_SetConfig+0xd8>)
 8003e48:	4293      	cmp	r3, r2
 8003e4a:	d003      	beq.n	8003e54 <TIM_OC1_SetConfig+0x64>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	4a1f      	ldr	r2, [pc, #124]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e50:	4293      	cmp	r3, r2
 8003e52:	d10c      	bne.n	8003e6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f023 0308 	bic.w	r3, r3, #8
 8003e5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	697a      	ldr	r2, [r7, #20]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003e66:	697b      	ldr	r3, [r7, #20]
 8003e68:	f023 0304 	bic.w	r3, r3, #4
 8003e6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	4a15      	ldr	r2, [pc, #84]	; (8003ec8 <TIM_OC1_SetConfig+0xd8>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d003      	beq.n	8003e7e <TIM_OC1_SetConfig+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	4a14      	ldr	r2, [pc, #80]	; (8003ecc <TIM_OC1_SetConfig+0xdc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d111      	bne.n	8003ea2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003e8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	695b      	ldr	r3, [r3, #20]
 8003e92:	693a      	ldr	r2, [r7, #16]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e98:	683b      	ldr	r3, [r7, #0]
 8003e9a:	699b      	ldr	r3, [r3, #24]
 8003e9c:	693a      	ldr	r2, [r7, #16]
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	693a      	ldr	r2, [r7, #16]
 8003ea6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	685a      	ldr	r2, [r3, #4]
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	697a      	ldr	r2, [r7, #20]
 8003eba:	621a      	str	r2, [r3, #32]
}
 8003ebc:	bf00      	nop
 8003ebe:	371c      	adds	r7, #28
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	40010000 	.word	0x40010000
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b087      	sub	sp, #28
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6a1b      	ldr	r3, [r3, #32]
 8003ede:	f023 0210 	bic.w	r2, r3, #16
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a1b      	ldr	r3, [r3, #32]
 8003eea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	685b      	ldr	r3, [r3, #4]
 8003ef0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	699b      	ldr	r3, [r3, #24]
 8003ef6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003efe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	021b      	lsls	r3, r3, #8
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f023 0320 	bic.w	r3, r3, #32
 8003f1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	689b      	ldr	r3, [r3, #8]
 8003f20:	011b      	lsls	r3, r3, #4
 8003f22:	697a      	ldr	r2, [r7, #20]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <TIM_OC2_SetConfig+0xe4>)
 8003f2c:	4293      	cmp	r3, r2
 8003f2e:	d003      	beq.n	8003f38 <TIM_OC2_SetConfig+0x68>
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	4a21      	ldr	r2, [pc, #132]	; (8003fb8 <TIM_OC2_SetConfig+0xe8>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d10d      	bne.n	8003f54 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003f3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	011b      	lsls	r3, r3, #4
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	4a17      	ldr	r2, [pc, #92]	; (8003fb4 <TIM_OC2_SetConfig+0xe4>)
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d003      	beq.n	8003f64 <TIM_OC2_SetConfig+0x94>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <TIM_OC2_SetConfig+0xe8>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d113      	bne.n	8003f8c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	695b      	ldr	r3, [r3, #20]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	699b      	ldr	r3, [r3, #24]
 8003f84:	009b      	lsls	r3, r3, #2
 8003f86:	693a      	ldr	r2, [r7, #16]
 8003f88:	4313      	orrs	r3, r2
 8003f8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	693a      	ldr	r2, [r7, #16]
 8003f90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	68fa      	ldr	r2, [r7, #12]
 8003f96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	697a      	ldr	r2, [r7, #20]
 8003fa4:	621a      	str	r2, [r3, #32]
}
 8003fa6:	bf00      	nop
 8003fa8:	371c      	adds	r7, #28
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	40010000 	.word	0x40010000
 8003fb8:	40010400 	.word	0x40010400

08003fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b087      	sub	sp, #28
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
 8003fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6a1b      	ldr	r3, [r3, #32]
 8003fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6a1b      	ldr	r3, [r3, #32]
 8003fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	685b      	ldr	r3, [r3, #4]
 8003fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f023 0303 	bic.w	r3, r3, #3
 8003ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	68fa      	ldr	r2, [r7, #12]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	021b      	lsls	r3, r3, #8
 800400c:	697a      	ldr	r2, [r7, #20]
 800400e:	4313      	orrs	r3, r2
 8004010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a21      	ldr	r2, [pc, #132]	; (800409c <TIM_OC3_SetConfig+0xe0>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d003      	beq.n	8004022 <TIM_OC3_SetConfig+0x66>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a20      	ldr	r2, [pc, #128]	; (80040a0 <TIM_OC3_SetConfig+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d10d      	bne.n	800403e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004022:	697b      	ldr	r3, [r7, #20]
 8004024:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004028:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800402a:	683b      	ldr	r3, [r7, #0]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	021b      	lsls	r3, r3, #8
 8004030:	697a      	ldr	r2, [r7, #20]
 8004032:	4313      	orrs	r3, r2
 8004034:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800403c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a16      	ldr	r2, [pc, #88]	; (800409c <TIM_OC3_SetConfig+0xe0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d003      	beq.n	800404e <TIM_OC3_SetConfig+0x92>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a15      	ldr	r2, [pc, #84]	; (80040a0 <TIM_OC3_SetConfig+0xe4>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d113      	bne.n	8004076 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800404e:	693b      	ldr	r3, [r7, #16]
 8004050:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004054:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800405c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	011b      	lsls	r3, r3, #4
 8004064:	693a      	ldr	r2, [r7, #16]
 8004066:	4313      	orrs	r3, r2
 8004068:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800406a:	683b      	ldr	r3, [r7, #0]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	693a      	ldr	r2, [r7, #16]
 8004072:	4313      	orrs	r3, r2
 8004074:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	697a      	ldr	r2, [r7, #20]
 800408e:	621a      	str	r2, [r3, #32]
}
 8004090:	bf00      	nop
 8004092:	371c      	adds	r7, #28
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr
 800409c:	40010000 	.word	0x40010000
 80040a0:	40010400 	.word	0x40010400

080040a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b087      	sub	sp, #28
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6a1b      	ldr	r3, [r3, #32]
 80040b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	69db      	ldr	r3, [r3, #28]
 80040ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80040d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80040da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	021b      	lsls	r3, r3, #8
 80040e2:	68fa      	ldr	r2, [r7, #12]
 80040e4:	4313      	orrs	r3, r2
 80040e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80040ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	689b      	ldr	r3, [r3, #8]
 80040f4:	031b      	lsls	r3, r3, #12
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a12      	ldr	r2, [pc, #72]	; (8004148 <TIM_OC4_SetConfig+0xa4>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d003      	beq.n	800410c <TIM_OC4_SetConfig+0x68>
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	4a11      	ldr	r2, [pc, #68]	; (800414c <TIM_OC4_SetConfig+0xa8>)
 8004108:	4293      	cmp	r3, r2
 800410a:	d109      	bne.n	8004120 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800410c:	697b      	ldr	r3, [r7, #20]
 800410e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004112:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	695b      	ldr	r3, [r3, #20]
 8004118:	019b      	lsls	r3, r3, #6
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	4313      	orrs	r3, r2
 800411e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	697a      	ldr	r2, [r7, #20]
 8004124:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	685a      	ldr	r2, [r3, #4]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	621a      	str	r2, [r3, #32]
}
 800413a:	bf00      	nop
 800413c:	371c      	adds	r7, #28
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	40010000 	.word	0x40010000
 800414c:	40010400 	.word	0x40010400

08004150 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004150:	b480      	push	{r7}
 8004152:	b087      	sub	sp, #28
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a1b      	ldr	r3, [r3, #32]
 8004160:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	f023 0201 	bic.w	r2, r3, #1
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	699b      	ldr	r3, [r3, #24]
 8004172:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004174:	693b      	ldr	r3, [r7, #16]
 8004176:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800417a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	011b      	lsls	r3, r3, #4
 8004180:	693a      	ldr	r2, [r7, #16]
 8004182:	4313      	orrs	r3, r2
 8004184:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004186:	697b      	ldr	r3, [r7, #20]
 8004188:	f023 030a 	bic.w	r3, r3, #10
 800418c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800418e:	697a      	ldr	r2, [r7, #20]
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	4313      	orrs	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	693a      	ldr	r2, [r7, #16]
 800419a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	697a      	ldr	r2, [r7, #20]
 80041a0:	621a      	str	r2, [r3, #32]
}
 80041a2:	bf00      	nop
 80041a4:	371c      	adds	r7, #28
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr

080041ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b087      	sub	sp, #28
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	60f8      	str	r0, [r7, #12]
 80041b6:	60b9      	str	r1, [r7, #8]
 80041b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
 80041be:	f023 0210 	bic.w	r2, r3, #16
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	6a1b      	ldr	r3, [r3, #32]
 80041d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80041d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	031b      	lsls	r3, r3, #12
 80041de:	697a      	ldr	r2, [r7, #20]
 80041e0:	4313      	orrs	r3, r2
 80041e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041e4:	693b      	ldr	r3, [r7, #16]
 80041e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80041ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	693a      	ldr	r2, [r7, #16]
 80041f2:	4313      	orrs	r3, r2
 80041f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	697a      	ldr	r2, [r7, #20]
 80041fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	693a      	ldr	r2, [r7, #16]
 8004200:	621a      	str	r2, [r3, #32]
}
 8004202:	bf00      	nop
 8004204:	371c      	adds	r7, #28
 8004206:	46bd      	mov	sp, r7
 8004208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420c:	4770      	bx	lr

0800420e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800420e:	b480      	push	{r7}
 8004210:	b085      	sub	sp, #20
 8004212:	af00      	add	r7, sp, #0
 8004214:	6078      	str	r0, [r7, #4]
 8004216:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004224:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4313      	orrs	r3, r2
 800422c:	f043 0307 	orr.w	r3, r3, #7
 8004230:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	68fa      	ldr	r2, [r7, #12]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	bf00      	nop
 800423a:	3714      	adds	r7, #20
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004244:	b480      	push	{r7}
 8004246:	b087      	sub	sp, #28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004258:	697b      	ldr	r3, [r7, #20]
 800425a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800425e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	021a      	lsls	r2, r3, #8
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	431a      	orrs	r2, r3
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	4313      	orrs	r3, r2
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	4313      	orrs	r3, r2
 8004270:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	697a      	ldr	r2, [r7, #20]
 8004276:	609a      	str	r2, [r3, #8]
}
 8004278:	bf00      	nop
 800427a:	371c      	adds	r7, #28
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr

08004284 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004290:	68bb      	ldr	r3, [r7, #8]
 8004292:	f003 031f 	and.w	r3, r3, #31
 8004296:	2201      	movs	r2, #1
 8004298:	fa02 f303 	lsl.w	r3, r2, r3
 800429c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	6a1a      	ldr	r2, [r3, #32]
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	43db      	mvns	r3, r3
 80042a6:	401a      	ands	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	6a1a      	ldr	r2, [r3, #32]
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f003 031f 	and.w	r3, r3, #31
 80042b6:	6879      	ldr	r1, [r7, #4]
 80042b8:	fa01 f303 	lsl.w	r3, r1, r3
 80042bc:	431a      	orrs	r2, r3
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	621a      	str	r2, [r3, #32]
}
 80042c2:	bf00      	nop
 80042c4:	371c      	adds	r7, #28
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d101      	bne.n	80042e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042e4:	2302      	movs	r3, #2
 80042e6:	e05a      	b.n	800439e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2201      	movs	r2, #1
 80042ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2202      	movs	r2, #2
 80042f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800430e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	4313      	orrs	r3, r2
 8004318:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	68fa      	ldr	r2, [r7, #12]
 8004320:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a21      	ldr	r2, [pc, #132]	; (80043ac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d022      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004334:	d01d      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a1d      	ldr	r2, [pc, #116]	; (80043b0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d018      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d013      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	4a1a      	ldr	r2, [pc, #104]	; (80043b8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00e      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	4a18      	ldr	r2, [pc, #96]	; (80043bc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d009      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	4a17      	ldr	r2, [pc, #92]	; (80043c0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d004      	beq.n	8004372 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	4a15      	ldr	r2, [pc, #84]	; (80043c4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800436e:	4293      	cmp	r3, r2
 8004370:	d10c      	bne.n	800438c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004378:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	4313      	orrs	r3, r2
 8004382:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	68ba      	ldr	r2, [r7, #8]
 800438a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2201      	movs	r2, #1
 8004390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800439c:	2300      	movs	r3, #0
}
 800439e:	4618      	mov	r0, r3
 80043a0:	3714      	adds	r7, #20
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
 80043aa:	bf00      	nop
 80043ac:	40010000 	.word	0x40010000
 80043b0:	40000400 	.word	0x40000400
 80043b4:	40000800 	.word	0x40000800
 80043b8:	40000c00 	.word	0x40000c00
 80043bc:	40010400 	.word	0x40010400
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40001800 	.word	0x40001800

080043c8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80043c8:	b084      	sub	sp, #16
 80043ca:	b580      	push	{r7, lr}
 80043cc:	b084      	sub	sp, #16
 80043ce:	af00      	add	r7, sp, #0
 80043d0:	6078      	str	r0, [r7, #4]
 80043d2:	f107 001c 	add.w	r0, r7, #28
 80043d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80043da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d122      	bne.n	8004426 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043e4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	68db      	ldr	r3, [r3, #12]
 80043f0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80043f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80043f8:	687a      	ldr	r2, [r7, #4]
 80043fa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	68db      	ldr	r3, [r3, #12]
 8004400:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800440a:	2b01      	cmp	r3, #1
 800440c:	d105      	bne.n	800441a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68db      	ldr	r3, [r3, #12]
 8004412:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	f001 fbee 	bl	8005bfc <USB_CoreReset>
 8004420:	4603      	mov	r3, r0
 8004422:	73fb      	strb	r3, [r7, #15]
 8004424:	e01a      	b.n	800445c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68db      	ldr	r3, [r3, #12]
 800442a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f001 fbe2 	bl	8005bfc <USB_CoreReset>
 8004438:	4603      	mov	r3, r0
 800443a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800443c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004446:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	639a      	str	r2, [r3, #56]	; 0x38
 800444e:	e005      	b.n	800445c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004454:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800445c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800445e:	2b01      	cmp	r3, #1
 8004460:	d10b      	bne.n	800447a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f043 0206 	orr.w	r2, r3, #6
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800447a:	7bfb      	ldrb	r3, [r7, #15]
}
 800447c:	4618      	mov	r0, r3
 800447e:	3710      	adds	r7, #16
 8004480:	46bd      	mov	sp, r7
 8004482:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004486:	b004      	add	sp, #16
 8004488:	4770      	bx	lr
	...

0800448c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800448c:	b480      	push	{r7}
 800448e:	b087      	sub	sp, #28
 8004490:	af00      	add	r7, sp, #0
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	60b9      	str	r1, [r7, #8]
 8004496:	4613      	mov	r3, r2
 8004498:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800449a:	79fb      	ldrb	r3, [r7, #7]
 800449c:	2b02      	cmp	r3, #2
 800449e:	d165      	bne.n	800456c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80044a0:	68bb      	ldr	r3, [r7, #8]
 80044a2:	4a41      	ldr	r2, [pc, #260]	; (80045a8 <USB_SetTurnaroundTime+0x11c>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d906      	bls.n	80044b6 <USB_SetTurnaroundTime+0x2a>
 80044a8:	68bb      	ldr	r3, [r7, #8]
 80044aa:	4a40      	ldr	r2, [pc, #256]	; (80045ac <USB_SetTurnaroundTime+0x120>)
 80044ac:	4293      	cmp	r3, r2
 80044ae:	d202      	bcs.n	80044b6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80044b0:	230f      	movs	r3, #15
 80044b2:	617b      	str	r3, [r7, #20]
 80044b4:	e062      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4a3c      	ldr	r2, [pc, #240]	; (80045ac <USB_SetTurnaroundTime+0x120>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d306      	bcc.n	80044cc <USB_SetTurnaroundTime+0x40>
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	4a3b      	ldr	r2, [pc, #236]	; (80045b0 <USB_SetTurnaroundTime+0x124>)
 80044c2:	4293      	cmp	r3, r2
 80044c4:	d202      	bcs.n	80044cc <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80044c6:	230e      	movs	r3, #14
 80044c8:	617b      	str	r3, [r7, #20]
 80044ca:	e057      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	4a38      	ldr	r2, [pc, #224]	; (80045b0 <USB_SetTurnaroundTime+0x124>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d306      	bcc.n	80044e2 <USB_SetTurnaroundTime+0x56>
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	4a37      	ldr	r2, [pc, #220]	; (80045b4 <USB_SetTurnaroundTime+0x128>)
 80044d8:	4293      	cmp	r3, r2
 80044da:	d202      	bcs.n	80044e2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80044dc:	230d      	movs	r3, #13
 80044de:	617b      	str	r3, [r7, #20]
 80044e0:	e04c      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	4a33      	ldr	r2, [pc, #204]	; (80045b4 <USB_SetTurnaroundTime+0x128>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d306      	bcc.n	80044f8 <USB_SetTurnaroundTime+0x6c>
 80044ea:	68bb      	ldr	r3, [r7, #8]
 80044ec:	4a32      	ldr	r2, [pc, #200]	; (80045b8 <USB_SetTurnaroundTime+0x12c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d802      	bhi.n	80044f8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80044f2:	230c      	movs	r3, #12
 80044f4:	617b      	str	r3, [r7, #20]
 80044f6:	e041      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	4a2f      	ldr	r2, [pc, #188]	; (80045b8 <USB_SetTurnaroundTime+0x12c>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d906      	bls.n	800450e <USB_SetTurnaroundTime+0x82>
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <USB_SetTurnaroundTime+0x130>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d802      	bhi.n	800450e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004508:	230b      	movs	r3, #11
 800450a:	617b      	str	r3, [r7, #20]
 800450c:	e036      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800450e:	68bb      	ldr	r3, [r7, #8]
 8004510:	4a2a      	ldr	r2, [pc, #168]	; (80045bc <USB_SetTurnaroundTime+0x130>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d906      	bls.n	8004524 <USB_SetTurnaroundTime+0x98>
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	4a29      	ldr	r2, [pc, #164]	; (80045c0 <USB_SetTurnaroundTime+0x134>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d802      	bhi.n	8004524 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800451e:	230a      	movs	r3, #10
 8004520:	617b      	str	r3, [r7, #20]
 8004522:	e02b      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	4a26      	ldr	r2, [pc, #152]	; (80045c0 <USB_SetTurnaroundTime+0x134>)
 8004528:	4293      	cmp	r3, r2
 800452a:	d906      	bls.n	800453a <USB_SetTurnaroundTime+0xae>
 800452c:	68bb      	ldr	r3, [r7, #8]
 800452e:	4a25      	ldr	r2, [pc, #148]	; (80045c4 <USB_SetTurnaroundTime+0x138>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d202      	bcs.n	800453a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004534:	2309      	movs	r3, #9
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e020      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	4a21      	ldr	r2, [pc, #132]	; (80045c4 <USB_SetTurnaroundTime+0x138>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d306      	bcc.n	8004550 <USB_SetTurnaroundTime+0xc4>
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	4a20      	ldr	r2, [pc, #128]	; (80045c8 <USB_SetTurnaroundTime+0x13c>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d802      	bhi.n	8004550 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800454a:	2308      	movs	r3, #8
 800454c:	617b      	str	r3, [r7, #20]
 800454e:	e015      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4a1d      	ldr	r2, [pc, #116]	; (80045c8 <USB_SetTurnaroundTime+0x13c>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d906      	bls.n	8004566 <USB_SetTurnaroundTime+0xda>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	4a1c      	ldr	r2, [pc, #112]	; (80045cc <USB_SetTurnaroundTime+0x140>)
 800455c:	4293      	cmp	r3, r2
 800455e:	d202      	bcs.n	8004566 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004560:	2307      	movs	r3, #7
 8004562:	617b      	str	r3, [r7, #20]
 8004564:	e00a      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004566:	2306      	movs	r3, #6
 8004568:	617b      	str	r3, [r7, #20]
 800456a:	e007      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800456c:	79fb      	ldrb	r3, [r7, #7]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d102      	bne.n	8004578 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004572:	2309      	movs	r3, #9
 8004574:	617b      	str	r3, [r7, #20]
 8004576:	e001      	b.n	800457c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004578:	2309      	movs	r3, #9
 800457a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	68db      	ldr	r3, [r3, #12]
 8004580:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	697b      	ldr	r3, [r7, #20]
 800458e:	029b      	lsls	r3, r3, #10
 8004590:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004594:	431a      	orrs	r2, r3
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800459a:	2300      	movs	r3, #0
}
 800459c:	4618      	mov	r0, r3
 800459e:	371c      	adds	r7, #28
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr
 80045a8:	00d8acbf 	.word	0x00d8acbf
 80045ac:	00e4e1c0 	.word	0x00e4e1c0
 80045b0:	00f42400 	.word	0x00f42400
 80045b4:	01067380 	.word	0x01067380
 80045b8:	011a499f 	.word	0x011a499f
 80045bc:	01312cff 	.word	0x01312cff
 80045c0:	014ca43f 	.word	0x014ca43f
 80045c4:	016e3600 	.word	0x016e3600
 80045c8:	01a6ab1f 	.word	0x01a6ab1f
 80045cc:	01e84800 	.word	0x01e84800

080045d0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	f043 0201 	orr.w	r2, r3, #1
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	370c      	adds	r7, #12
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004606:	2300      	movs	r3, #0
}
 8004608:	4618      	mov	r0, r3
 800460a:	370c      	adds	r7, #12
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	460b      	mov	r3, r1
 800461e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004620:	2300      	movs	r3, #0
 8004622:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004630:	78fb      	ldrb	r3, [r7, #3]
 8004632:	2b01      	cmp	r3, #1
 8004634:	d115      	bne.n	8004662 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68db      	ldr	r3, [r3, #12]
 800463a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004642:	2001      	movs	r0, #1
 8004644:	f7fc fa7a 	bl	8000b3c <HAL_Delay>
      ms++;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	3301      	adds	r3, #1
 800464c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f001 fa45 	bl	8005ade <USB_GetMode>
 8004654:	4603      	mov	r3, r0
 8004656:	2b01      	cmp	r3, #1
 8004658:	d01e      	beq.n	8004698 <USB_SetCurrentMode+0x84>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b31      	cmp	r3, #49	; 0x31
 800465e:	d9f0      	bls.n	8004642 <USB_SetCurrentMode+0x2e>
 8004660:	e01a      	b.n	8004698 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004662:	78fb      	ldrb	r3, [r7, #3]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d115      	bne.n	8004694 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004674:	2001      	movs	r0, #1
 8004676:	f7fc fa61 	bl	8000b3c <HAL_Delay>
      ms++;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	3301      	adds	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004680:	6878      	ldr	r0, [r7, #4]
 8004682:	f001 fa2c 	bl	8005ade <USB_GetMode>
 8004686:	4603      	mov	r3, r0
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <USB_SetCurrentMode+0x84>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	2b31      	cmp	r3, #49	; 0x31
 8004690:	d9f0      	bls.n	8004674 <USB_SetCurrentMode+0x60>
 8004692:	e001      	b.n	8004698 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004694:	2301      	movs	r3, #1
 8004696:	e005      	b.n	80046a4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2b32      	cmp	r3, #50	; 0x32
 800469c:	d101      	bne.n	80046a2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}

080046ac <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80046ac:	b084      	sub	sp, #16
 80046ae:	b580      	push	{r7, lr}
 80046b0:	b086      	sub	sp, #24
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	6078      	str	r0, [r7, #4]
 80046b6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80046ba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80046be:	2300      	movs	r3, #0
 80046c0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80046c6:	2300      	movs	r3, #0
 80046c8:	613b      	str	r3, [r7, #16]
 80046ca:	e009      	b.n	80046e0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	693b      	ldr	r3, [r7, #16]
 80046d0:	3340      	adds	r3, #64	; 0x40
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	4413      	add	r3, r2
 80046d6:	2200      	movs	r2, #0
 80046d8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	3301      	adds	r3, #1
 80046de:	613b      	str	r3, [r7, #16]
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	2b0e      	cmp	r3, #14
 80046e4:	d9f2      	bls.n	80046cc <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80046e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d11c      	bne.n	8004726 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80046fa:	f043 0302 	orr.w	r3, r3, #2
 80046fe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004704:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004710:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	639a      	str	r2, [r3, #56]	; 0x38
 8004724:	e00b      	b.n	800473e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004736:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004744:	461a      	mov	r2, r3
 8004746:	2300      	movs	r3, #0
 8004748:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004750:	4619      	mov	r1, r3
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004758:	461a      	mov	r2, r3
 800475a:	680b      	ldr	r3, [r1, #0]
 800475c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800475e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004760:	2b01      	cmp	r3, #1
 8004762:	d10c      	bne.n	800477e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004764:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004766:	2b00      	cmp	r3, #0
 8004768:	d104      	bne.n	8004774 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800476a:	2100      	movs	r1, #0
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f000 f965 	bl	8004a3c <USB_SetDevSpeed>
 8004772:	e008      	b.n	8004786 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004774:	2101      	movs	r1, #1
 8004776:	6878      	ldr	r0, [r7, #4]
 8004778:	f000 f960 	bl	8004a3c <USB_SetDevSpeed>
 800477c:	e003      	b.n	8004786 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800477e:	2103      	movs	r1, #3
 8004780:	6878      	ldr	r0, [r7, #4]
 8004782:	f000 f95b 	bl	8004a3c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004786:	2110      	movs	r1, #16
 8004788:	6878      	ldr	r0, [r7, #4]
 800478a:	f000 f8f3 	bl	8004974 <USB_FlushTxFifo>
 800478e:	4603      	mov	r3, r0
 8004790:	2b00      	cmp	r3, #0
 8004792:	d001      	beq.n	8004798 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004794:	2301      	movs	r3, #1
 8004796:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f91f 	bl	80049dc <USB_FlushRxFifo>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d001      	beq.n	80047a8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80047a4:	2301      	movs	r3, #1
 80047a6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ae:	461a      	mov	r2, r3
 80047b0:	2300      	movs	r3, #0
 80047b2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047ba:	461a      	mov	r2, r3
 80047bc:	2300      	movs	r3, #0
 80047be:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80047c6:	461a      	mov	r2, r3
 80047c8:	2300      	movs	r3, #0
 80047ca:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047cc:	2300      	movs	r3, #0
 80047ce:	613b      	str	r3, [r7, #16]
 80047d0:	e043      	b.n	800485a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	015a      	lsls	r2, r3, #5
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	4413      	add	r3, r2
 80047da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80047e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80047e8:	d118      	bne.n	800481c <USB_DevInit+0x170>
    {
      if (i == 0U)
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d10a      	bne.n	8004806 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80047f0:	693b      	ldr	r3, [r7, #16]
 80047f2:	015a      	lsls	r2, r3, #5
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4413      	add	r3, r2
 80047f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047fc:	461a      	mov	r2, r3
 80047fe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004802:	6013      	str	r3, [r2, #0]
 8004804:	e013      	b.n	800482e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	461a      	mov	r2, r3
 8004814:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004818:	6013      	str	r3, [r2, #0]
 800481a:	e008      	b.n	800482e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800481c:	693b      	ldr	r3, [r7, #16]
 800481e:	015a      	lsls	r2, r3, #5
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	4413      	add	r3, r2
 8004824:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004828:	461a      	mov	r2, r3
 800482a:	2300      	movs	r3, #0
 800482c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800482e:	693b      	ldr	r3, [r7, #16]
 8004830:	015a      	lsls	r2, r3, #5
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4413      	add	r3, r2
 8004836:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800483a:	461a      	mov	r2, r3
 800483c:	2300      	movs	r3, #0
 800483e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	015a      	lsls	r2, r3, #5
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	4413      	add	r3, r2
 8004848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484c:	461a      	mov	r2, r3
 800484e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004852:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	3301      	adds	r3, #1
 8004858:	613b      	str	r3, [r7, #16]
 800485a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800485c:	693a      	ldr	r2, [r7, #16]
 800485e:	429a      	cmp	r2, r3
 8004860:	d3b7      	bcc.n	80047d2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004862:	2300      	movs	r3, #0
 8004864:	613b      	str	r3, [r7, #16]
 8004866:	e043      	b.n	80048f0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800487a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800487e:	d118      	bne.n	80048b2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d10a      	bne.n	800489c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	015a      	lsls	r2, r3, #5
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4413      	add	r3, r2
 800488e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004892:	461a      	mov	r2, r3
 8004894:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e013      	b.n	80048c4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	015a      	lsls	r2, r3, #5
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	4413      	add	r3, r2
 80048a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048a8:	461a      	mov	r2, r3
 80048aa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80048ae:	6013      	str	r3, [r2, #0]
 80048b0:	e008      	b.n	80048c4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048be:	461a      	mov	r2, r3
 80048c0:	2300      	movs	r3, #0
 80048c2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048d0:	461a      	mov	r2, r3
 80048d2:	2300      	movs	r3, #0
 80048d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	461a      	mov	r2, r3
 80048e4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80048e8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	3301      	adds	r3, #1
 80048ee:	613b      	str	r3, [r7, #16]
 80048f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d3b7      	bcc.n	8004868 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004906:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800490a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2200      	movs	r2, #0
 8004910:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004918:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800491a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491c:	2b00      	cmp	r3, #0
 800491e:	d105      	bne.n	800492c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	699b      	ldr	r3, [r3, #24]
 8004924:	f043 0210 	orr.w	r2, r3, #16
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	699a      	ldr	r2, [r3, #24]
 8004930:	4b0f      	ldr	r3, [pc, #60]	; (8004970 <USB_DevInit+0x2c4>)
 8004932:	4313      	orrs	r3, r2
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004938:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	699b      	ldr	r3, [r3, #24]
 8004942:	f043 0208 	orr.w	r2, r3, #8
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800494a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d107      	bne.n	8004960 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004958:	f043 0304 	orr.w	r3, r3, #4
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004960:	7dfb      	ldrb	r3, [r7, #23]
}
 8004962:	4618      	mov	r0, r3
 8004964:	3718      	adds	r7, #24
 8004966:	46bd      	mov	sp, r7
 8004968:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800496c:	b004      	add	sp, #16
 800496e:	4770      	bx	lr
 8004970:	803c3800 	.word	0x803c3800

08004974 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004974:	b480      	push	{r7}
 8004976:	b085      	sub	sp, #20
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
 800497c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800497e:	2300      	movs	r3, #0
 8004980:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	3301      	adds	r3, #1
 8004986:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4a13      	ldr	r2, [pc, #76]	; (80049d8 <USB_FlushTxFifo+0x64>)
 800498c:	4293      	cmp	r3, r2
 800498e:	d901      	bls.n	8004994 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e01b      	b.n	80049cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b00      	cmp	r3, #0
 800499a:	daf2      	bge.n	8004982 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	019b      	lsls	r3, r3, #6
 80049a4:	f043 0220 	orr.w	r2, r3, #32
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	3301      	adds	r3, #1
 80049b0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	4a08      	ldr	r2, [pc, #32]	; (80049d8 <USB_FlushTxFifo+0x64>)
 80049b6:	4293      	cmp	r3, r2
 80049b8:	d901      	bls.n	80049be <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80049ba:	2303      	movs	r3, #3
 80049bc:	e006      	b.n	80049cc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	691b      	ldr	r3, [r3, #16]
 80049c2:	f003 0320 	and.w	r3, r3, #32
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d0f0      	beq.n	80049ac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80049ca:	2300      	movs	r3, #0
}
 80049cc:	4618      	mov	r0, r3
 80049ce:	3714      	adds	r7, #20
 80049d0:	46bd      	mov	sp, r7
 80049d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d6:	4770      	bx	lr
 80049d8:	00030d40 	.word	0x00030d40

080049dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80049e4:	2300      	movs	r3, #0
 80049e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	3301      	adds	r3, #1
 80049ec:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	4a11      	ldr	r2, [pc, #68]	; (8004a38 <USB_FlushRxFifo+0x5c>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d901      	bls.n	80049fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80049f6:	2303      	movs	r3, #3
 80049f8:	e018      	b.n	8004a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	daf2      	bge.n	80049e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004a02:	2300      	movs	r3, #0
 8004a04:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2210      	movs	r2, #16
 8004a0a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	3301      	adds	r3, #1
 8004a10:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a08      	ldr	r2, [pc, #32]	; (8004a38 <USB_FlushRxFifo+0x5c>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d901      	bls.n	8004a1e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004a1a:	2303      	movs	r3, #3
 8004a1c:	e006      	b.n	8004a2c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d0f0      	beq.n	8004a0c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004a2a:	2300      	movs	r3, #0
}
 8004a2c:	4618      	mov	r0, r3
 8004a2e:	3714      	adds	r7, #20
 8004a30:	46bd      	mov	sp, r7
 8004a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a36:	4770      	bx	lr
 8004a38:	00030d40 	.word	0x00030d40

08004a3c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b085      	sub	sp, #20
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	460b      	mov	r3, r1
 8004a46:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a52:	681a      	ldr	r2, [r3, #0]
 8004a54:	78fb      	ldrb	r3, [r7, #3]
 8004a56:	68f9      	ldr	r1, [r7, #12]
 8004a58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a5c:	4313      	orrs	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004a60:	2300      	movs	r3, #0
}
 8004a62:	4618      	mov	r0, r3
 8004a64:	3714      	adds	r7, #20
 8004a66:	46bd      	mov	sp, r7
 8004a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6c:	4770      	bx	lr

08004a6e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004a6e:	b480      	push	{r7}
 8004a70:	b087      	sub	sp, #28
 8004a72:	af00      	add	r7, sp, #0
 8004a74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0306 	and.w	r3, r3, #6
 8004a86:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d102      	bne.n	8004a94 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	75fb      	strb	r3, [r7, #23]
 8004a92:	e00a      	b.n	8004aaa <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2b02      	cmp	r3, #2
 8004a98:	d002      	beq.n	8004aa0 <USB_GetDevSpeed+0x32>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	2b06      	cmp	r3, #6
 8004a9e:	d102      	bne.n	8004aa6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	75fb      	strb	r3, [r7, #23]
 8004aa4:	e001      	b.n	8004aaa <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004aa6:	230f      	movs	r3, #15
 8004aa8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004aac:	4618      	mov	r0, r3
 8004aae:	371c      	adds	r7, #28
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr

08004ab8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	b085      	sub	sp, #20
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
 8004ac0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	781b      	ldrb	r3, [r3, #0]
 8004aca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	785b      	ldrb	r3, [r3, #1]
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d13a      	bne.n	8004b4a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	683b      	ldr	r3, [r7, #0]
 8004ade:	781b      	ldrb	r3, [r3, #0]
 8004ae0:	f003 030f 	and.w	r3, r3, #15
 8004ae4:	2101      	movs	r1, #1
 8004ae6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aea:	b29b      	uxth	r3, r3
 8004aec:	68f9      	ldr	r1, [r7, #12]
 8004aee:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af2:	4313      	orrs	r3, r2
 8004af4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	015a      	lsls	r2, r3, #5
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	4413      	add	r3, r2
 8004afe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d155      	bne.n	8004bb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	015a      	lsls	r2, r3, #5
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4413      	add	r3, r2
 8004b14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	68db      	ldr	r3, [r3, #12]
 8004b1e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	791b      	ldrb	r3, [r3, #4]
 8004b26:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b28:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	059b      	lsls	r3, r3, #22
 8004b2e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004b30:	4313      	orrs	r3, r2
 8004b32:	68ba      	ldr	r2, [r7, #8]
 8004b34:	0151      	lsls	r1, r2, #5
 8004b36:	68fa      	ldr	r2, [r7, #12]
 8004b38:	440a      	add	r2, r1
 8004b3a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b42:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b46:	6013      	str	r3, [r2, #0]
 8004b48:	e036      	b.n	8004bb8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b50:	69da      	ldr	r2, [r3, #28]
 8004b52:	683b      	ldr	r3, [r7, #0]
 8004b54:	781b      	ldrb	r3, [r3, #0]
 8004b56:	f003 030f 	and.w	r3, r3, #15
 8004b5a:	2101      	movs	r1, #1
 8004b5c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b60:	041b      	lsls	r3, r3, #16
 8004b62:	68f9      	ldr	r1, [r7, #12]
 8004b64:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b68:	4313      	orrs	r3, r2
 8004b6a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d11a      	bne.n	8004bb8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b82:	68bb      	ldr	r3, [r7, #8]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	681a      	ldr	r2, [r3, #0]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	791b      	ldrb	r3, [r3, #4]
 8004b9c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004b9e:	430b      	orrs	r3, r1
 8004ba0:	4313      	orrs	r3, r2
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	0151      	lsls	r1, r2, #5
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	440a      	add	r2, r1
 8004baa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004bb8:	2300      	movs	r3, #0
}
 8004bba:	4618      	mov	r0, r3
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr
	...

08004bc8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d161      	bne.n	8004ca8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004bf6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004bfa:	d11f      	bne.n	8004c3c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004c1a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c36:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004c3a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c44:	683b      	ldr	r3, [r7, #0]
 8004c46:	781b      	ldrb	r3, [r3, #0]
 8004c48:	f003 030f 	and.w	r3, r3, #15
 8004c4c:	2101      	movs	r1, #1
 8004c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	43db      	mvns	r3, r3
 8004c56:	68f9      	ldr	r1, [r7, #12]
 8004c58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c5c:	4013      	ands	r3, r2
 8004c5e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c66:	69da      	ldr	r2, [r3, #28]
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	781b      	ldrb	r3, [r3, #0]
 8004c6c:	f003 030f 	and.w	r3, r3, #15
 8004c70:	2101      	movs	r1, #1
 8004c72:	fa01 f303 	lsl.w	r3, r1, r3
 8004c76:	b29b      	uxth	r3, r3
 8004c78:	43db      	mvns	r3, r3
 8004c7a:	68f9      	ldr	r1, [r7, #12]
 8004c7c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c80:	4013      	ands	r3, r2
 8004c82:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004c84:	68bb      	ldr	r3, [r7, #8]
 8004c86:	015a      	lsls	r2, r3, #5
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	0159      	lsls	r1, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	440b      	add	r3, r1
 8004c9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	4b35      	ldr	r3, [pc, #212]	; (8004d78 <USB_DeactivateEndpoint+0x1b0>)
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	600b      	str	r3, [r1, #0]
 8004ca6:	e060      	b.n	8004d6a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004ca8:	68bb      	ldr	r3, [r7, #8]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004cba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cbe:	d11f      	bne.n	8004d00 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cda:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004cde:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004ce0:	68bb      	ldr	r3, [r7, #8]
 8004ce2:	015a      	lsls	r2, r3, #5
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4413      	add	r3, r2
 8004ce8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	68ba      	ldr	r2, [r7, #8]
 8004cf0:	0151      	lsls	r1, r2, #5
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	440a      	add	r2, r1
 8004cf6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cfa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004cfe:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	f003 030f 	and.w	r3, r3, #15
 8004d10:	2101      	movs	r1, #1
 8004d12:	fa01 f303 	lsl.w	r3, r1, r3
 8004d16:	041b      	lsls	r3, r3, #16
 8004d18:	43db      	mvns	r3, r3
 8004d1a:	68f9      	ldr	r1, [r7, #12]
 8004d1c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d20:	4013      	ands	r3, r2
 8004d22:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d2a:	69da      	ldr	r2, [r3, #28]
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	f003 030f 	and.w	r3, r3, #15
 8004d34:	2101      	movs	r1, #1
 8004d36:	fa01 f303 	lsl.w	r3, r1, r3
 8004d3a:	041b      	lsls	r3, r3, #16
 8004d3c:	43db      	mvns	r3, r3
 8004d3e:	68f9      	ldr	r1, [r7, #12]
 8004d40:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d44:	4013      	ands	r3, r2
 8004d46:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	015a      	lsls	r2, r3, #5
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	4413      	add	r3, r2
 8004d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d54:	681a      	ldr	r2, [r3, #0]
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	0159      	lsls	r1, r3, #5
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	440b      	add	r3, r1
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	4619      	mov	r1, r3
 8004d64:	4b05      	ldr	r3, [pc, #20]	; (8004d7c <USB_DeactivateEndpoint+0x1b4>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr
 8004d78:	ec337800 	.word	0xec337800
 8004d7c:	eff37800 	.word	0xeff37800

08004d80 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b08a      	sub	sp, #40	; 0x28
 8004d84:	af02      	add	r7, sp, #8
 8004d86:	60f8      	str	r0, [r7, #12]
 8004d88:	60b9      	str	r1, [r7, #8]
 8004d8a:	4613      	mov	r3, r2
 8004d8c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	781b      	ldrb	r3, [r3, #0]
 8004d96:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	785b      	ldrb	r3, [r3, #1]
 8004d9c:	2b01      	cmp	r3, #1
 8004d9e:	f040 815c 	bne.w	800505a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d132      	bne.n	8004e10 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004daa:	69bb      	ldr	r3, [r7, #24]
 8004dac:	015a      	lsls	r2, r3, #5
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	0151      	lsls	r1, r2, #5
 8004dbc:	69fa      	ldr	r2, [r7, #28]
 8004dbe:	440a      	add	r2, r1
 8004dc0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004dc8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004dcc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	691b      	ldr	r3, [r3, #16]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	0cdb      	lsrs	r3, r3, #19
 8004e0a:	04db      	lsls	r3, r3, #19
 8004e0c:	6113      	str	r3, [r2, #16]
 8004e0e:	e074      	b.n	8004efa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2a:	0cdb      	lsrs	r3, r3, #19
 8004e2c:	04db      	lsls	r3, r3, #19
 8004e2e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	015a      	lsls	r2, r3, #5
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	4413      	add	r3, r2
 8004e38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e3c:	691b      	ldr	r3, [r3, #16]
 8004e3e:	69ba      	ldr	r2, [r7, #24]
 8004e40:	0151      	lsls	r1, r2, #5
 8004e42:	69fa      	ldr	r2, [r7, #28]
 8004e44:	440a      	add	r2, r1
 8004e46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e4a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e4e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e52:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	015a      	lsls	r2, r3, #5
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	4413      	add	r3, r2
 8004e5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e60:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	6999      	ldr	r1, [r3, #24]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	440b      	add	r3, r1
 8004e6c:	1e59      	subs	r1, r3, #1
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	68db      	ldr	r3, [r3, #12]
 8004e72:	fbb1 f3f3 	udiv	r3, r1, r3
 8004e76:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004e78:	4b9d      	ldr	r3, [pc, #628]	; (80050f0 <USB_EPStartXfer+0x370>)
 8004e7a:	400b      	ands	r3, r1
 8004e7c:	69b9      	ldr	r1, [r7, #24]
 8004e7e:	0148      	lsls	r0, r1, #5
 8004e80:	69f9      	ldr	r1, [r7, #28]
 8004e82:	4401      	add	r1, r0
 8004e84:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	015a      	lsls	r2, r3, #5
 8004e90:	69fb      	ldr	r3, [r7, #28]
 8004e92:	4413      	add	r3, r2
 8004e94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e98:	691a      	ldr	r2, [r3, #16]
 8004e9a:	68bb      	ldr	r3, [r7, #8]
 8004e9c:	699b      	ldr	r3, [r3, #24]
 8004e9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ea2:	69b9      	ldr	r1, [r7, #24]
 8004ea4:	0148      	lsls	r0, r1, #5
 8004ea6:	69f9      	ldr	r1, [r7, #28]
 8004ea8:	4401      	add	r1, r0
 8004eaa:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004eae:	4313      	orrs	r3, r2
 8004eb0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	791b      	ldrb	r3, [r3, #4]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d11f      	bne.n	8004efa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004ed8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004eda:	69bb      	ldr	r3, [r7, #24]
 8004edc:	015a      	lsls	r2, r3, #5
 8004ede:	69fb      	ldr	r3, [r7, #28]
 8004ee0:	4413      	add	r3, r2
 8004ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee6:	691b      	ldr	r3, [r3, #16]
 8004ee8:	69ba      	ldr	r2, [r7, #24]
 8004eea:	0151      	lsls	r1, r2, #5
 8004eec:	69fa      	ldr	r2, [r7, #28]
 8004eee:	440a      	add	r2, r1
 8004ef0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ef4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004ef8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004efa:	79fb      	ldrb	r3, [r7, #7]
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	d14b      	bne.n	8004f98 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	695b      	ldr	r3, [r3, #20]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d009      	beq.n	8004f1c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	015a      	lsls	r2, r3, #5
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	4413      	add	r3, r2
 8004f10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f14:	461a      	mov	r2, r3
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	791b      	ldrb	r3, [r3, #4]
 8004f20:	2b01      	cmp	r3, #1
 8004f22:	d128      	bne.n	8004f76 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d110      	bne.n	8004f56 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004f34:	69bb      	ldr	r3, [r7, #24]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	69fb      	ldr	r3, [r7, #28]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	0151      	lsls	r1, r2, #5
 8004f46:	69fa      	ldr	r2, [r7, #28]
 8004f48:	440a      	add	r2, r1
 8004f4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f52:	6013      	str	r3, [r2, #0]
 8004f54:	e00f      	b.n	8004f76 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	015a      	lsls	r2, r3, #5
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	4413      	add	r3, r2
 8004f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	69ba      	ldr	r2, [r7, #24]
 8004f66:	0151      	lsls	r1, r2, #5
 8004f68:	69fa      	ldr	r2, [r7, #28]
 8004f6a:	440a      	add	r2, r1
 8004f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f74:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f76:	69bb      	ldr	r3, [r7, #24]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	0151      	lsls	r1, r2, #5
 8004f88:	69fa      	ldr	r2, [r7, #28]
 8004f8a:	440a      	add	r2, r1
 8004f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f90:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004f94:	6013      	str	r3, [r2, #0]
 8004f96:	e133      	b.n	8005200 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004f98:	69bb      	ldr	r3, [r7, #24]
 8004f9a:	015a      	lsls	r2, r3, #5
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4413      	add	r3, r2
 8004fa0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	69ba      	ldr	r2, [r7, #24]
 8004fa8:	0151      	lsls	r1, r2, #5
 8004faa:	69fa      	ldr	r2, [r7, #28]
 8004fac:	440a      	add	r2, r1
 8004fae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fb2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004fb6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	791b      	ldrb	r3, [r3, #4]
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d015      	beq.n	8004fec <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	699b      	ldr	r3, [r3, #24]
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f000 811b 	beq.w	8005200 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	f003 030f 	and.w	r3, r3, #15
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe0:	69f9      	ldr	r1, [r7, #28]
 8004fe2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004fe6:	4313      	orrs	r3, r2
 8004fe8:	634b      	str	r3, [r1, #52]	; 0x34
 8004fea:	e109      	b.n	8005200 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d110      	bne.n	800501e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	015a      	lsls	r2, r3, #5
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	4413      	add	r3, r2
 8005004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	69ba      	ldr	r2, [r7, #24]
 800500c:	0151      	lsls	r1, r2, #5
 800500e:	69fa      	ldr	r2, [r7, #28]
 8005010:	440a      	add	r2, r1
 8005012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005016:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800501a:	6013      	str	r3, [r2, #0]
 800501c:	e00f      	b.n	800503e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	015a      	lsls	r2, r3, #5
 8005022:	69fb      	ldr	r3, [r7, #28]
 8005024:	4413      	add	r3, r2
 8005026:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	69ba      	ldr	r2, [r7, #24]
 800502e:	0151      	lsls	r1, r2, #5
 8005030:	69fa      	ldr	r2, [r7, #28]
 8005032:	440a      	add	r2, r1
 8005034:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005038:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	6919      	ldr	r1, [r3, #16]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	781a      	ldrb	r2, [r3, #0]
 8005046:	68bb      	ldr	r3, [r7, #8]
 8005048:	699b      	ldr	r3, [r3, #24]
 800504a:	b298      	uxth	r0, r3
 800504c:	79fb      	ldrb	r3, [r7, #7]
 800504e:	9300      	str	r3, [sp, #0]
 8005050:	4603      	mov	r3, r0
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 fade 	bl	8005614 <USB_WritePacket>
 8005058:	e0d2      	b.n	8005200 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	015a      	lsls	r2, r3, #5
 800505e:	69fb      	ldr	r3, [r7, #28]
 8005060:	4413      	add	r3, r2
 8005062:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005066:	691b      	ldr	r3, [r3, #16]
 8005068:	69ba      	ldr	r2, [r7, #24]
 800506a:	0151      	lsls	r1, r2, #5
 800506c:	69fa      	ldr	r2, [r7, #28]
 800506e:	440a      	add	r2, r1
 8005070:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005074:	0cdb      	lsrs	r3, r3, #19
 8005076:	04db      	lsls	r3, r3, #19
 8005078:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800507a:	69bb      	ldr	r3, [r7, #24]
 800507c:	015a      	lsls	r2, r3, #5
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	4413      	add	r3, r2
 8005082:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	69ba      	ldr	r2, [r7, #24]
 800508a:	0151      	lsls	r1, r2, #5
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	440a      	add	r2, r1
 8005090:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005094:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005098:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800509c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d126      	bne.n	80050f4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80050a6:	69bb      	ldr	r3, [r7, #24]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050b2:	691a      	ldr	r2, [r3, #16]
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	68db      	ldr	r3, [r3, #12]
 80050b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80050bc:	69b9      	ldr	r1, [r7, #24]
 80050be:	0148      	lsls	r0, r1, #5
 80050c0:	69f9      	ldr	r1, [r7, #28]
 80050c2:	4401      	add	r1, r0
 80050c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80050c8:	4313      	orrs	r3, r2
 80050ca:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80050d8:	691b      	ldr	r3, [r3, #16]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80050e6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050ea:	6113      	str	r3, [r2, #16]
 80050ec:	e03a      	b.n	8005164 <USB_EPStartXfer+0x3e4>
 80050ee:	bf00      	nop
 80050f0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	699a      	ldr	r2, [r3, #24]
 80050f8:	68bb      	ldr	r3, [r7, #8]
 80050fa:	68db      	ldr	r3, [r3, #12]
 80050fc:	4413      	add	r3, r2
 80050fe:	1e5a      	subs	r2, r3, #1
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	fbb2 f3f3 	udiv	r3, r2, r3
 8005108:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	68db      	ldr	r3, [r3, #12]
 800510e:	8afa      	ldrh	r2, [r7, #22]
 8005110:	fb03 f202 	mul.w	r2, r3, r2
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005118:	69bb      	ldr	r3, [r7, #24]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	69fb      	ldr	r3, [r7, #28]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005124:	691a      	ldr	r2, [r3, #16]
 8005126:	8afb      	ldrh	r3, [r7, #22]
 8005128:	04d9      	lsls	r1, r3, #19
 800512a:	4b38      	ldr	r3, [pc, #224]	; (800520c <USB_EPStartXfer+0x48c>)
 800512c:	400b      	ands	r3, r1
 800512e:	69b9      	ldr	r1, [r7, #24]
 8005130:	0148      	lsls	r0, r1, #5
 8005132:	69f9      	ldr	r1, [r7, #28]
 8005134:	4401      	add	r1, r0
 8005136:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800513a:	4313      	orrs	r3, r2
 800513c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800513e:	69bb      	ldr	r3, [r7, #24]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	691a      	ldr	r2, [r3, #16]
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	69db      	ldr	r3, [r3, #28]
 8005150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005154:	69b9      	ldr	r1, [r7, #24]
 8005156:	0148      	lsls	r0, r1, #5
 8005158:	69f9      	ldr	r1, [r7, #28]
 800515a:	4401      	add	r1, r0
 800515c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005160:	4313      	orrs	r3, r2
 8005162:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005164:	79fb      	ldrb	r3, [r7, #7]
 8005166:	2b01      	cmp	r3, #1
 8005168:	d10d      	bne.n	8005186 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	691b      	ldr	r3, [r3, #16]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d009      	beq.n	8005186 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005172:	68bb      	ldr	r3, [r7, #8]
 8005174:	6919      	ldr	r1, [r3, #16]
 8005176:	69bb      	ldr	r3, [r7, #24]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	69fb      	ldr	r3, [r7, #28]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	460a      	mov	r2, r1
 8005184:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	791b      	ldrb	r3, [r3, #4]
 800518a:	2b01      	cmp	r3, #1
 800518c:	d128      	bne.n	80051e0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800518e:	69fb      	ldr	r3, [r7, #28]
 8005190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800519a:	2b00      	cmp	r3, #0
 800519c:	d110      	bne.n	80051c0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800519e:	69bb      	ldr	r3, [r7, #24]
 80051a0:	015a      	lsls	r2, r3, #5
 80051a2:	69fb      	ldr	r3, [r7, #28]
 80051a4:	4413      	add	r3, r2
 80051a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	69ba      	ldr	r2, [r7, #24]
 80051ae:	0151      	lsls	r1, r2, #5
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	440a      	add	r2, r1
 80051b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051b8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051bc:	6013      	str	r3, [r2, #0]
 80051be:	e00f      	b.n	80051e0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	69ba      	ldr	r2, [r7, #24]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	69fa      	ldr	r2, [r7, #28]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051de:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80051e0:	69bb      	ldr	r3, [r7, #24]
 80051e2:	015a      	lsls	r2, r3, #5
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	4413      	add	r3, r2
 80051e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	69ba      	ldr	r2, [r7, #24]
 80051f0:	0151      	lsls	r1, r2, #5
 80051f2:	69fa      	ldr	r2, [r7, #28]
 80051f4:	440a      	add	r2, r1
 80051f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051fa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051fe:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005200:	2300      	movs	r3, #0
}
 8005202:	4618      	mov	r0, r3
 8005204:	3720      	adds	r7, #32
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}
 800520a:	bf00      	nop
 800520c:	1ff80000 	.word	0x1ff80000

08005210 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005210:	b480      	push	{r7}
 8005212:	b087      	sub	sp, #28
 8005214:	af00      	add	r7, sp, #0
 8005216:	60f8      	str	r0, [r7, #12]
 8005218:	60b9      	str	r1, [r7, #8]
 800521a:	4613      	mov	r3, r2
 800521c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	781b      	ldrb	r3, [r3, #0]
 8005226:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	785b      	ldrb	r3, [r3, #1]
 800522c:	2b01      	cmp	r3, #1
 800522e:	f040 80ce 	bne.w	80053ce <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d132      	bne.n	80052a0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005254:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005258:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800525c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800526a:	691b      	ldr	r3, [r3, #16]
 800526c:	693a      	ldr	r2, [r7, #16]
 800526e:	0151      	lsls	r1, r2, #5
 8005270:	697a      	ldr	r2, [r7, #20]
 8005272:	440a      	add	r2, r1
 8005274:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005278:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800527c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	015a      	lsls	r2, r3, #5
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	4413      	add	r3, r2
 8005286:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800528a:	691b      	ldr	r3, [r3, #16]
 800528c:	693a      	ldr	r2, [r7, #16]
 800528e:	0151      	lsls	r1, r2, #5
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	440a      	add	r2, r1
 8005294:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005298:	0cdb      	lsrs	r3, r3, #19
 800529a:	04db      	lsls	r3, r3, #19
 800529c:	6113      	str	r3, [r2, #16]
 800529e:	e04e      	b.n	800533e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	697a      	ldr	r2, [r7, #20]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	0cdb      	lsrs	r3, r3, #19
 80052bc:	04db      	lsls	r3, r3, #19
 80052be:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052c0:	693b      	ldr	r3, [r7, #16]
 80052c2:	015a      	lsls	r2, r3, #5
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4413      	add	r3, r2
 80052c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052cc:	691b      	ldr	r3, [r3, #16]
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	0151      	lsls	r1, r2, #5
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	440a      	add	r2, r1
 80052d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052da:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052de:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052e2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80052e4:	68bb      	ldr	r3, [r7, #8]
 80052e6:	699a      	ldr	r2, [r3, #24]
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	68db      	ldr	r3, [r3, #12]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d903      	bls.n	80052f8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	68da      	ldr	r2, [r3, #12]
 80052f4:	68bb      	ldr	r3, [r7, #8]
 80052f6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	015a      	lsls	r2, r3, #5
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	4413      	add	r3, r2
 8005300:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005304:	691b      	ldr	r3, [r3, #16]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	0151      	lsls	r1, r2, #5
 800530a:	697a      	ldr	r2, [r7, #20]
 800530c:	440a      	add	r2, r1
 800530e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005312:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005316:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	015a      	lsls	r2, r3, #5
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4413      	add	r3, r2
 8005320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	699b      	ldr	r3, [r3, #24]
 800532a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532e:	6939      	ldr	r1, [r7, #16]
 8005330:	0148      	lsls	r0, r1, #5
 8005332:	6979      	ldr	r1, [r7, #20]
 8005334:	4401      	add	r1, r0
 8005336:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800533a:	4313      	orrs	r3, r2
 800533c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	2b01      	cmp	r3, #1
 8005342:	d11e      	bne.n	8005382 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	695b      	ldr	r3, [r3, #20]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	461a      	mov	r2, r3
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	695b      	ldr	r3, [r3, #20]
 800535e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	015a      	lsls	r2, r3, #5
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	4413      	add	r3, r2
 8005368:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	693a      	ldr	r2, [r7, #16]
 8005370:	0151      	lsls	r1, r2, #5
 8005372:	697a      	ldr	r2, [r7, #20]
 8005374:	440a      	add	r2, r1
 8005376:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800537e:	6013      	str	r3, [r2, #0]
 8005380:	e097      	b.n	80054b2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	015a      	lsls	r2, r3, #5
 8005386:	697b      	ldr	r3, [r7, #20]
 8005388:	4413      	add	r3, r2
 800538a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	693a      	ldr	r2, [r7, #16]
 8005392:	0151      	lsls	r1, r2, #5
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	440a      	add	r2, r1
 8005398:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800539c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053a0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80053a2:	68bb      	ldr	r3, [r7, #8]
 80053a4:	699b      	ldr	r3, [r3, #24]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 8083 	beq.w	80054b2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	f003 030f 	and.w	r3, r3, #15
 80053bc:	2101      	movs	r1, #1
 80053be:	fa01 f303 	lsl.w	r3, r1, r3
 80053c2:	6979      	ldr	r1, [r7, #20]
 80053c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80053c8:	4313      	orrs	r3, r2
 80053ca:	634b      	str	r3, [r1, #52]	; 0x34
 80053cc:	e071      	b.n	80054b2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80053ce:	693b      	ldr	r3, [r7, #16]
 80053d0:	015a      	lsls	r2, r3, #5
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	4413      	add	r3, r2
 80053d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053da:	691b      	ldr	r3, [r3, #16]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	0151      	lsls	r1, r2, #5
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	440a      	add	r2, r1
 80053e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053e8:	0cdb      	lsrs	r3, r3, #19
 80053ea:	04db      	lsls	r3, r3, #19
 80053ec:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005408:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800540c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005410:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005412:	68bb      	ldr	r3, [r7, #8]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	d003      	beq.n	8005422 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	68da      	ldr	r2, [r3, #12]
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	015a      	lsls	r2, r3, #5
 800542e:	697b      	ldr	r3, [r7, #20]
 8005430:	4413      	add	r3, r2
 8005432:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005436:	691b      	ldr	r3, [r3, #16]
 8005438:	693a      	ldr	r2, [r7, #16]
 800543a:	0151      	lsls	r1, r2, #5
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	440a      	add	r2, r1
 8005440:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005444:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005448:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800544a:	693b      	ldr	r3, [r7, #16]
 800544c:	015a      	lsls	r2, r3, #5
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	4413      	add	r3, r2
 8005452:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005456:	691a      	ldr	r2, [r3, #16]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	69db      	ldr	r3, [r3, #28]
 800545c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005460:	6939      	ldr	r1, [r7, #16]
 8005462:	0148      	lsls	r0, r1, #5
 8005464:	6979      	ldr	r1, [r7, #20]
 8005466:	4401      	add	r1, r0
 8005468:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800546c:	4313      	orrs	r3, r2
 800546e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005470:	79fb      	ldrb	r3, [r7, #7]
 8005472:	2b01      	cmp	r3, #1
 8005474:	d10d      	bne.n	8005492 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005476:	68bb      	ldr	r3, [r7, #8]
 8005478:	691b      	ldr	r3, [r3, #16]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d009      	beq.n	8005492 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	6919      	ldr	r1, [r3, #16]
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800548e:	460a      	mov	r2, r1
 8005490:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	015a      	lsls	r2, r3, #5
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	4413      	add	r3, r2
 800549a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	693a      	ldr	r2, [r7, #16]
 80054a2:	0151      	lsls	r1, r2, #5
 80054a4:	697a      	ldr	r2, [r7, #20]
 80054a6:	440a      	add	r2, r1
 80054a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054ac:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054b0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80054b2:	2300      	movs	r3, #0
}
 80054b4:	4618      	mov	r0, r3
 80054b6:	371c      	adds	r7, #28
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr

080054c0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80054ca:	2300      	movs	r3, #0
 80054cc:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80054ce:	2300      	movs	r3, #0
 80054d0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80054d6:	683b      	ldr	r3, [r7, #0]
 80054d8:	785b      	ldrb	r3, [r3, #1]
 80054da:	2b01      	cmp	r3, #1
 80054dc:	d14a      	bne.n	8005574 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	781b      	ldrb	r3, [r3, #0]
 80054e2:	015a      	lsls	r2, r3, #5
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4413      	add	r3, r2
 80054e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054f6:	f040 8086 	bne.w	8005606 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	781b      	ldrb	r3, [r3, #0]
 80054fe:	015a      	lsls	r2, r3, #5
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	4413      	add	r3, r2
 8005504:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	683a      	ldr	r2, [r7, #0]
 800550c:	7812      	ldrb	r2, [r2, #0]
 800550e:	0151      	lsls	r1, r2, #5
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	440a      	add	r2, r1
 8005514:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005518:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800551c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	015a      	lsls	r2, r3, #5
 8005524:	693b      	ldr	r3, [r7, #16]
 8005526:	4413      	add	r3, r2
 8005528:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	683a      	ldr	r2, [r7, #0]
 8005530:	7812      	ldrb	r2, [r2, #0]
 8005532:	0151      	lsls	r1, r2, #5
 8005534:	693a      	ldr	r2, [r7, #16]
 8005536:	440a      	add	r2, r1
 8005538:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800553c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005540:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	3301      	adds	r3, #1
 8005546:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f242 7210 	movw	r2, #10000	; 0x2710
 800554e:	4293      	cmp	r3, r2
 8005550:	d902      	bls.n	8005558 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	75fb      	strb	r3, [r7, #23]
          break;
 8005556:	e056      	b.n	8005606 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	015a      	lsls	r2, r3, #5
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	4413      	add	r3, r2
 8005562:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800556c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005570:	d0e7      	beq.n	8005542 <USB_EPStopXfer+0x82>
 8005572:	e048      	b.n	8005606 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005574:	683b      	ldr	r3, [r7, #0]
 8005576:	781b      	ldrb	r3, [r3, #0]
 8005578:	015a      	lsls	r2, r3, #5
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	4413      	add	r3, r2
 800557e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005588:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800558c:	d13b      	bne.n	8005606 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	781b      	ldrb	r3, [r3, #0]
 8005592:	015a      	lsls	r2, r3, #5
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4413      	add	r3, r2
 8005598:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	7812      	ldrb	r2, [r2, #0]
 80055a2:	0151      	lsls	r1, r2, #5
 80055a4:	693a      	ldr	r2, [r7, #16]
 80055a6:	440a      	add	r2, r1
 80055a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055ac:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80055b0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	781b      	ldrb	r3, [r3, #0]
 80055b6:	015a      	lsls	r2, r3, #5
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	4413      	add	r3, r2
 80055bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c0:	681b      	ldr	r3, [r3, #0]
 80055c2:	683a      	ldr	r2, [r7, #0]
 80055c4:	7812      	ldrb	r2, [r2, #0]
 80055c6:	0151      	lsls	r1, r2, #5
 80055c8:	693a      	ldr	r2, [r7, #16]
 80055ca:	440a      	add	r2, r1
 80055cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80055d4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	3301      	adds	r3, #1
 80055da:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f242 7210 	movw	r2, #10000	; 0x2710
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d902      	bls.n	80055ec <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80055e6:	2301      	movs	r3, #1
 80055e8:	75fb      	strb	r3, [r7, #23]
          break;
 80055ea:	e00c      	b.n	8005606 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	781b      	ldrb	r3, [r3, #0]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005600:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005604:	d0e7      	beq.n	80055d6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005606:	7dfb      	ldrb	r3, [r7, #23]
}
 8005608:	4618      	mov	r0, r3
 800560a:	371c      	adds	r7, #28
 800560c:	46bd      	mov	sp, r7
 800560e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005612:	4770      	bx	lr

08005614 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	4611      	mov	r1, r2
 8005620:	461a      	mov	r2, r3
 8005622:	460b      	mov	r3, r1
 8005624:	71fb      	strb	r3, [r7, #7]
 8005626:	4613      	mov	r3, r2
 8005628:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005632:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005636:	2b00      	cmp	r3, #0
 8005638:	d123      	bne.n	8005682 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800563a:	88bb      	ldrh	r3, [r7, #4]
 800563c:	3303      	adds	r3, #3
 800563e:	089b      	lsrs	r3, r3, #2
 8005640:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005642:	2300      	movs	r3, #0
 8005644:	61bb      	str	r3, [r7, #24]
 8005646:	e018      	b.n	800567a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005648:	79fb      	ldrb	r3, [r7, #7]
 800564a:	031a      	lsls	r2, r3, #12
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	4413      	add	r3, r2
 8005650:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005654:	461a      	mov	r2, r3
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800565c:	69fb      	ldr	r3, [r7, #28]
 800565e:	3301      	adds	r3, #1
 8005660:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005662:	69fb      	ldr	r3, [r7, #28]
 8005664:	3301      	adds	r3, #1
 8005666:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005668:	69fb      	ldr	r3, [r7, #28]
 800566a:	3301      	adds	r3, #1
 800566c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	3301      	adds	r3, #1
 8005672:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005674:	69bb      	ldr	r3, [r7, #24]
 8005676:	3301      	adds	r3, #1
 8005678:	61bb      	str	r3, [r7, #24]
 800567a:	69ba      	ldr	r2, [r7, #24]
 800567c:	693b      	ldr	r3, [r7, #16]
 800567e:	429a      	cmp	r2, r3
 8005680:	d3e2      	bcc.n	8005648 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005682:	2300      	movs	r3, #0
}
 8005684:	4618      	mov	r0, r3
 8005686:	3724      	adds	r7, #36	; 0x24
 8005688:	46bd      	mov	sp, r7
 800568a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568e:	4770      	bx	lr

08005690 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005690:	b480      	push	{r7}
 8005692:	b08b      	sub	sp, #44	; 0x2c
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	4613      	mov	r3, r2
 800569c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80056a2:	68bb      	ldr	r3, [r7, #8]
 80056a4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80056a6:	88fb      	ldrh	r3, [r7, #6]
 80056a8:	089b      	lsrs	r3, r3, #2
 80056aa:	b29b      	uxth	r3, r3
 80056ac:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	f003 0303 	and.w	r3, r3, #3
 80056b4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80056b6:	2300      	movs	r3, #0
 80056b8:	623b      	str	r3, [r7, #32]
 80056ba:	e014      	b.n	80056e6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80056bc:	69bb      	ldr	r3, [r7, #24]
 80056be:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	601a      	str	r2, [r3, #0]
    pDest++;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ca:	3301      	adds	r3, #1
 80056cc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	3301      	adds	r3, #1
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d6:	3301      	adds	r3, #1
 80056d8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	3301      	adds	r3, #1
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	3301      	adds	r3, #1
 80056e4:	623b      	str	r3, [r7, #32]
 80056e6:	6a3a      	ldr	r2, [r7, #32]
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	429a      	cmp	r2, r3
 80056ec:	d3e6      	bcc.n	80056bc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80056ee:	8bfb      	ldrh	r3, [r7, #30]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d01e      	beq.n	8005732 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80056f8:	69bb      	ldr	r3, [r7, #24]
 80056fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80056fe:	461a      	mov	r2, r3
 8005700:	f107 0310 	add.w	r3, r7, #16
 8005704:	6812      	ldr	r2, [r2, #0]
 8005706:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	6a3b      	ldr	r3, [r7, #32]
 800570c:	b2db      	uxtb	r3, r3
 800570e:	00db      	lsls	r3, r3, #3
 8005710:	fa22 f303 	lsr.w	r3, r2, r3
 8005714:	b2da      	uxtb	r2, r3
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005718:	701a      	strb	r2, [r3, #0]
      i++;
 800571a:	6a3b      	ldr	r3, [r7, #32]
 800571c:	3301      	adds	r3, #1
 800571e:	623b      	str	r3, [r7, #32]
      pDest++;
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	3301      	adds	r3, #1
 8005724:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005726:	8bfb      	ldrh	r3, [r7, #30]
 8005728:	3b01      	subs	r3, #1
 800572a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800572c:	8bfb      	ldrh	r3, [r7, #30]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1ea      	bne.n	8005708 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005734:	4618      	mov	r0, r3
 8005736:	372c      	adds	r7, #44	; 0x2c
 8005738:	46bd      	mov	sp, r7
 800573a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573e:	4770      	bx	lr

08005740 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005740:	b480      	push	{r7}
 8005742:	b085      	sub	sp, #20
 8005744:	af00      	add	r7, sp, #0
 8005746:	6078      	str	r0, [r7, #4]
 8005748:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	785b      	ldrb	r3, [r3, #1]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d12c      	bne.n	80057b6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	015a      	lsls	r2, r3, #5
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	4413      	add	r3, r2
 8005764:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b00      	cmp	r3, #0
 800576c:	db12      	blt.n	8005794 <USB_EPSetStall+0x54>
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00f      	beq.n	8005794 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800578e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005792:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005794:	68bb      	ldr	r3, [r7, #8]
 8005796:	015a      	lsls	r2, r3, #5
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	4413      	add	r3, r2
 800579c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	68ba      	ldr	r2, [r7, #8]
 80057a4:	0151      	lsls	r1, r2, #5
 80057a6:	68fa      	ldr	r2, [r7, #12]
 80057a8:	440a      	add	r2, r1
 80057aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80057ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80057b2:	6013      	str	r3, [r2, #0]
 80057b4:	e02b      	b.n	800580e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	015a      	lsls	r2, r3, #5
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	4413      	add	r3, r2
 80057be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	db12      	blt.n	80057ee <USB_EPSetStall+0xae>
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00f      	beq.n	80057ee <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	015a      	lsls	r2, r3, #5
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	4413      	add	r3, r2
 80057d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68ba      	ldr	r2, [r7, #8]
 80057de:	0151      	lsls	r1, r2, #5
 80057e0:	68fa      	ldr	r2, [r7, #12]
 80057e2:	440a      	add	r2, r1
 80057e4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80057e8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80057ec:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80057ee:	68bb      	ldr	r3, [r7, #8]
 80057f0:	015a      	lsls	r2, r3, #5
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	4413      	add	r3, r2
 80057f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	68ba      	ldr	r2, [r7, #8]
 80057fe:	0151      	lsls	r1, r2, #5
 8005800:	68fa      	ldr	r2, [r7, #12]
 8005802:	440a      	add	r2, r1
 8005804:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005808:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800580c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3714      	adds	r7, #20
 8005814:	46bd      	mov	sp, r7
 8005816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800581a:	4770      	bx	lr

0800581c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	781b      	ldrb	r3, [r3, #0]
 800582e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	785b      	ldrb	r3, [r3, #1]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d128      	bne.n	800588a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	015a      	lsls	r2, r3, #5
 800583c:	68fb      	ldr	r3, [r7, #12]
 800583e:	4413      	add	r3, r2
 8005840:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	0151      	lsls	r1, r2, #5
 800584a:	68fa      	ldr	r2, [r7, #12]
 800584c:	440a      	add	r2, r1
 800584e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005852:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005856:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	2b03      	cmp	r3, #3
 800585e:	d003      	beq.n	8005868 <USB_EPClearStall+0x4c>
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	791b      	ldrb	r3, [r3, #4]
 8005864:	2b02      	cmp	r3, #2
 8005866:	d138      	bne.n	80058da <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	015a      	lsls	r2, r3, #5
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	4413      	add	r3, r2
 8005870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	68ba      	ldr	r2, [r7, #8]
 8005878:	0151      	lsls	r1, r2, #5
 800587a:	68fa      	ldr	r2, [r7, #12]
 800587c:	440a      	add	r2, r1
 800587e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005886:	6013      	str	r3, [r2, #0]
 8005888:	e027      	b.n	80058da <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	015a      	lsls	r2, r3, #5
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	4413      	add	r3, r2
 8005892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	0151      	lsls	r1, r2, #5
 800589c:	68fa      	ldr	r2, [r7, #12]
 800589e:	440a      	add	r2, r1
 80058a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058a4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80058a8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	791b      	ldrb	r3, [r3, #4]
 80058ae:	2b03      	cmp	r3, #3
 80058b0:	d003      	beq.n	80058ba <USB_EPClearStall+0x9e>
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	791b      	ldrb	r3, [r3, #4]
 80058b6:	2b02      	cmp	r3, #2
 80058b8:	d10f      	bne.n	80058da <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80058ba:	68bb      	ldr	r3, [r7, #8]
 80058bc:	015a      	lsls	r2, r3, #5
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	4413      	add	r3, r2
 80058c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	68ba      	ldr	r2, [r7, #8]
 80058ca:	0151      	lsls	r1, r2, #5
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	440a      	add	r2, r1
 80058d0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3714      	adds	r7, #20
 80058e0:	46bd      	mov	sp, r7
 80058e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e6:	4770      	bx	lr

080058e8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	460b      	mov	r3, r1
 80058f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	68fa      	ldr	r2, [r7, #12]
 8005902:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005906:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800590a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005912:	681a      	ldr	r2, [r3, #0]
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	011b      	lsls	r3, r3, #4
 8005918:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 800591c:	68f9      	ldr	r1, [r7, #12]
 800591e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005922:	4313      	orrs	r3, r2
 8005924:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005926:	2300      	movs	r3, #0
}
 8005928:	4618      	mov	r0, r3
 800592a:	3714      	adds	r7, #20
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005934:	b480      	push	{r7}
 8005936:	b085      	sub	sp, #20
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800594e:	f023 0303 	bic.w	r3, r3, #3
 8005952:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005962:	f023 0302 	bic.w	r3, r3, #2
 8005966:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3714      	adds	r7, #20
 800596e:	46bd      	mov	sp, r7
 8005970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005974:	4770      	bx	lr

08005976 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005976:	b480      	push	{r7}
 8005978:	b085      	sub	sp, #20
 800597a:	af00      	add	r7, sp, #0
 800597c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	68fa      	ldr	r2, [r7, #12]
 800598c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005990:	f023 0303 	bic.w	r3, r3, #3
 8005994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a4:	f043 0302 	orr.w	r3, r3, #2
 80059a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b085      	sub	sp, #20
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	695b      	ldr	r3, [r3, #20]
 80059c4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	699b      	ldr	r3, [r3, #24]
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4013      	ands	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80059d0:	68fb      	ldr	r3, [r7, #12]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3714      	adds	r7, #20
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr

080059de <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80059de:	b480      	push	{r7}
 80059e0:	b085      	sub	sp, #20
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	68ba      	ldr	r2, [r7, #8]
 80059fe:	4013      	ands	r3, r2
 8005a00:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005a02:	68bb      	ldr	r3, [r7, #8]
 8005a04:	0c1b      	lsrs	r3, r3, #16
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr

08005a12 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005a12:	b480      	push	{r7}
 8005a14:	b085      	sub	sp, #20
 8005a16:	af00      	add	r7, sp, #0
 8005a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a24:	699b      	ldr	r3, [r3, #24]
 8005a26:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a2e:	69db      	ldr	r3, [r3, #28]
 8005a30:	68ba      	ldr	r2, [r7, #8]
 8005a32:	4013      	ands	r3, r2
 8005a34:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	b29b      	uxth	r3, r3
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3714      	adds	r7, #20
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr

08005a46 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a46:	b480      	push	{r7}
 8005a48:	b085      	sub	sp, #20
 8005a4a:	af00      	add	r7, sp, #0
 8005a4c:	6078      	str	r0, [r7, #4]
 8005a4e:	460b      	mov	r3, r1
 8005a50:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	015a      	lsls	r2, r3, #5
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6c:	695b      	ldr	r3, [r3, #20]
 8005a6e:	68ba      	ldr	r2, [r7, #8]
 8005a70:	4013      	ands	r3, r2
 8005a72:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005a74:	68bb      	ldr	r3, [r7, #8]
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3714      	adds	r7, #20
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a80:	4770      	bx	lr

08005a82 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005a82:	b480      	push	{r7}
 8005a84:	b087      	sub	sp, #28
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	6078      	str	r0, [r7, #4]
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005aa6:	78fb      	ldrb	r3, [r7, #3]
 8005aa8:	f003 030f 	and.w	r3, r3, #15
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	fa22 f303 	lsr.w	r3, r2, r3
 8005ab2:	01db      	lsls	r3, r3, #7
 8005ab4:	b2db      	uxtb	r3, r3
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005abc:	78fb      	ldrb	r3, [r7, #3]
 8005abe:	015a      	lsls	r2, r3, #5
 8005ac0:	697b      	ldr	r3, [r7, #20]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ac8:	689b      	ldr	r3, [r3, #8]
 8005aca:	693a      	ldr	r2, [r7, #16]
 8005acc:	4013      	ands	r3, r2
 8005ace:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	371c      	adds	r7, #28
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005ade:	b480      	push	{r7}
 8005ae0:	b083      	sub	sp, #12
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	f003 0301 	and.w	r3, r3, #1
}
 8005aee:	4618      	mov	r0, r3
 8005af0:	370c      	adds	r7, #12
 8005af2:	46bd      	mov	sp, r7
 8005af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af8:	4770      	bx	lr

08005afa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005afa:	b480      	push	{r7}
 8005afc:	b085      	sub	sp, #20
 8005afe:	af00      	add	r7, sp, #0
 8005b00:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68fa      	ldr	r2, [r7, #12]
 8005b10:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005b14:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005b18:	f023 0307 	bic.w	r3, r3, #7
 8005b1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b24:	685b      	ldr	r3, [r3, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b32:	2300      	movs	r3, #0
}
 8005b34:	4618      	mov	r0, r3
 8005b36:	3714      	adds	r7, #20
 8005b38:	46bd      	mov	sp, r7
 8005b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b3e:	4770      	bx	lr

08005b40 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005b40:	b480      	push	{r7}
 8005b42:	b087      	sub	sp, #28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	460b      	mov	r3, r1
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	333c      	adds	r3, #60	; 0x3c
 8005b56:	3304      	adds	r3, #4
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005b5c:	693b      	ldr	r3, [r7, #16]
 8005b5e:	4a26      	ldr	r2, [pc, #152]	; (8005bf8 <USB_EP0_OutStart+0xb8>)
 8005b60:	4293      	cmp	r3, r2
 8005b62:	d90a      	bls.n	8005b7a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005b70:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005b74:	d101      	bne.n	8005b7a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005b76:	2300      	movs	r3, #0
 8005b78:	e037      	b.n	8005bea <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b80:	461a      	mov	r2, r3
 8005b82:	2300      	movs	r3, #0
 8005b84:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b86:	697b      	ldr	r3, [r7, #20]
 8005b88:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005b8c:	691b      	ldr	r3, [r3, #16]
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005b94:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005b98:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005b9a:	697b      	ldr	r3, [r7, #20]
 8005b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	697a      	ldr	r2, [r7, #20]
 8005ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005ba8:	f043 0318 	orr.w	r3, r3, #24
 8005bac:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005bae:	697b      	ldr	r3, [r7, #20]
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	697a      	ldr	r2, [r7, #20]
 8005bb8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005bbc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005bc0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005bc2:	7afb      	ldrb	r3, [r7, #11]
 8005bc4:	2b01      	cmp	r3, #1
 8005bc6:	d10f      	bne.n	8005be8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bce:	461a      	mov	r2, r3
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	697a      	ldr	r2, [r7, #20]
 8005bde:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005be2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005be6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005be8:	2300      	movs	r3, #0
}
 8005bea:	4618      	mov	r0, r3
 8005bec:	371c      	adds	r7, #28
 8005bee:	46bd      	mov	sp, r7
 8005bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf4:	4770      	bx	lr
 8005bf6:	bf00      	nop
 8005bf8:	4f54300a 	.word	0x4f54300a

08005bfc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	b085      	sub	sp, #20
 8005c00:	af00      	add	r7, sp, #0
 8005c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4a13      	ldr	r2, [pc, #76]	; (8005c60 <USB_CoreReset+0x64>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d901      	bls.n	8005c1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e01b      	b.n	8005c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	691b      	ldr	r3, [r3, #16]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	daf2      	bge.n	8005c08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005c22:	2300      	movs	r3, #0
 8005c24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	691b      	ldr	r3, [r3, #16]
 8005c2a:	f043 0201 	orr.w	r2, r3, #1
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3301      	adds	r3, #1
 8005c36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4a09      	ldr	r2, [pc, #36]	; (8005c60 <USB_CoreReset+0x64>)
 8005c3c:	4293      	cmp	r3, r2
 8005c3e:	d901      	bls.n	8005c44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005c40:	2303      	movs	r3, #3
 8005c42:	e006      	b.n	8005c52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	691b      	ldr	r3, [r3, #16]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d0f0      	beq.n	8005c32 <USB_CoreReset+0x36>

  return HAL_OK;
 8005c50:	2300      	movs	r3, #0
}
 8005c52:	4618      	mov	r0, r3
 8005c54:	3714      	adds	r7, #20
 8005c56:	46bd      	mov	sp, r7
 8005c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5c:	4770      	bx	lr
 8005c5e:	bf00      	nop
 8005c60:	00030d40 	.word	0x00030d40

08005c64 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c64:	b580      	push	{r7, lr}
 8005c66:	b084      	sub	sp, #16
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	460b      	mov	r3, r1
 8005c6e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005c70:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8005c74:	f002 fc36 	bl	80084e4 <USBD_static_malloc>
 8005c78:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d109      	bne.n	8005c94 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	32b0      	adds	r2, #176	; 0xb0
 8005c8a:	2100      	movs	r1, #0
 8005c8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005c90:	2302      	movs	r3, #2
 8005c92:	e0d4      	b.n	8005e3e <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005c94:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8005c98:	2100      	movs	r1, #0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f002 fc8a 	bl	80085b4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	32b0      	adds	r2, #176	; 0xb0
 8005caa:	68f9      	ldr	r1, [r7, #12]
 8005cac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	32b0      	adds	r2, #176	; 0xb0
 8005cba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	7c1b      	ldrb	r3, [r3, #16]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d138      	bne.n	8005d3e <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005ccc:	4b5e      	ldr	r3, [pc, #376]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005cce:	7819      	ldrb	r1, [r3, #0]
 8005cd0:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cd4:	2202      	movs	r2, #2
 8005cd6:	6878      	ldr	r0, [r7, #4]
 8005cd8:	f002 fae1 	bl	800829e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005cdc:	4b5a      	ldr	r3, [pc, #360]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005cde:	781b      	ldrb	r3, [r3, #0]
 8005ce0:	f003 020f 	and.w	r2, r3, #15
 8005ce4:	6879      	ldr	r1, [r7, #4]
 8005ce6:	4613      	mov	r3, r2
 8005ce8:	009b      	lsls	r3, r3, #2
 8005cea:	4413      	add	r3, r2
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	440b      	add	r3, r1
 8005cf0:	3324      	adds	r3, #36	; 0x24
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005cf6:	4b55      	ldr	r3, [pc, #340]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005cf8:	7819      	ldrb	r1, [r3, #0]
 8005cfa:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005cfe:	2202      	movs	r2, #2
 8005d00:	6878      	ldr	r0, [r7, #4]
 8005d02:	f002 facc 	bl	800829e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d06:	4b51      	ldr	r3, [pc, #324]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	f003 020f 	and.w	r2, r3, #15
 8005d0e:	6879      	ldr	r1, [r7, #4]
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	440b      	add	r3, r1
 8005d1a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d1e:	2201      	movs	r2, #1
 8005d20:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005d22:	4b4b      	ldr	r3, [pc, #300]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005d24:	781b      	ldrb	r3, [r3, #0]
 8005d26:	f003 020f 	and.w	r2, r3, #15
 8005d2a:	6879      	ldr	r1, [r7, #4]
 8005d2c:	4613      	mov	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4413      	add	r3, r2
 8005d32:	009b      	lsls	r3, r3, #2
 8005d34:	440b      	add	r3, r1
 8005d36:	3326      	adds	r3, #38	; 0x26
 8005d38:	2210      	movs	r2, #16
 8005d3a:	801a      	strh	r2, [r3, #0]
 8005d3c:	e035      	b.n	8005daa <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005d3e:	4b42      	ldr	r3, [pc, #264]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005d40:	7819      	ldrb	r1, [r3, #0]
 8005d42:	2340      	movs	r3, #64	; 0x40
 8005d44:	2202      	movs	r2, #2
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f002 faa9 	bl	800829e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005d4c:	4b3e      	ldr	r3, [pc, #248]	; (8005e48 <USBD_CDC_Init+0x1e4>)
 8005d4e:	781b      	ldrb	r3, [r3, #0]
 8005d50:	f003 020f 	and.w	r2, r3, #15
 8005d54:	6879      	ldr	r1, [r7, #4]
 8005d56:	4613      	mov	r3, r2
 8005d58:	009b      	lsls	r3, r3, #2
 8005d5a:	4413      	add	r3, r2
 8005d5c:	009b      	lsls	r3, r3, #2
 8005d5e:	440b      	add	r3, r1
 8005d60:	3324      	adds	r3, #36	; 0x24
 8005d62:	2201      	movs	r2, #1
 8005d64:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005d66:	4b39      	ldr	r3, [pc, #228]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005d68:	7819      	ldrb	r1, [r3, #0]
 8005d6a:	2340      	movs	r3, #64	; 0x40
 8005d6c:	2202      	movs	r2, #2
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f002 fa95 	bl	800829e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005d74:	4b35      	ldr	r3, [pc, #212]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	f003 020f 	and.w	r2, r3, #15
 8005d7c:	6879      	ldr	r1, [r7, #4]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	009b      	lsls	r3, r3, #2
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d8c:	2201      	movs	r2, #1
 8005d8e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005d90:	4b2f      	ldr	r3, [pc, #188]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005d92:	781b      	ldrb	r3, [r3, #0]
 8005d94:	f003 020f 	and.w	r2, r3, #15
 8005d98:	6879      	ldr	r1, [r7, #4]
 8005d9a:	4613      	mov	r3, r2
 8005d9c:	009b      	lsls	r3, r3, #2
 8005d9e:	4413      	add	r3, r2
 8005da0:	009b      	lsls	r3, r3, #2
 8005da2:	440b      	add	r3, r1
 8005da4:	3326      	adds	r3, #38	; 0x26
 8005da6:	2210      	movs	r2, #16
 8005da8:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005daa:	4b29      	ldr	r3, [pc, #164]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005dac:	7819      	ldrb	r1, [r3, #0]
 8005dae:	2308      	movs	r3, #8
 8005db0:	2203      	movs	r2, #3
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f002 fa73 	bl	800829e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005db8:	4b25      	ldr	r3, [pc, #148]	; (8005e50 <USBD_CDC_Init+0x1ec>)
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	f003 020f 	and.w	r2, r3, #15
 8005dc0:	6879      	ldr	r1, [r7, #4]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	009b      	lsls	r3, r3, #2
 8005dc6:	4413      	add	r3, r2
 8005dc8:	009b      	lsls	r3, r3, #2
 8005dca:	440b      	add	r3, r1
 8005dcc:	3324      	adds	r3, #36	; 0x24
 8005dce:	2201      	movs	r2, #1
 8005dd0:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005de0:	687a      	ldr	r2, [r7, #4]
 8005de2:	33b0      	adds	r3, #176	; 0xb0
 8005de4:	009b      	lsls	r3, r3, #2
 8005de6:	4413      	add	r3, r2
 8005de8:	685b      	ldr	r3, [r3, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	2200      	movs	r2, #0
 8005df2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d101      	bne.n	8005e0c <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005e08:	2302      	movs	r3, #2
 8005e0a:	e018      	b.n	8005e3e <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	7c1b      	ldrb	r3, [r3, #16]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d10a      	bne.n	8005e2a <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e14:	4b0d      	ldr	r3, [pc, #52]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005e16:	7819      	ldrb	r1, [r3, #0]
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e1e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f002 fb2a 	bl	800847c <USBD_LL_PrepareReceive>
 8005e28:	e008      	b.n	8005e3c <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005e2a:	4b08      	ldr	r3, [pc, #32]	; (8005e4c <USBD_CDC_Init+0x1e8>)
 8005e2c:	7819      	ldrb	r1, [r3, #0]
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005e34:	2340      	movs	r3, #64	; 0x40
 8005e36:	6878      	ldr	r0, [r7, #4]
 8005e38:	f002 fb20 	bl	800847c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}
 8005e46:	bf00      	nop
 8005e48:	20000093 	.word	0x20000093
 8005e4c:	20000094 	.word	0x20000094
 8005e50:	20000095 	.word	0x20000095

08005e54 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
 8005e5c:	460b      	mov	r3, r1
 8005e5e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005e60:	4b3a      	ldr	r3, [pc, #232]	; (8005f4c <USBD_CDC_DeInit+0xf8>)
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	4619      	mov	r1, r3
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f002 fa3f 	bl	80082ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005e6c:	4b37      	ldr	r3, [pc, #220]	; (8005f4c <USBD_CDC_DeInit+0xf8>)
 8005e6e:	781b      	ldrb	r3, [r3, #0]
 8005e70:	f003 020f 	and.w	r2, r3, #15
 8005e74:	6879      	ldr	r1, [r7, #4]
 8005e76:	4613      	mov	r3, r2
 8005e78:	009b      	lsls	r3, r3, #2
 8005e7a:	4413      	add	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	440b      	add	r3, r1
 8005e80:	3324      	adds	r3, #36	; 0x24
 8005e82:	2200      	movs	r2, #0
 8005e84:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005e86:	4b32      	ldr	r3, [pc, #200]	; (8005f50 <USBD_CDC_DeInit+0xfc>)
 8005e88:	781b      	ldrb	r3, [r3, #0]
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f002 fa2c 	bl	80082ea <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005e92:	4b2f      	ldr	r3, [pc, #188]	; (8005f50 <USBD_CDC_DeInit+0xfc>)
 8005e94:	781b      	ldrb	r3, [r3, #0]
 8005e96:	f003 020f 	and.w	r2, r3, #15
 8005e9a:	6879      	ldr	r1, [r7, #4]
 8005e9c:	4613      	mov	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	4413      	add	r3, r2
 8005ea2:	009b      	lsls	r3, r3, #2
 8005ea4:	440b      	add	r3, r1
 8005ea6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005eaa:	2200      	movs	r2, #0
 8005eac:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005eae:	4b29      	ldr	r3, [pc, #164]	; (8005f54 <USBD_CDC_DeInit+0x100>)
 8005eb0:	781b      	ldrb	r3, [r3, #0]
 8005eb2:	4619      	mov	r1, r3
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f002 fa18 	bl	80082ea <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005eba:	4b26      	ldr	r3, [pc, #152]	; (8005f54 <USBD_CDC_DeInit+0x100>)
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	f003 020f 	and.w	r2, r3, #15
 8005ec2:	6879      	ldr	r1, [r7, #4]
 8005ec4:	4613      	mov	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	4413      	add	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	440b      	add	r3, r1
 8005ece:	3324      	adds	r3, #36	; 0x24
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005ed4:	4b1f      	ldr	r3, [pc, #124]	; (8005f54 <USBD_CDC_DeInit+0x100>)
 8005ed6:	781b      	ldrb	r3, [r3, #0]
 8005ed8:	f003 020f 	and.w	r2, r3, #15
 8005edc:	6879      	ldr	r1, [r7, #4]
 8005ede:	4613      	mov	r3, r2
 8005ee0:	009b      	lsls	r3, r3, #2
 8005ee2:	4413      	add	r3, r2
 8005ee4:	009b      	lsls	r3, r3, #2
 8005ee6:	440b      	add	r3, r1
 8005ee8:	3326      	adds	r3, #38	; 0x26
 8005eea:	2200      	movs	r2, #0
 8005eec:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	32b0      	adds	r2, #176	; 0xb0
 8005ef8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d01f      	beq.n	8005f40 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005f06:	687a      	ldr	r2, [r7, #4]
 8005f08:	33b0      	adds	r3, #176	; 0xb0
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	4413      	add	r3, r2
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	685b      	ldr	r3, [r3, #4]
 8005f12:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	32b0      	adds	r2, #176	; 0xb0
 8005f1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f22:	4618      	mov	r0, r3
 8005f24:	f002 faec 	bl	8008500 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	32b0      	adds	r2, #176	; 0xb0
 8005f32:	2100      	movs	r1, #0
 8005f34:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005f40:	2300      	movs	r3, #0
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	20000093 	.word	0x20000093
 8005f50:	20000094 	.word	0x20000094
 8005f54:	20000095 	.word	0x20000095

08005f58 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005f58:	b580      	push	{r7, lr}
 8005f5a:	b086      	sub	sp, #24
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
 8005f60:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	32b0      	adds	r2, #176	; 0xb0
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005f72:	2300      	movs	r3, #0
 8005f74:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005f76:	2300      	movs	r3, #0
 8005f78:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d101      	bne.n	8005f88 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005f84:	2303      	movs	r3, #3
 8005f86:	e0bf      	b.n	8006108 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	781b      	ldrb	r3, [r3, #0]
 8005f8c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d050      	beq.n	8006036 <USBD_CDC_Setup+0xde>
 8005f94:	2b20      	cmp	r3, #32
 8005f96:	f040 80af 	bne.w	80060f8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	88db      	ldrh	r3, [r3, #6]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d03a      	beq.n	8006018 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	781b      	ldrb	r3, [r3, #0]
 8005fa6:	b25b      	sxtb	r3, r3
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	da1b      	bge.n	8005fe4 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8005fb2:	687a      	ldr	r2, [r7, #4]
 8005fb4:	33b0      	adds	r3, #176	; 0xb0
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4413      	add	r3, r2
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	683a      	ldr	r2, [r7, #0]
 8005fc0:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005fc2:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005fc4:	683a      	ldr	r2, [r7, #0]
 8005fc6:	88d2      	ldrh	r2, [r2, #6]
 8005fc8:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	88db      	ldrh	r3, [r3, #6]
 8005fce:	2b07      	cmp	r3, #7
 8005fd0:	bf28      	it	cs
 8005fd2:	2307      	movcs	r3, #7
 8005fd4:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005fd6:	693b      	ldr	r3, [r7, #16]
 8005fd8:	89fa      	ldrh	r2, [r7, #14]
 8005fda:	4619      	mov	r1, r3
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f001 fd43 	bl	8007a68 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005fe2:	e090      	b.n	8006106 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	785a      	ldrb	r2, [r3, #1]
 8005fe8:	693b      	ldr	r3, [r7, #16]
 8005fea:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	88db      	ldrh	r3, [r3, #6]
 8005ff2:	2b3f      	cmp	r3, #63	; 0x3f
 8005ff4:	d803      	bhi.n	8005ffe <USBD_CDC_Setup+0xa6>
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	88db      	ldrh	r3, [r3, #6]
 8005ffa:	b2da      	uxtb	r2, r3
 8005ffc:	e000      	b.n	8006000 <USBD_CDC_Setup+0xa8>
 8005ffe:	2240      	movs	r2, #64	; 0x40
 8006000:	693b      	ldr	r3, [r7, #16]
 8006002:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8006006:	6939      	ldr	r1, [r7, #16]
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 800600e:	461a      	mov	r2, r3
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	f001 fd55 	bl	8007ac0 <USBD_CtlPrepareRx>
      break;
 8006016:	e076      	b.n	8006106 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800601e:	687a      	ldr	r2, [r7, #4]
 8006020:	33b0      	adds	r3, #176	; 0xb0
 8006022:	009b      	lsls	r3, r3, #2
 8006024:	4413      	add	r3, r2
 8006026:	685b      	ldr	r3, [r3, #4]
 8006028:	689b      	ldr	r3, [r3, #8]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	7850      	ldrb	r0, [r2, #1]
 800602e:	2200      	movs	r2, #0
 8006030:	6839      	ldr	r1, [r7, #0]
 8006032:	4798      	blx	r3
      break;
 8006034:	e067      	b.n	8006106 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	785b      	ldrb	r3, [r3, #1]
 800603a:	2b0b      	cmp	r3, #11
 800603c:	d851      	bhi.n	80060e2 <USBD_CDC_Setup+0x18a>
 800603e:	a201      	add	r2, pc, #4	; (adr r2, 8006044 <USBD_CDC_Setup+0xec>)
 8006040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006044:	08006075 	.word	0x08006075
 8006048:	080060f1 	.word	0x080060f1
 800604c:	080060e3 	.word	0x080060e3
 8006050:	080060e3 	.word	0x080060e3
 8006054:	080060e3 	.word	0x080060e3
 8006058:	080060e3 	.word	0x080060e3
 800605c:	080060e3 	.word	0x080060e3
 8006060:	080060e3 	.word	0x080060e3
 8006064:	080060e3 	.word	0x080060e3
 8006068:	080060e3 	.word	0x080060e3
 800606c:	0800609f 	.word	0x0800609f
 8006070:	080060c9 	.word	0x080060c9
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800607a:	b2db      	uxtb	r3, r3
 800607c:	2b03      	cmp	r3, #3
 800607e:	d107      	bne.n	8006090 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006080:	f107 030a 	add.w	r3, r7, #10
 8006084:	2202      	movs	r2, #2
 8006086:	4619      	mov	r1, r3
 8006088:	6878      	ldr	r0, [r7, #4]
 800608a:	f001 fced 	bl	8007a68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800608e:	e032      	b.n	80060f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8006090:	6839      	ldr	r1, [r7, #0]
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f001 fc77 	bl	8007986 <USBD_CtlError>
            ret = USBD_FAIL;
 8006098:	2303      	movs	r3, #3
 800609a:	75fb      	strb	r3, [r7, #23]
          break;
 800609c:	e02b      	b.n	80060f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b03      	cmp	r3, #3
 80060a8:	d107      	bne.n	80060ba <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80060aa:	f107 030d 	add.w	r3, r7, #13
 80060ae:	2201      	movs	r2, #1
 80060b0:	4619      	mov	r1, r3
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fcd8 	bl	8007a68 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060b8:	e01d      	b.n	80060f6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80060ba:	6839      	ldr	r1, [r7, #0]
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f001 fc62 	bl	8007986 <USBD_CtlError>
            ret = USBD_FAIL;
 80060c2:	2303      	movs	r3, #3
 80060c4:	75fb      	strb	r3, [r7, #23]
          break;
 80060c6:	e016      	b.n	80060f6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ce:	b2db      	uxtb	r3, r3
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d00f      	beq.n	80060f4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80060d4:	6839      	ldr	r1, [r7, #0]
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f001 fc55 	bl	8007986 <USBD_CtlError>
            ret = USBD_FAIL;
 80060dc:	2303      	movs	r3, #3
 80060de:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80060e0:	e008      	b.n	80060f4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 fc4e 	bl	8007986 <USBD_CtlError>
          ret = USBD_FAIL;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
          break;
 80060ee:	e002      	b.n	80060f6 <USBD_CDC_Setup+0x19e>
          break;
 80060f0:	bf00      	nop
 80060f2:	e008      	b.n	8006106 <USBD_CDC_Setup+0x1ae>
          break;
 80060f4:	bf00      	nop
      }
      break;
 80060f6:	e006      	b.n	8006106 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fc43 	bl	8007986 <USBD_CtlError>
      ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	75fb      	strb	r3, [r7, #23]
      break;
 8006104:	bf00      	nop
  }

  return (uint8_t)ret;
 8006106:	7dfb      	ldrb	r3, [r7, #23]
}
 8006108:	4618      	mov	r0, r3
 800610a:	3718      	adds	r7, #24
 800610c:	46bd      	mov	sp, r7
 800610e:	bd80      	pop	{r7, pc}

08006110 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b084      	sub	sp, #16
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
 8006118:	460b      	mov	r3, r1
 800611a:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006122:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	32b0      	adds	r2, #176	; 0xb0
 800612e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d101      	bne.n	800613a <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8006136:	2303      	movs	r3, #3
 8006138:	e065      	b.n	8006206 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	32b0      	adds	r2, #176	; 0xb0
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800614a:	78fb      	ldrb	r3, [r7, #3]
 800614c:	f003 020f 	and.w	r2, r3, #15
 8006150:	6879      	ldr	r1, [r7, #4]
 8006152:	4613      	mov	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	4413      	add	r3, r2
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	440b      	add	r3, r1
 800615c:	3318      	adds	r3, #24
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d02f      	beq.n	80061c4 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006164:	78fb      	ldrb	r3, [r7, #3]
 8006166:	f003 020f 	and.w	r2, r3, #15
 800616a:	6879      	ldr	r1, [r7, #4]
 800616c:	4613      	mov	r3, r2
 800616e:	009b      	lsls	r3, r3, #2
 8006170:	4413      	add	r3, r2
 8006172:	009b      	lsls	r3, r3, #2
 8006174:	440b      	add	r3, r1
 8006176:	3318      	adds	r3, #24
 8006178:	681a      	ldr	r2, [r3, #0]
 800617a:	78fb      	ldrb	r3, [r7, #3]
 800617c:	f003 010f 	and.w	r1, r3, #15
 8006180:	68f8      	ldr	r0, [r7, #12]
 8006182:	460b      	mov	r3, r1
 8006184:	00db      	lsls	r3, r3, #3
 8006186:	440b      	add	r3, r1
 8006188:	009b      	lsls	r3, r3, #2
 800618a:	4403      	add	r3, r0
 800618c:	3348      	adds	r3, #72	; 0x48
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	fbb2 f1f3 	udiv	r1, r2, r3
 8006194:	fb01 f303 	mul.w	r3, r1, r3
 8006198:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800619a:	2b00      	cmp	r3, #0
 800619c:	d112      	bne.n	80061c4 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800619e:	78fb      	ldrb	r3, [r7, #3]
 80061a0:	f003 020f 	and.w	r2, r3, #15
 80061a4:	6879      	ldr	r1, [r7, #4]
 80061a6:	4613      	mov	r3, r2
 80061a8:	009b      	lsls	r3, r3, #2
 80061aa:	4413      	add	r3, r2
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	3318      	adds	r3, #24
 80061b2:	2200      	movs	r2, #0
 80061b4:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80061b6:	78f9      	ldrb	r1, [r7, #3]
 80061b8:	2300      	movs	r3, #0
 80061ba:	2200      	movs	r2, #0
 80061bc:	6878      	ldr	r0, [r7, #4]
 80061be:	f002 f93c 	bl	800843a <USBD_LL_Transmit>
 80061c2:	e01f      	b.n	8006204 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	2200      	movs	r2, #0
 80061c8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061d2:	687a      	ldr	r2, [r7, #4]
 80061d4:	33b0      	adds	r3, #176	; 0xb0
 80061d6:	009b      	lsls	r3, r3, #2
 80061d8:	4413      	add	r3, r2
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	691b      	ldr	r3, [r3, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d010      	beq.n	8006204 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	33b0      	adds	r3, #176	; 0xb0
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	4413      	add	r3, r2
 80061f0:	685b      	ldr	r3, [r3, #4]
 80061f2:	691b      	ldr	r3, [r3, #16]
 80061f4:	68ba      	ldr	r2, [r7, #8]
 80061f6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8006200:	78fa      	ldrb	r2, [r7, #3]
 8006202:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	6078      	str	r0, [r7, #4]
 8006216:	460b      	mov	r3, r1
 8006218:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	32b0      	adds	r2, #176	; 0xb0
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	32b0      	adds	r2, #176	; 0xb0
 8006234:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006238:	2b00      	cmp	r3, #0
 800623a:	d101      	bne.n	8006240 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800623c:	2303      	movs	r3, #3
 800623e:	e01a      	b.n	8006276 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006240:	78fb      	ldrb	r3, [r7, #3]
 8006242:	4619      	mov	r1, r3
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f002 f93a 	bl	80084be <USBD_LL_GetRxDataSize>
 800624a:	4602      	mov	r2, r0
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	33b0      	adds	r3, #176	; 0xb0
 800625c:	009b      	lsls	r3, r3, #2
 800625e:	4413      	add	r3, r2
 8006260:	685b      	ldr	r3, [r3, #4]
 8006262:	68db      	ldr	r3, [r3, #12]
 8006264:	68fa      	ldr	r2, [r7, #12]
 8006266:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800626a:	68fa      	ldr	r2, [r7, #12]
 800626c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8006270:	4611      	mov	r1, r2
 8006272:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006274:	2300      	movs	r3, #0
}
 8006276:	4618      	mov	r0, r3
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}

0800627e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800627e:	b580      	push	{r7, lr}
 8006280:	b084      	sub	sp, #16
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	32b0      	adds	r2, #176	; 0xb0
 8006290:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006294:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d101      	bne.n	80062a0 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800629c:	2303      	movs	r3, #3
 800629e:	e025      	b.n	80062ec <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	33b0      	adds	r3, #176	; 0xb0
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	4413      	add	r3, r2
 80062ae:	685b      	ldr	r3, [r3, #4]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d01a      	beq.n	80062ea <USBD_CDC_EP0_RxReady+0x6c>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80062ba:	2bff      	cmp	r3, #255	; 0xff
 80062bc:	d015      	beq.n	80062ea <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	33b0      	adds	r3, #176	; 0xb0
 80062c8:	009b      	lsls	r3, r3, #2
 80062ca:	4413      	add	r3, r2
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	689b      	ldr	r3, [r3, #8]
 80062d0:	68fa      	ldr	r2, [r7, #12]
 80062d2:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80062d6:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80062d8:	68fa      	ldr	r2, [r7, #12]
 80062da:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80062de:	b292      	uxth	r2, r2
 80062e0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	22ff      	movs	r2, #255	; 0xff
 80062e6:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80062ea:	2300      	movs	r3, #0
}
 80062ec:	4618      	mov	r0, r3
 80062ee:	3710      	adds	r7, #16
 80062f0:	46bd      	mov	sp, r7
 80062f2:	bd80      	pop	{r7, pc}

080062f4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80062f4:	b580      	push	{r7, lr}
 80062f6:	b086      	sub	sp, #24
 80062f8:	af00      	add	r7, sp, #0
 80062fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062fc:	2182      	movs	r1, #130	; 0x82
 80062fe:	4818      	ldr	r0, [pc, #96]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006300:	f000 fd09 	bl	8006d16 <USBD_GetEpDesc>
 8006304:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006306:	2101      	movs	r1, #1
 8006308:	4815      	ldr	r0, [pc, #84]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800630a:	f000 fd04 	bl	8006d16 <USBD_GetEpDesc>
 800630e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006310:	2181      	movs	r1, #129	; 0x81
 8006312:	4813      	ldr	r0, [pc, #76]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006314:	f000 fcff 	bl	8006d16 <USBD_GetEpDesc>
 8006318:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800631a:	697b      	ldr	r3, [r7, #20]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d002      	beq.n	8006326 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	2210      	movs	r2, #16
 8006324:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d006      	beq.n	800633a <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800632c:	693b      	ldr	r3, [r7, #16]
 800632e:	2200      	movs	r2, #0
 8006330:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006334:	711a      	strb	r2, [r3, #4]
 8006336:	2200      	movs	r2, #0
 8006338:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d006      	beq.n	800634e <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2200      	movs	r2, #0
 8006344:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006348:	711a      	strb	r2, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	2243      	movs	r2, #67	; 0x43
 8006352:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006354:	4b02      	ldr	r3, [pc, #8]	; (8006360 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8006356:	4618      	mov	r0, r3
 8006358:	3718      	adds	r7, #24
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000050 	.word	0x20000050

08006364 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b086      	sub	sp, #24
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800636c:	2182      	movs	r1, #130	; 0x82
 800636e:	4818      	ldr	r0, [pc, #96]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006370:	f000 fcd1 	bl	8006d16 <USBD_GetEpDesc>
 8006374:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8006376:	2101      	movs	r1, #1
 8006378:	4815      	ldr	r0, [pc, #84]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800637a:	f000 fccc 	bl	8006d16 <USBD_GetEpDesc>
 800637e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006380:	2181      	movs	r1, #129	; 0x81
 8006382:	4813      	ldr	r0, [pc, #76]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006384:	f000 fcc7 	bl	8006d16 <USBD_GetEpDesc>
 8006388:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800638a:	697b      	ldr	r3, [r7, #20]
 800638c:	2b00      	cmp	r3, #0
 800638e:	d002      	beq.n	8006396 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2210      	movs	r2, #16
 8006394:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006396:	693b      	ldr	r3, [r7, #16]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d006      	beq.n	80063aa <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	2200      	movs	r2, #0
 80063a0:	711a      	strb	r2, [r3, #4]
 80063a2:	2200      	movs	r2, #0
 80063a4:	f042 0202 	orr.w	r2, r2, #2
 80063a8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d006      	beq.n	80063be <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	2200      	movs	r2, #0
 80063b4:	711a      	strb	r2, [r3, #4]
 80063b6:	2200      	movs	r2, #0
 80063b8:	f042 0202 	orr.w	r2, r2, #2
 80063bc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2243      	movs	r2, #67	; 0x43
 80063c2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80063c4:	4b02      	ldr	r3, [pc, #8]	; (80063d0 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80063c6:	4618      	mov	r0, r3
 80063c8:	3718      	adds	r7, #24
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}
 80063ce:	bf00      	nop
 80063d0:	20000050 	.word	0x20000050

080063d4 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b086      	sub	sp, #24
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80063dc:	2182      	movs	r1, #130	; 0x82
 80063de:	4818      	ldr	r0, [pc, #96]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063e0:	f000 fc99 	bl	8006d16 <USBD_GetEpDesc>
 80063e4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80063e6:	2101      	movs	r1, #1
 80063e8:	4815      	ldr	r0, [pc, #84]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063ea:	f000 fc94 	bl	8006d16 <USBD_GetEpDesc>
 80063ee:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80063f0:	2181      	movs	r1, #129	; 0x81
 80063f2:	4813      	ldr	r0, [pc, #76]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80063f4:	f000 fc8f 	bl	8006d16 <USBD_GetEpDesc>
 80063f8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80063fa:	697b      	ldr	r3, [r7, #20]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d002      	beq.n	8006406 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006400:	697b      	ldr	r3, [r7, #20]
 8006402:	2210      	movs	r2, #16
 8006404:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006406:	693b      	ldr	r3, [r7, #16]
 8006408:	2b00      	cmp	r3, #0
 800640a:	d006      	beq.n	800641a <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	2200      	movs	r2, #0
 8006410:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006414:	711a      	strb	r2, [r3, #4]
 8006416:	2200      	movs	r2, #0
 8006418:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d006      	beq.n	800642e <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2200      	movs	r2, #0
 8006424:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006428:	711a      	strb	r2, [r3, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2243      	movs	r2, #67	; 0x43
 8006432:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006434:	4b02      	ldr	r3, [pc, #8]	; (8006440 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	20000050 	.word	0x20000050

08006444 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006444:	b480      	push	{r7}
 8006446:	b083      	sub	sp, #12
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	220a      	movs	r2, #10
 8006450:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006452:	4b03      	ldr	r3, [pc, #12]	; (8006460 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006454:	4618      	mov	r0, r3
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr
 8006460:	2000000c 	.word	0x2000000c

08006464 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
 800646c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d101      	bne.n	8006478 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006474:	2303      	movs	r3, #3
 8006476:	e009      	b.n	800648c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800647e:	687a      	ldr	r2, [r7, #4]
 8006480:	33b0      	adds	r3, #176	; 0xb0
 8006482:	009b      	lsls	r3, r3, #2
 8006484:	4413      	add	r3, r2
 8006486:	683a      	ldr	r2, [r7, #0]
 8006488:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8006498:	b480      	push	{r7}
 800649a:	b087      	sub	sp, #28
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	32b0      	adds	r2, #176	; 0xb0
 80064ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064b2:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80064b4:	697b      	ldr	r3, [r7, #20]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d101      	bne.n	80064be <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80064ba:	2303      	movs	r3, #3
 80064bc:	e008      	b.n	80064d0 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80064be:	697b      	ldr	r3, [r7, #20]
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	687a      	ldr	r2, [r7, #4]
 80064ca:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80064ce:	2300      	movs	r3, #0
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	371c      	adds	r7, #28
 80064d4:	46bd      	mov	sp, r7
 80064d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064da:	4770      	bx	lr

080064dc <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80064dc:	b480      	push	{r7}
 80064de:	b085      	sub	sp, #20
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	6078      	str	r0, [r7, #4]
 80064e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	32b0      	adds	r2, #176	; 0xb0
 80064f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064f4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d101      	bne.n	8006500 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80064fc:	2303      	movs	r3, #3
 80064fe:	e004      	b.n	800650a <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	683a      	ldr	r2, [r7, #0]
 8006504:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3714      	adds	r7, #20
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
	...

08006518 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32b0      	adds	r2, #176	; 0xb0
 800652a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	32b0      	adds	r2, #176	; 0xb0
 800653a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653e:	2b00      	cmp	r3, #0
 8006540:	d101      	bne.n	8006546 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006542:	2303      	movs	r3, #3
 8006544:	e018      	b.n	8006578 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	7c1b      	ldrb	r3, [r3, #16]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d10a      	bne.n	8006564 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800654e:	4b0c      	ldr	r3, [pc, #48]	; (8006580 <USBD_CDC_ReceivePacket+0x68>)
 8006550:	7819      	ldrb	r1, [r3, #0]
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8006558:	f44f 7300 	mov.w	r3, #512	; 0x200
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f001 ff8d 	bl	800847c <USBD_LL_PrepareReceive>
 8006562:	e008      	b.n	8006576 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <USBD_CDC_ReceivePacket+0x68>)
 8006566:	7819      	ldrb	r1, [r3, #0]
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f001 ff83 	bl	800847c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3710      	adds	r7, #16
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}
 8006580:	20000094 	.word	0x20000094

08006584 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	4613      	mov	r3, r2
 8006590:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006598:	2303      	movs	r3, #3
 800659a:	e01f      	b.n	80065dc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d003      	beq.n	80065c2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	68ba      	ldr	r2, [r7, #8]
 80065be:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	79fa      	ldrb	r2, [r7, #7]
 80065ce:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80065d0:	68f8      	ldr	r0, [r7, #12]
 80065d2:	f001 fdfd 	bl	80081d0 <USBD_LL_Init>
 80065d6:	4603      	mov	r3, r0
 80065d8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80065da:	7dfb      	ldrb	r3, [r7, #23]
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3718      	adds	r7, #24
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b084      	sub	sp, #16
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
 80065ec:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80065ee:	2300      	movs	r3, #0
 80065f0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e025      	b.n	8006648 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	683a      	ldr	r2, [r7, #0]
 8006600:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32ae      	adds	r2, #174	; 0xae
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	2b00      	cmp	r3, #0
 8006616:	d00f      	beq.n	8006638 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	32ae      	adds	r2, #174	; 0xae
 8006622:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	f107 020e 	add.w	r2, r7, #14
 800662c:	4610      	mov	r0, r2
 800662e:	4798      	blx	r3
 8006630:	4602      	mov	r2, r0
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006646:	2300      	movs	r3, #0
}
 8006648:	4618      	mov	r0, r3
 800664a:	3710      	adds	r7, #16
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}

08006650 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b082      	sub	sp, #8
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f001 fe05 	bl	8008268 <USBD_LL_Start>
 800665e:	4603      	mov	r3, r0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3708      	adds	r7, #8
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006668:	b480      	push	{r7}
 800666a:	b083      	sub	sp, #12
 800666c:	af00      	add	r7, sp, #0
 800666e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006670:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b084      	sub	sp, #16
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800668a:	2300      	movs	r3, #0
 800668c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006694:	2b00      	cmp	r3, #0
 8006696:	d009      	beq.n	80066ac <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	78fa      	ldrb	r2, [r7, #3]
 80066a2:	4611      	mov	r1, r2
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	4798      	blx	r3
 80066a8:	4603      	mov	r3, r0
 80066aa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3710      	adds	r7, #16
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80066c2:	2300      	movs	r3, #0
 80066c4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066cc:	685b      	ldr	r3, [r3, #4]
 80066ce:	78fa      	ldrb	r2, [r7, #3]
 80066d0:	4611      	mov	r1, r2
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	4798      	blx	r3
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80066dc:	2303      	movs	r3, #3
 80066de:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e2:	4618      	mov	r0, r3
 80066e4:	3710      	adds	r7, #16
 80066e6:	46bd      	mov	sp, r7
 80066e8:	bd80      	pop	{r7, pc}

080066ea <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80066ea:	b580      	push	{r7, lr}
 80066ec:	b084      	sub	sp, #16
 80066ee:	af00      	add	r7, sp, #0
 80066f0:	6078      	str	r0, [r7, #4]
 80066f2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80066fa:	6839      	ldr	r1, [r7, #0]
 80066fc:	4618      	mov	r0, r3
 80066fe:	f001 f908 	bl	8007912 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2201      	movs	r2, #1
 8006706:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006710:	461a      	mov	r2, r3
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800671e:	f003 031f 	and.w	r3, r3, #31
 8006722:	2b02      	cmp	r3, #2
 8006724:	d01a      	beq.n	800675c <USBD_LL_SetupStage+0x72>
 8006726:	2b02      	cmp	r3, #2
 8006728:	d822      	bhi.n	8006770 <USBD_LL_SetupStage+0x86>
 800672a:	2b00      	cmp	r3, #0
 800672c:	d002      	beq.n	8006734 <USBD_LL_SetupStage+0x4a>
 800672e:	2b01      	cmp	r3, #1
 8006730:	d00a      	beq.n	8006748 <USBD_LL_SetupStage+0x5e>
 8006732:	e01d      	b.n	8006770 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800673a:	4619      	mov	r1, r3
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fb5f 	bl	8006e00 <USBD_StdDevReq>
 8006742:	4603      	mov	r3, r0
 8006744:	73fb      	strb	r3, [r7, #15]
      break;
 8006746:	e020      	b.n	800678a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800674e:	4619      	mov	r1, r3
 8006750:	6878      	ldr	r0, [r7, #4]
 8006752:	f000 fbc7 	bl	8006ee4 <USBD_StdItfReq>
 8006756:	4603      	mov	r3, r0
 8006758:	73fb      	strb	r3, [r7, #15]
      break;
 800675a:	e016      	b.n	800678a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006762:	4619      	mov	r1, r3
 8006764:	6878      	ldr	r0, [r7, #4]
 8006766:	f000 fc29 	bl	8006fbc <USBD_StdEPReq>
 800676a:	4603      	mov	r3, r0
 800676c:	73fb      	strb	r3, [r7, #15]
      break;
 800676e:	e00c      	b.n	800678a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006776:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800677a:	b2db      	uxtb	r3, r3
 800677c:	4619      	mov	r1, r3
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f001 fdd2 	bl	8008328 <USBD_LL_StallEP>
 8006784:	4603      	mov	r3, r0
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	bf00      	nop
  }

  return ret;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3710      	adds	r7, #16
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}

08006794 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b086      	sub	sp, #24
 8006798:	af00      	add	r7, sp, #0
 800679a:	60f8      	str	r0, [r7, #12]
 800679c:	460b      	mov	r3, r1
 800679e:	607a      	str	r2, [r7, #4]
 80067a0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80067a2:	2300      	movs	r3, #0
 80067a4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80067a6:	7afb      	ldrb	r3, [r7, #11]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d16e      	bne.n	800688a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80067b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80067ba:	2b03      	cmp	r3, #3
 80067bc:	f040 8098 	bne.w	80068f0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80067c0:	693b      	ldr	r3, [r7, #16]
 80067c2:	689a      	ldr	r2, [r3, #8]
 80067c4:	693b      	ldr	r3, [r7, #16]
 80067c6:	68db      	ldr	r3, [r3, #12]
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d913      	bls.n	80067f4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	689a      	ldr	r2, [r3, #8]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	1ad2      	subs	r2, r2, r3
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80067da:	693b      	ldr	r3, [r7, #16]
 80067dc:	68da      	ldr	r2, [r3, #12]
 80067de:	693b      	ldr	r3, [r7, #16]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	4293      	cmp	r3, r2
 80067e4:	bf28      	it	cs
 80067e6:	4613      	movcs	r3, r2
 80067e8:	461a      	mov	r2, r3
 80067ea:	6879      	ldr	r1, [r7, #4]
 80067ec:	68f8      	ldr	r0, [r7, #12]
 80067ee:	f001 f984 	bl	8007afa <USBD_CtlContinueRx>
 80067f2:	e07d      	b.n	80068f0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80067fa:	f003 031f 	and.w	r3, r3, #31
 80067fe:	2b02      	cmp	r3, #2
 8006800:	d014      	beq.n	800682c <USBD_LL_DataOutStage+0x98>
 8006802:	2b02      	cmp	r3, #2
 8006804:	d81d      	bhi.n	8006842 <USBD_LL_DataOutStage+0xae>
 8006806:	2b00      	cmp	r3, #0
 8006808:	d002      	beq.n	8006810 <USBD_LL_DataOutStage+0x7c>
 800680a:	2b01      	cmp	r3, #1
 800680c:	d003      	beq.n	8006816 <USBD_LL_DataOutStage+0x82>
 800680e:	e018      	b.n	8006842 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006810:	2300      	movs	r3, #0
 8006812:	75bb      	strb	r3, [r7, #22]
            break;
 8006814:	e018      	b.n	8006848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800681c:	b2db      	uxtb	r3, r3
 800681e:	4619      	mov	r1, r3
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f000 fa5e 	bl	8006ce2 <USBD_CoreFindIF>
 8006826:	4603      	mov	r3, r0
 8006828:	75bb      	strb	r3, [r7, #22]
            break;
 800682a:	e00d      	b.n	8006848 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006832:	b2db      	uxtb	r3, r3
 8006834:	4619      	mov	r1, r3
 8006836:	68f8      	ldr	r0, [r7, #12]
 8006838:	f000 fa60 	bl	8006cfc <USBD_CoreFindEP>
 800683c:	4603      	mov	r3, r0
 800683e:	75bb      	strb	r3, [r7, #22]
            break;
 8006840:	e002      	b.n	8006848 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006842:	2300      	movs	r3, #0
 8006844:	75bb      	strb	r3, [r7, #22]
            break;
 8006846:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006848:	7dbb      	ldrb	r3, [r7, #22]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d119      	bne.n	8006882 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006854:	b2db      	uxtb	r3, r3
 8006856:	2b03      	cmp	r3, #3
 8006858:	d113      	bne.n	8006882 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800685a:	7dba      	ldrb	r2, [r7, #22]
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	32ae      	adds	r2, #174	; 0xae
 8006860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d00b      	beq.n	8006882 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800686a:	7dba      	ldrb	r2, [r7, #22]
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006872:	7dba      	ldrb	r2, [r7, #22]
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	32ae      	adds	r2, #174	; 0xae
 8006878:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f001 f94a 	bl	8007b1c <USBD_CtlSendStatus>
 8006888:	e032      	b.n	80068f0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800688a:	7afb      	ldrb	r3, [r7, #11]
 800688c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006890:	b2db      	uxtb	r3, r3
 8006892:	4619      	mov	r1, r3
 8006894:	68f8      	ldr	r0, [r7, #12]
 8006896:	f000 fa31 	bl	8006cfc <USBD_CoreFindEP>
 800689a:	4603      	mov	r3, r0
 800689c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800689e:	7dbb      	ldrb	r3, [r7, #22]
 80068a0:	2bff      	cmp	r3, #255	; 0xff
 80068a2:	d025      	beq.n	80068f0 <USBD_LL_DataOutStage+0x15c>
 80068a4:	7dbb      	ldrb	r3, [r7, #22]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d122      	bne.n	80068f0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	2b03      	cmp	r3, #3
 80068b4:	d117      	bne.n	80068e6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80068b6:	7dba      	ldrb	r2, [r7, #22]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	32ae      	adds	r2, #174	; 0xae
 80068bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c0:	699b      	ldr	r3, [r3, #24]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d00f      	beq.n	80068e6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80068c6:	7dba      	ldrb	r2, [r7, #22]
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80068ce:	7dba      	ldrb	r2, [r7, #22]
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	32ae      	adds	r2, #174	; 0xae
 80068d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068d8:	699b      	ldr	r3, [r3, #24]
 80068da:	7afa      	ldrb	r2, [r7, #11]
 80068dc:	4611      	mov	r1, r2
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	e000      	b.n	80068f2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80068f0:	2300      	movs	r3, #0
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	460b      	mov	r3, r1
 8006904:	607a      	str	r2, [r7, #4]
 8006906:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006908:	7afb      	ldrb	r3, [r7, #11]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d16f      	bne.n	80069ee <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	3314      	adds	r3, #20
 8006912:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800691a:	2b02      	cmp	r3, #2
 800691c:	d15a      	bne.n	80069d4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800691e:	693b      	ldr	r3, [r7, #16]
 8006920:	689a      	ldr	r2, [r3, #8]
 8006922:	693b      	ldr	r3, [r7, #16]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	429a      	cmp	r2, r3
 8006928:	d914      	bls.n	8006954 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800692a:	693b      	ldr	r3, [r7, #16]
 800692c:	689a      	ldr	r2, [r3, #8]
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	68db      	ldr	r3, [r3, #12]
 8006932:	1ad2      	subs	r2, r2, r3
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006938:	693b      	ldr	r3, [r7, #16]
 800693a:	689b      	ldr	r3, [r3, #8]
 800693c:	461a      	mov	r2, r3
 800693e:	6879      	ldr	r1, [r7, #4]
 8006940:	68f8      	ldr	r0, [r7, #12]
 8006942:	f001 f8ac 	bl	8007a9e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006946:	2300      	movs	r3, #0
 8006948:	2200      	movs	r2, #0
 800694a:	2100      	movs	r1, #0
 800694c:	68f8      	ldr	r0, [r7, #12]
 800694e:	f001 fd95 	bl	800847c <USBD_LL_PrepareReceive>
 8006952:	e03f      	b.n	80069d4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	68da      	ldr	r2, [r3, #12]
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	689b      	ldr	r3, [r3, #8]
 800695c:	429a      	cmp	r2, r3
 800695e:	d11c      	bne.n	800699a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	685a      	ldr	r2, [r3, #4]
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006968:	429a      	cmp	r2, r3
 800696a:	d316      	bcc.n	800699a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	685a      	ldr	r2, [r3, #4]
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006976:	429a      	cmp	r2, r3
 8006978:	d20f      	bcs.n	800699a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800697a:	2200      	movs	r2, #0
 800697c:	2100      	movs	r1, #0
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f001 f88d 	bl	8007a9e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800698c:	2300      	movs	r3, #0
 800698e:	2200      	movs	r2, #0
 8006990:	2100      	movs	r1, #0
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f001 fd72 	bl	800847c <USBD_LL_PrepareReceive>
 8006998:	e01c      	b.n	80069d4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069a0:	b2db      	uxtb	r3, r3
 80069a2:	2b03      	cmp	r3, #3
 80069a4:	d10f      	bne.n	80069c6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069ac:	68db      	ldr	r3, [r3, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d009      	beq.n	80069c6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	2200      	movs	r2, #0
 80069b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80069c6:	2180      	movs	r1, #128	; 0x80
 80069c8:	68f8      	ldr	r0, [r7, #12]
 80069ca:	f001 fcad 	bl	8008328 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f001 f8b7 	bl	8007b42 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d03a      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f7ff fe42 	bl	8006668 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80069ec:	e032      	b.n	8006a54 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80069ee:	7afb      	ldrb	r3, [r7, #11]
 80069f0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80069f4:	b2db      	uxtb	r3, r3
 80069f6:	4619      	mov	r1, r3
 80069f8:	68f8      	ldr	r0, [r7, #12]
 80069fa:	f000 f97f 	bl	8006cfc <USBD_CoreFindEP>
 80069fe:	4603      	mov	r3, r0
 8006a00:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006a02:	7dfb      	ldrb	r3, [r7, #23]
 8006a04:	2bff      	cmp	r3, #255	; 0xff
 8006a06:	d025      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
 8006a08:	7dfb      	ldrb	r3, [r7, #23]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d122      	bne.n	8006a54 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a14:	b2db      	uxtb	r3, r3
 8006a16:	2b03      	cmp	r3, #3
 8006a18:	d11c      	bne.n	8006a54 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006a1a:	7dfa      	ldrb	r2, [r7, #23]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	32ae      	adds	r2, #174	; 0xae
 8006a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a24:	695b      	ldr	r3, [r3, #20]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d014      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006a2a:	7dfa      	ldrb	r2, [r7, #23]
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006a32:	7dfa      	ldrb	r2, [r7, #23]
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	32ae      	adds	r2, #174	; 0xae
 8006a38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a3c:	695b      	ldr	r3, [r3, #20]
 8006a3e:	7afa      	ldrb	r2, [r7, #11]
 8006a40:	4611      	mov	r1, r2
 8006a42:	68f8      	ldr	r0, [r7, #12]
 8006a44:	4798      	blx	r3
 8006a46:	4603      	mov	r3, r0
 8006a48:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006a4a:	7dbb      	ldrb	r3, [r7, #22]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d001      	beq.n	8006a54 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006a50:	7dbb      	ldrb	r3, [r7, #22]
 8006a52:	e000      	b.n	8006a56 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006a54:	2300      	movs	r3, #0
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	3718      	adds	r7, #24
 8006a5a:	46bd      	mov	sp, r7
 8006a5c:	bd80      	pop	{r7, pc}

08006a5e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b084      	sub	sp, #16
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a66:	2300      	movs	r3, #0
 8006a68:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	2201      	movs	r2, #1
 8006a6e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	2200      	movs	r2, #0
 8006a76:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2200      	movs	r2, #0
 8006a84:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d014      	beq.n	8006ac4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d00e      	beq.n	8006ac4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006aac:	685b      	ldr	r3, [r3, #4]
 8006aae:	687a      	ldr	r2, [r7, #4]
 8006ab0:	6852      	ldr	r2, [r2, #4]
 8006ab2:	b2d2      	uxtb	r2, r2
 8006ab4:	4611      	mov	r1, r2
 8006ab6:	6878      	ldr	r0, [r7, #4]
 8006ab8:	4798      	blx	r3
 8006aba:	4603      	mov	r3, r0
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d001      	beq.n	8006ac4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ac4:	2340      	movs	r3, #64	; 0x40
 8006ac6:	2200      	movs	r2, #0
 8006ac8:	2100      	movs	r1, #0
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f001 fbe7 	bl	800829e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2201      	movs	r2, #1
 8006ad4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2240      	movs	r2, #64	; 0x40
 8006adc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006ae0:	2340      	movs	r3, #64	; 0x40
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2180      	movs	r1, #128	; 0x80
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fbd9 	bl	800829e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2201      	movs	r2, #1
 8006af0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2240      	movs	r2, #64	; 0x40
 8006af6:	621a      	str	r2, [r3, #32]

  return ret;
 8006af8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3710      	adds	r7, #16
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}

08006b02 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006b02:	b480      	push	{r7}
 8006b04:	b083      	sub	sp, #12
 8006b06:	af00      	add	r7, sp, #0
 8006b08:	6078      	str	r0, [r7, #4]
 8006b0a:	460b      	mov	r3, r1
 8006b0c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	78fa      	ldrb	r2, [r7, #3]
 8006b12:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006b14:	2300      	movs	r3, #0
}
 8006b16:	4618      	mov	r0, r3
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b30:	b2da      	uxtb	r2, r3
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2204      	movs	r2, #4
 8006b3c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006b40:	2300      	movs	r3, #0
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	370c      	adds	r7, #12
 8006b46:	46bd      	mov	sp, r7
 8006b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b4c:	4770      	bx	lr

08006b4e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006b4e:	b480      	push	{r7}
 8006b50:	b083      	sub	sp, #12
 8006b52:	af00      	add	r7, sp, #0
 8006b54:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b5c:	b2db      	uxtb	r3, r3
 8006b5e:	2b04      	cmp	r3, #4
 8006b60:	d106      	bne.n	8006b70 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006b68:	b2da      	uxtb	r2, r3
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006b70:	2300      	movs	r3, #0
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	370c      	adds	r7, #12
 8006b76:	46bd      	mov	sp, r7
 8006b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7c:	4770      	bx	lr

08006b7e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006b7e:	b580      	push	{r7, lr}
 8006b80:	b082      	sub	sp, #8
 8006b82:	af00      	add	r7, sp, #0
 8006b84:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b8c:	b2db      	uxtb	r3, r3
 8006b8e:	2b03      	cmp	r3, #3
 8006b90:	d110      	bne.n	8006bb4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00b      	beq.n	8006bb4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ba2:	69db      	ldr	r3, [r3, #28]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006bae:	69db      	ldr	r3, [r3, #28]
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006bb4:	2300      	movs	r3, #0
}
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	3708      	adds	r7, #8
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	bd80      	pop	{r7, pc}

08006bbe <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006bbe:	b580      	push	{r7, lr}
 8006bc0:	b082      	sub	sp, #8
 8006bc2:	af00      	add	r7, sp, #0
 8006bc4:	6078      	str	r0, [r7, #4]
 8006bc6:	460b      	mov	r3, r1
 8006bc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	32ae      	adds	r2, #174	; 0xae
 8006bd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d101      	bne.n	8006be0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e01c      	b.n	8006c1a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b03      	cmp	r3, #3
 8006bea:	d115      	bne.n	8006c18 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	32ae      	adds	r2, #174	; 0xae
 8006bf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bfa:	6a1b      	ldr	r3, [r3, #32]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00b      	beq.n	8006c18 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	32ae      	adds	r2, #174	; 0xae
 8006c0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	78fa      	ldrb	r2, [r7, #3]
 8006c12:	4611      	mov	r1, r2
 8006c14:	6878      	ldr	r0, [r7, #4]
 8006c16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c18:	2300      	movs	r3, #0
}
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	3708      	adds	r7, #8
 8006c1e:	46bd      	mov	sp, r7
 8006c20:	bd80      	pop	{r7, pc}

08006c22 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006c22:	b580      	push	{r7, lr}
 8006c24:	b082      	sub	sp, #8
 8006c26:	af00      	add	r7, sp, #0
 8006c28:	6078      	str	r0, [r7, #4]
 8006c2a:	460b      	mov	r3, r1
 8006c2c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	32ae      	adds	r2, #174	; 0xae
 8006c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d101      	bne.n	8006c44 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006c40:	2303      	movs	r3, #3
 8006c42:	e01c      	b.n	8006c7e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c4a:	b2db      	uxtb	r3, r3
 8006c4c:	2b03      	cmp	r3, #3
 8006c4e:	d115      	bne.n	8006c7c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	32ae      	adds	r2, #174	; 0xae
 8006c5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d00b      	beq.n	8006c7c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	32ae      	adds	r2, #174	; 0xae
 8006c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	78fa      	ldrb	r2, [r7, #3]
 8006c76:	4611      	mov	r1, r2
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006c7c:	2300      	movs	r3, #0
}
 8006c7e:	4618      	mov	r0, r3
 8006c80:	3708      	adds	r7, #8
 8006c82:	46bd      	mov	sp, r7
 8006c84:	bd80      	pop	{r7, pc}

08006c86 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006c86:	b480      	push	{r7}
 8006c88:	b083      	sub	sp, #12
 8006c8a:	af00      	add	r7, sp, #0
 8006c8c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006c8e:	2300      	movs	r3, #0
}
 8006c90:	4618      	mov	r0, r3
 8006c92:	370c      	adds	r7, #12
 8006c94:	46bd      	mov	sp, r7
 8006c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9a:	4770      	bx	lr

08006c9c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b084      	sub	sp, #16
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d00e      	beq.n	8006cd8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006cc0:	685b      	ldr	r3, [r3, #4]
 8006cc2:	687a      	ldr	r2, [r7, #4]
 8006cc4:	6852      	ldr	r2, [r2, #4]
 8006cc6:	b2d2      	uxtb	r2, r2
 8006cc8:	4611      	mov	r1, r2
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	4798      	blx	r3
 8006cce:	4603      	mov	r3, r0
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d001      	beq.n	8006cd8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006cd4:	2303      	movs	r3, #3
 8006cd6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cda:	4618      	mov	r0, r3
 8006cdc:	3710      	adds	r7, #16
 8006cde:	46bd      	mov	sp, r7
 8006ce0:	bd80      	pop	{r7, pc}

08006ce2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
 8006cea:	460b      	mov	r3, r1
 8006cec:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006cee:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006cf0:	4618      	mov	r0, r3
 8006cf2:	370c      	adds	r7, #12
 8006cf4:	46bd      	mov	sp, r7
 8006cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cfa:	4770      	bx	lr

08006cfc <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
 8006d04:	460b      	mov	r3, r1
 8006d06:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006d08:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	370c      	adds	r7, #12
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d14:	4770      	bx	lr

08006d16 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006d16:	b580      	push	{r7, lr}
 8006d18:	b086      	sub	sp, #24
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	6078      	str	r0, [r7, #4]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	885b      	ldrh	r3, [r3, #2]
 8006d32:	b29a      	uxth	r2, r3
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	781b      	ldrb	r3, [r3, #0]
 8006d38:	b29b      	uxth	r3, r3
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d920      	bls.n	8006d80 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	b29b      	uxth	r3, r3
 8006d44:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006d46:	e013      	b.n	8006d70 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006d48:	f107 030a 	add.w	r3, r7, #10
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	6978      	ldr	r0, [r7, #20]
 8006d50:	f000 f81b 	bl	8006d8a <USBD_GetNextDesc>
 8006d54:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006d56:	697b      	ldr	r3, [r7, #20]
 8006d58:	785b      	ldrb	r3, [r3, #1]
 8006d5a:	2b05      	cmp	r3, #5
 8006d5c:	d108      	bne.n	8006d70 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	789b      	ldrb	r3, [r3, #2]
 8006d66:	78fa      	ldrb	r2, [r7, #3]
 8006d68:	429a      	cmp	r2, r3
 8006d6a:	d008      	beq.n	8006d7e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	885b      	ldrh	r3, [r3, #2]
 8006d74:	b29a      	uxth	r2, r3
 8006d76:	897b      	ldrh	r3, [r7, #10]
 8006d78:	429a      	cmp	r2, r3
 8006d7a:	d8e5      	bhi.n	8006d48 <USBD_GetEpDesc+0x32>
 8006d7c:	e000      	b.n	8006d80 <USBD_GetEpDesc+0x6a>
          break;
 8006d7e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006d80:	693b      	ldr	r3, [r7, #16]
}
 8006d82:	4618      	mov	r0, r3
 8006d84:	3718      	adds	r7, #24
 8006d86:	46bd      	mov	sp, r7
 8006d88:	bd80      	pop	{r7, pc}

08006d8a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006d8a:	b480      	push	{r7}
 8006d8c:	b085      	sub	sp, #20
 8006d8e:	af00      	add	r7, sp, #0
 8006d90:	6078      	str	r0, [r7, #4]
 8006d92:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	881a      	ldrh	r2, [r3, #0]
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b29b      	uxth	r3, r3
 8006da2:	4413      	add	r3, r2
 8006da4:	b29a      	uxth	r2, r3
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	461a      	mov	r2, r3
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	4413      	add	r3, r2
 8006db4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006db6:	68fb      	ldr	r3, [r7, #12]
}
 8006db8:	4618      	mov	r0, r3
 8006dba:	3714      	adds	r7, #20
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b087      	sub	sp, #28
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006dd0:	697b      	ldr	r3, [r7, #20]
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006dd6:	697b      	ldr	r3, [r7, #20]
 8006dd8:	3301      	adds	r3, #1
 8006dda:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006ddc:	697b      	ldr	r3, [r7, #20]
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006de2:	8a3b      	ldrh	r3, [r7, #16]
 8006de4:	021b      	lsls	r3, r3, #8
 8006de6:	b21a      	sxth	r2, r3
 8006de8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006dec:	4313      	orrs	r3, r2
 8006dee:	b21b      	sxth	r3, r3
 8006df0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006df2:	89fb      	ldrh	r3, [r7, #14]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	371c      	adds	r7, #28
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfe:	4770      	bx	lr

08006e00 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e0a:	2300      	movs	r3, #0
 8006e0c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	781b      	ldrb	r3, [r3, #0]
 8006e12:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006e16:	2b40      	cmp	r3, #64	; 0x40
 8006e18:	d005      	beq.n	8006e26 <USBD_StdDevReq+0x26>
 8006e1a:	2b40      	cmp	r3, #64	; 0x40
 8006e1c:	d857      	bhi.n	8006ece <USBD_StdDevReq+0xce>
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d00f      	beq.n	8006e42 <USBD_StdDevReq+0x42>
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d153      	bne.n	8006ece <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	32ae      	adds	r2, #174	; 0xae
 8006e30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	4798      	blx	r3
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	73fb      	strb	r3, [r7, #15]
      break;
 8006e40:	e04a      	b.n	8006ed8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	785b      	ldrb	r3, [r3, #1]
 8006e46:	2b09      	cmp	r3, #9
 8006e48:	d83b      	bhi.n	8006ec2 <USBD_StdDevReq+0xc2>
 8006e4a:	a201      	add	r2, pc, #4	; (adr r2, 8006e50 <USBD_StdDevReq+0x50>)
 8006e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e50:	08006ea5 	.word	0x08006ea5
 8006e54:	08006eb9 	.word	0x08006eb9
 8006e58:	08006ec3 	.word	0x08006ec3
 8006e5c:	08006eaf 	.word	0x08006eaf
 8006e60:	08006ec3 	.word	0x08006ec3
 8006e64:	08006e83 	.word	0x08006e83
 8006e68:	08006e79 	.word	0x08006e79
 8006e6c:	08006ec3 	.word	0x08006ec3
 8006e70:	08006e9b 	.word	0x08006e9b
 8006e74:	08006e8d 	.word	0x08006e8d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006e78:	6839      	ldr	r1, [r7, #0]
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fa3c 	bl	80072f8 <USBD_GetDescriptor>
          break;
 8006e80:	e024      	b.n	8006ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006e82:	6839      	ldr	r1, [r7, #0]
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 fba1 	bl	80075cc <USBD_SetAddress>
          break;
 8006e8a:	e01f      	b.n	8006ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fbe0 	bl	8007654 <USBD_SetConfig>
 8006e94:	4603      	mov	r3, r0
 8006e96:	73fb      	strb	r3, [r7, #15]
          break;
 8006e98:	e018      	b.n	8006ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006e9a:	6839      	ldr	r1, [r7, #0]
 8006e9c:	6878      	ldr	r0, [r7, #4]
 8006e9e:	f000 fc83 	bl	80077a8 <USBD_GetConfig>
          break;
 8006ea2:	e013      	b.n	8006ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006ea4:	6839      	ldr	r1, [r7, #0]
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	f000 fcb4 	bl	8007814 <USBD_GetStatus>
          break;
 8006eac:	e00e      	b.n	8006ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006eae:	6839      	ldr	r1, [r7, #0]
 8006eb0:	6878      	ldr	r0, [r7, #4]
 8006eb2:	f000 fce3 	bl	800787c <USBD_SetFeature>
          break;
 8006eb6:	e009      	b.n	8006ecc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006eb8:	6839      	ldr	r1, [r7, #0]
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f000 fd07 	bl	80078ce <USBD_ClrFeature>
          break;
 8006ec0:	e004      	b.n	8006ecc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006ec2:	6839      	ldr	r1, [r7, #0]
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fd5e 	bl	8007986 <USBD_CtlError>
          break;
 8006eca:	bf00      	nop
      }
      break;
 8006ecc:	e004      	b.n	8006ed8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006ece:	6839      	ldr	r1, [r7, #0]
 8006ed0:	6878      	ldr	r0, [r7, #4]
 8006ed2:	f000 fd58 	bl	8007986 <USBD_CtlError>
      break;
 8006ed6:	bf00      	nop
  }

  return ret;
 8006ed8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006eda:	4618      	mov	r0, r3
 8006edc:	3710      	adds	r7, #16
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	bd80      	pop	{r7, pc}
 8006ee2:	bf00      	nop

08006ee4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	6078      	str	r0, [r7, #4]
 8006eec:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	781b      	ldrb	r3, [r3, #0]
 8006ef6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d005      	beq.n	8006f0a <USBD_StdItfReq+0x26>
 8006efe:	2b40      	cmp	r3, #64	; 0x40
 8006f00:	d852      	bhi.n	8006fa8 <USBD_StdItfReq+0xc4>
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d001      	beq.n	8006f0a <USBD_StdItfReq+0x26>
 8006f06:	2b20      	cmp	r3, #32
 8006f08:	d14e      	bne.n	8006fa8 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f10:	b2db      	uxtb	r3, r3
 8006f12:	3b01      	subs	r3, #1
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d840      	bhi.n	8006f9a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006f18:	683b      	ldr	r3, [r7, #0]
 8006f1a:	889b      	ldrh	r3, [r3, #4]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	2b01      	cmp	r3, #1
 8006f20:	d836      	bhi.n	8006f90 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	889b      	ldrh	r3, [r3, #4]
 8006f26:	b2db      	uxtb	r3, r3
 8006f28:	4619      	mov	r1, r3
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f7ff fed9 	bl	8006ce2 <USBD_CoreFindIF>
 8006f30:	4603      	mov	r3, r0
 8006f32:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f34:	7bbb      	ldrb	r3, [r7, #14]
 8006f36:	2bff      	cmp	r3, #255	; 0xff
 8006f38:	d01d      	beq.n	8006f76 <USBD_StdItfReq+0x92>
 8006f3a:	7bbb      	ldrb	r3, [r7, #14]
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d11a      	bne.n	8006f76 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006f40:	7bba      	ldrb	r2, [r7, #14]
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	32ae      	adds	r2, #174	; 0xae
 8006f46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f4a:	689b      	ldr	r3, [r3, #8]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d00f      	beq.n	8006f70 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006f50:	7bba      	ldrb	r2, [r7, #14]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006f58:	7bba      	ldrb	r2, [r7, #14]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	32ae      	adds	r2, #174	; 0xae
 8006f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f62:	689b      	ldr	r3, [r3, #8]
 8006f64:	6839      	ldr	r1, [r7, #0]
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	4798      	blx	r3
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f6e:	e004      	b.n	8006f7a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006f70:	2303      	movs	r3, #3
 8006f72:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006f74:	e001      	b.n	8006f7a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006f76:	2303      	movs	r3, #3
 8006f78:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006f7a:	683b      	ldr	r3, [r7, #0]
 8006f7c:	88db      	ldrh	r3, [r3, #6]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	d110      	bne.n	8006fa4 <USBD_StdItfReq+0xc0>
 8006f82:	7bfb      	ldrb	r3, [r7, #15]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10d      	bne.n	8006fa4 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 fdc7 	bl	8007b1c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006f8e:	e009      	b.n	8006fa4 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006f90:	6839      	ldr	r1, [r7, #0]
 8006f92:	6878      	ldr	r0, [r7, #4]
 8006f94:	f000 fcf7 	bl	8007986 <USBD_CtlError>
          break;
 8006f98:	e004      	b.n	8006fa4 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006f9a:	6839      	ldr	r1, [r7, #0]
 8006f9c:	6878      	ldr	r0, [r7, #4]
 8006f9e:	f000 fcf2 	bl	8007986 <USBD_CtlError>
          break;
 8006fa2:	e000      	b.n	8006fa6 <USBD_StdItfReq+0xc2>
          break;
 8006fa4:	bf00      	nop
      }
      break;
 8006fa6:	e004      	b.n	8006fb2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006fa8:	6839      	ldr	r1, [r7, #0]
 8006faa:	6878      	ldr	r0, [r7, #4]
 8006fac:	f000 fceb 	bl	8007986 <USBD_CtlError>
      break;
 8006fb0:	bf00      	nop
  }

  return ret;
 8006fb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fb4:	4618      	mov	r0, r3
 8006fb6:	3710      	adds	r7, #16
 8006fb8:	46bd      	mov	sp, r7
 8006fba:	bd80      	pop	{r7, pc}

08006fbc <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	889b      	ldrh	r3, [r3, #4]
 8006fce:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fd8:	2b40      	cmp	r3, #64	; 0x40
 8006fda:	d007      	beq.n	8006fec <USBD_StdEPReq+0x30>
 8006fdc:	2b40      	cmp	r3, #64	; 0x40
 8006fde:	f200 817f 	bhi.w	80072e0 <USBD_StdEPReq+0x324>
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d02a      	beq.n	800703c <USBD_StdEPReq+0x80>
 8006fe6:	2b20      	cmp	r3, #32
 8006fe8:	f040 817a 	bne.w	80072e0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006fec:	7bbb      	ldrb	r3, [r7, #14]
 8006fee:	4619      	mov	r1, r3
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f7ff fe83 	bl	8006cfc <USBD_CoreFindEP>
 8006ff6:	4603      	mov	r3, r0
 8006ff8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ffa:	7b7b      	ldrb	r3, [r7, #13]
 8006ffc:	2bff      	cmp	r3, #255	; 0xff
 8006ffe:	f000 8174 	beq.w	80072ea <USBD_StdEPReq+0x32e>
 8007002:	7b7b      	ldrb	r3, [r7, #13]
 8007004:	2b00      	cmp	r3, #0
 8007006:	f040 8170 	bne.w	80072ea <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800700a:	7b7a      	ldrb	r2, [r7, #13]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8007012:	7b7a      	ldrb	r2, [r7, #13]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	32ae      	adds	r2, #174	; 0xae
 8007018:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	2b00      	cmp	r3, #0
 8007020:	f000 8163 	beq.w	80072ea <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8007024:	7b7a      	ldrb	r2, [r7, #13]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	32ae      	adds	r2, #174	; 0xae
 800702a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800702e:	689b      	ldr	r3, [r3, #8]
 8007030:	6839      	ldr	r1, [r7, #0]
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	4798      	blx	r3
 8007036:	4603      	mov	r3, r0
 8007038:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800703a:	e156      	b.n	80072ea <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800703c:	683b      	ldr	r3, [r7, #0]
 800703e:	785b      	ldrb	r3, [r3, #1]
 8007040:	2b03      	cmp	r3, #3
 8007042:	d008      	beq.n	8007056 <USBD_StdEPReq+0x9a>
 8007044:	2b03      	cmp	r3, #3
 8007046:	f300 8145 	bgt.w	80072d4 <USBD_StdEPReq+0x318>
 800704a:	2b00      	cmp	r3, #0
 800704c:	f000 809b 	beq.w	8007186 <USBD_StdEPReq+0x1ca>
 8007050:	2b01      	cmp	r3, #1
 8007052:	d03c      	beq.n	80070ce <USBD_StdEPReq+0x112>
 8007054:	e13e      	b.n	80072d4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800705c:	b2db      	uxtb	r3, r3
 800705e:	2b02      	cmp	r3, #2
 8007060:	d002      	beq.n	8007068 <USBD_StdEPReq+0xac>
 8007062:	2b03      	cmp	r3, #3
 8007064:	d016      	beq.n	8007094 <USBD_StdEPReq+0xd8>
 8007066:	e02c      	b.n	80070c2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007068:	7bbb      	ldrb	r3, [r7, #14]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00d      	beq.n	800708a <USBD_StdEPReq+0xce>
 800706e:	7bbb      	ldrb	r3, [r7, #14]
 8007070:	2b80      	cmp	r3, #128	; 0x80
 8007072:	d00a      	beq.n	800708a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007074:	7bbb      	ldrb	r3, [r7, #14]
 8007076:	4619      	mov	r1, r3
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f001 f955 	bl	8008328 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800707e:	2180      	movs	r1, #128	; 0x80
 8007080:	6878      	ldr	r0, [r7, #4]
 8007082:	f001 f951 	bl	8008328 <USBD_LL_StallEP>
 8007086:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007088:	e020      	b.n	80070cc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800708a:	6839      	ldr	r1, [r7, #0]
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f000 fc7a 	bl	8007986 <USBD_CtlError>
              break;
 8007092:	e01b      	b.n	80070cc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	885b      	ldrh	r3, [r3, #2]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d10e      	bne.n	80070ba <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800709c:	7bbb      	ldrb	r3, [r7, #14]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d00b      	beq.n	80070ba <USBD_StdEPReq+0xfe>
 80070a2:	7bbb      	ldrb	r3, [r7, #14]
 80070a4:	2b80      	cmp	r3, #128	; 0x80
 80070a6:	d008      	beq.n	80070ba <USBD_StdEPReq+0xfe>
 80070a8:	683b      	ldr	r3, [r7, #0]
 80070aa:	88db      	ldrh	r3, [r3, #6]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d104      	bne.n	80070ba <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80070b0:	7bbb      	ldrb	r3, [r7, #14]
 80070b2:	4619      	mov	r1, r3
 80070b4:	6878      	ldr	r0, [r7, #4]
 80070b6:	f001 f937 	bl	8008328 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80070ba:	6878      	ldr	r0, [r7, #4]
 80070bc:	f000 fd2e 	bl	8007b1c <USBD_CtlSendStatus>

              break;
 80070c0:	e004      	b.n	80070cc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80070c2:	6839      	ldr	r1, [r7, #0]
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fc5e 	bl	8007986 <USBD_CtlError>
              break;
 80070ca:	bf00      	nop
          }
          break;
 80070cc:	e107      	b.n	80072de <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070d4:	b2db      	uxtb	r3, r3
 80070d6:	2b02      	cmp	r3, #2
 80070d8:	d002      	beq.n	80070e0 <USBD_StdEPReq+0x124>
 80070da:	2b03      	cmp	r3, #3
 80070dc:	d016      	beq.n	800710c <USBD_StdEPReq+0x150>
 80070de:	e04b      	b.n	8007178 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070e0:	7bbb      	ldrb	r3, [r7, #14]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d00d      	beq.n	8007102 <USBD_StdEPReq+0x146>
 80070e6:	7bbb      	ldrb	r3, [r7, #14]
 80070e8:	2b80      	cmp	r3, #128	; 0x80
 80070ea:	d00a      	beq.n	8007102 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80070ec:	7bbb      	ldrb	r3, [r7, #14]
 80070ee:	4619      	mov	r1, r3
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f001 f919 	bl	8008328 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80070f6:	2180      	movs	r1, #128	; 0x80
 80070f8:	6878      	ldr	r0, [r7, #4]
 80070fa:	f001 f915 	bl	8008328 <USBD_LL_StallEP>
 80070fe:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007100:	e040      	b.n	8007184 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007102:	6839      	ldr	r1, [r7, #0]
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 fc3e 	bl	8007986 <USBD_CtlError>
              break;
 800710a:	e03b      	b.n	8007184 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800710c:	683b      	ldr	r3, [r7, #0]
 800710e:	885b      	ldrh	r3, [r3, #2]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d136      	bne.n	8007182 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007114:	7bbb      	ldrb	r3, [r7, #14]
 8007116:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800711a:	2b00      	cmp	r3, #0
 800711c:	d004      	beq.n	8007128 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	4619      	mov	r1, r3
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f001 f91f 	bl	8008366 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 fcf7 	bl	8007b1c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800712e:	7bbb      	ldrb	r3, [r7, #14]
 8007130:	4619      	mov	r1, r3
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f7ff fde2 	bl	8006cfc <USBD_CoreFindEP>
 8007138:	4603      	mov	r3, r0
 800713a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800713c:	7b7b      	ldrb	r3, [r7, #13]
 800713e:	2bff      	cmp	r3, #255	; 0xff
 8007140:	d01f      	beq.n	8007182 <USBD_StdEPReq+0x1c6>
 8007142:	7b7b      	ldrb	r3, [r7, #13]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d11c      	bne.n	8007182 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007148:	7b7a      	ldrb	r2, [r7, #13]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007150:	7b7a      	ldrb	r2, [r7, #13]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	32ae      	adds	r2, #174	; 0xae
 8007156:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d010      	beq.n	8007182 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007160:	7b7a      	ldrb	r2, [r7, #13]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	32ae      	adds	r2, #174	; 0xae
 8007166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	6839      	ldr	r1, [r7, #0]
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	4798      	blx	r3
 8007172:	4603      	mov	r3, r0
 8007174:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007176:	e004      	b.n	8007182 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007178:	6839      	ldr	r1, [r7, #0]
 800717a:	6878      	ldr	r0, [r7, #4]
 800717c:	f000 fc03 	bl	8007986 <USBD_CtlError>
              break;
 8007180:	e000      	b.n	8007184 <USBD_StdEPReq+0x1c8>
              break;
 8007182:	bf00      	nop
          }
          break;
 8007184:	e0ab      	b.n	80072de <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800718c:	b2db      	uxtb	r3, r3
 800718e:	2b02      	cmp	r3, #2
 8007190:	d002      	beq.n	8007198 <USBD_StdEPReq+0x1dc>
 8007192:	2b03      	cmp	r3, #3
 8007194:	d032      	beq.n	80071fc <USBD_StdEPReq+0x240>
 8007196:	e097      	b.n	80072c8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007198:	7bbb      	ldrb	r3, [r7, #14]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d007      	beq.n	80071ae <USBD_StdEPReq+0x1f2>
 800719e:	7bbb      	ldrb	r3, [r7, #14]
 80071a0:	2b80      	cmp	r3, #128	; 0x80
 80071a2:	d004      	beq.n	80071ae <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80071a4:	6839      	ldr	r1, [r7, #0]
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 fbed 	bl	8007986 <USBD_CtlError>
                break;
 80071ac:	e091      	b.n	80072d2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ae:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	da0b      	bge.n	80071ce <USBD_StdEPReq+0x212>
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80071bc:	4613      	mov	r3, r2
 80071be:	009b      	lsls	r3, r3, #2
 80071c0:	4413      	add	r3, r2
 80071c2:	009b      	lsls	r3, r3, #2
 80071c4:	3310      	adds	r3, #16
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	3304      	adds	r3, #4
 80071cc:	e00b      	b.n	80071e6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	4413      	add	r3, r2
 80071e4:	3304      	adds	r3, #4
 80071e6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80071e8:	68bb      	ldr	r3, [r7, #8]
 80071ea:	2200      	movs	r2, #0
 80071ec:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80071ee:	68bb      	ldr	r3, [r7, #8]
 80071f0:	2202      	movs	r2, #2
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f000 fc37 	bl	8007a68 <USBD_CtlSendData>
              break;
 80071fa:	e06a      	b.n	80072d2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80071fc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007200:	2b00      	cmp	r3, #0
 8007202:	da11      	bge.n	8007228 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007204:	7bbb      	ldrb	r3, [r7, #14]
 8007206:	f003 020f 	and.w	r2, r3, #15
 800720a:	6879      	ldr	r1, [r7, #4]
 800720c:	4613      	mov	r3, r2
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	4413      	add	r3, r2
 8007212:	009b      	lsls	r3, r3, #2
 8007214:	440b      	add	r3, r1
 8007216:	3324      	adds	r3, #36	; 0x24
 8007218:	881b      	ldrh	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d117      	bne.n	800724e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800721e:	6839      	ldr	r1, [r7, #0]
 8007220:	6878      	ldr	r0, [r7, #4]
 8007222:	f000 fbb0 	bl	8007986 <USBD_CtlError>
                  break;
 8007226:	e054      	b.n	80072d2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007228:	7bbb      	ldrb	r3, [r7, #14]
 800722a:	f003 020f 	and.w	r2, r3, #15
 800722e:	6879      	ldr	r1, [r7, #4]
 8007230:	4613      	mov	r3, r2
 8007232:	009b      	lsls	r3, r3, #2
 8007234:	4413      	add	r3, r2
 8007236:	009b      	lsls	r3, r3, #2
 8007238:	440b      	add	r3, r1
 800723a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d104      	bne.n	800724e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fb9d 	bl	8007986 <USBD_CtlError>
                  break;
 800724c:	e041      	b.n	80072d2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800724e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007252:	2b00      	cmp	r3, #0
 8007254:	da0b      	bge.n	800726e <USBD_StdEPReq+0x2b2>
 8007256:	7bbb      	ldrb	r3, [r7, #14]
 8007258:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800725c:	4613      	mov	r3, r2
 800725e:	009b      	lsls	r3, r3, #2
 8007260:	4413      	add	r3, r2
 8007262:	009b      	lsls	r3, r3, #2
 8007264:	3310      	adds	r3, #16
 8007266:	687a      	ldr	r2, [r7, #4]
 8007268:	4413      	add	r3, r2
 800726a:	3304      	adds	r3, #4
 800726c:	e00b      	b.n	8007286 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800726e:	7bbb      	ldrb	r3, [r7, #14]
 8007270:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007274:	4613      	mov	r3, r2
 8007276:	009b      	lsls	r3, r3, #2
 8007278:	4413      	add	r3, r2
 800727a:	009b      	lsls	r3, r3, #2
 800727c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	4413      	add	r3, r2
 8007284:	3304      	adds	r3, #4
 8007286:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007288:	7bbb      	ldrb	r3, [r7, #14]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <USBD_StdEPReq+0x2d8>
 800728e:	7bbb      	ldrb	r3, [r7, #14]
 8007290:	2b80      	cmp	r3, #128	; 0x80
 8007292:	d103      	bne.n	800729c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007294:	68bb      	ldr	r3, [r7, #8]
 8007296:	2200      	movs	r2, #0
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	e00e      	b.n	80072ba <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800729c:	7bbb      	ldrb	r3, [r7, #14]
 800729e:	4619      	mov	r1, r3
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f001 f87f 	bl	80083a4 <USBD_LL_IsStallEP>
 80072a6:	4603      	mov	r3, r0
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d003      	beq.n	80072b4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	2201      	movs	r2, #1
 80072b0:	601a      	str	r2, [r3, #0]
 80072b2:	e002      	b.n	80072ba <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	2202      	movs	r2, #2
 80072be:	4619      	mov	r1, r3
 80072c0:	6878      	ldr	r0, [r7, #4]
 80072c2:	f000 fbd1 	bl	8007a68 <USBD_CtlSendData>
              break;
 80072c6:	e004      	b.n	80072d2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80072c8:	6839      	ldr	r1, [r7, #0]
 80072ca:	6878      	ldr	r0, [r7, #4]
 80072cc:	f000 fb5b 	bl	8007986 <USBD_CtlError>
              break;
 80072d0:	bf00      	nop
          }
          break;
 80072d2:	e004      	b.n	80072de <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80072d4:	6839      	ldr	r1, [r7, #0]
 80072d6:	6878      	ldr	r0, [r7, #4]
 80072d8:	f000 fb55 	bl	8007986 <USBD_CtlError>
          break;
 80072dc:	bf00      	nop
      }
      break;
 80072de:	e005      	b.n	80072ec <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80072e0:	6839      	ldr	r1, [r7, #0]
 80072e2:	6878      	ldr	r0, [r7, #4]
 80072e4:	f000 fb4f 	bl	8007986 <USBD_CtlError>
      break;
 80072e8:	e000      	b.n	80072ec <USBD_StdEPReq+0x330>
      break;
 80072ea:	bf00      	nop
  }

  return ret;
 80072ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80072ee:	4618      	mov	r0, r3
 80072f0:	3710      	adds	r7, #16
 80072f2:	46bd      	mov	sp, r7
 80072f4:	bd80      	pop	{r7, pc}
	...

080072f8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007302:	2300      	movs	r3, #0
 8007304:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007306:	2300      	movs	r3, #0
 8007308:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800730a:	2300      	movs	r3, #0
 800730c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	885b      	ldrh	r3, [r3, #2]
 8007312:	0a1b      	lsrs	r3, r3, #8
 8007314:	b29b      	uxth	r3, r3
 8007316:	3b01      	subs	r3, #1
 8007318:	2b06      	cmp	r3, #6
 800731a:	f200 8128 	bhi.w	800756e <USBD_GetDescriptor+0x276>
 800731e:	a201      	add	r2, pc, #4	; (adr r2, 8007324 <USBD_GetDescriptor+0x2c>)
 8007320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007324:	08007341 	.word	0x08007341
 8007328:	08007359 	.word	0x08007359
 800732c:	08007399 	.word	0x08007399
 8007330:	0800756f 	.word	0x0800756f
 8007334:	0800756f 	.word	0x0800756f
 8007338:	0800750f 	.word	0x0800750f
 800733c:	0800753b 	.word	0x0800753b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	687a      	ldr	r2, [r7, #4]
 800734a:	7c12      	ldrb	r2, [r2, #16]
 800734c:	f107 0108 	add.w	r1, r7, #8
 8007350:	4610      	mov	r0, r2
 8007352:	4798      	blx	r3
 8007354:	60f8      	str	r0, [r7, #12]
      break;
 8007356:	e112      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7c1b      	ldrb	r3, [r3, #16]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10d      	bne.n	800737c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007368:	f107 0208 	add.w	r2, r7, #8
 800736c:	4610      	mov	r0, r2
 800736e:	4798      	blx	r3
 8007370:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	3301      	adds	r3, #1
 8007376:	2202      	movs	r2, #2
 8007378:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800737a:	e100      	b.n	800757e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007384:	f107 0208 	add.w	r2, r7, #8
 8007388:	4610      	mov	r0, r2
 800738a:	4798      	blx	r3
 800738c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	3301      	adds	r3, #1
 8007392:	2202      	movs	r2, #2
 8007394:	701a      	strb	r2, [r3, #0]
      break;
 8007396:	e0f2      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	885b      	ldrh	r3, [r3, #2]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	2b05      	cmp	r3, #5
 80073a0:	f200 80ac 	bhi.w	80074fc <USBD_GetDescriptor+0x204>
 80073a4:	a201      	add	r2, pc, #4	; (adr r2, 80073ac <USBD_GetDescriptor+0xb4>)
 80073a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073aa:	bf00      	nop
 80073ac:	080073c5 	.word	0x080073c5
 80073b0:	080073f9 	.word	0x080073f9
 80073b4:	0800742d 	.word	0x0800742d
 80073b8:	08007461 	.word	0x08007461
 80073bc:	08007495 	.word	0x08007495
 80073c0:	080074c9 	.word	0x080074c9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073ca:	685b      	ldr	r3, [r3, #4]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d00b      	beq.n	80073e8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073d6:	685b      	ldr	r3, [r3, #4]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	7c12      	ldrb	r2, [r2, #16]
 80073dc:	f107 0108 	add.w	r1, r7, #8
 80073e0:	4610      	mov	r0, r2
 80073e2:	4798      	blx	r3
 80073e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073e6:	e091      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073e8:	6839      	ldr	r1, [r7, #0]
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 facb 	bl	8007986 <USBD_CtlError>
            err++;
 80073f0:	7afb      	ldrb	r3, [r7, #11]
 80073f2:	3301      	adds	r3, #1
 80073f4:	72fb      	strb	r3, [r7, #11]
          break;
 80073f6:	e089      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	2b00      	cmp	r3, #0
 8007402:	d00b      	beq.n	800741c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	7c12      	ldrb	r2, [r2, #16]
 8007410:	f107 0108 	add.w	r1, r7, #8
 8007414:	4610      	mov	r0, r2
 8007416:	4798      	blx	r3
 8007418:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800741a:	e077      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800741c:	6839      	ldr	r1, [r7, #0]
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fab1 	bl	8007986 <USBD_CtlError>
            err++;
 8007424:	7afb      	ldrb	r3, [r7, #11]
 8007426:	3301      	adds	r3, #1
 8007428:	72fb      	strb	r3, [r7, #11]
          break;
 800742a:	e06f      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d00b      	beq.n	8007450 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800743e:	68db      	ldr	r3, [r3, #12]
 8007440:	687a      	ldr	r2, [r7, #4]
 8007442:	7c12      	ldrb	r2, [r2, #16]
 8007444:	f107 0108 	add.w	r1, r7, #8
 8007448:	4610      	mov	r0, r2
 800744a:	4798      	blx	r3
 800744c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800744e:	e05d      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007450:	6839      	ldr	r1, [r7, #0]
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 fa97 	bl	8007986 <USBD_CtlError>
            err++;
 8007458:	7afb      	ldrb	r3, [r7, #11]
 800745a:	3301      	adds	r3, #1
 800745c:	72fb      	strb	r3, [r7, #11]
          break;
 800745e:	e055      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007466:	691b      	ldr	r3, [r3, #16]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	691b      	ldr	r3, [r3, #16]
 8007474:	687a      	ldr	r2, [r7, #4]
 8007476:	7c12      	ldrb	r2, [r2, #16]
 8007478:	f107 0108 	add.w	r1, r7, #8
 800747c:	4610      	mov	r0, r2
 800747e:	4798      	blx	r3
 8007480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007482:	e043      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f000 fa7d 	bl	8007986 <USBD_CtlError>
            err++;
 800748c:	7afb      	ldrb	r3, [r7, #11]
 800748e:	3301      	adds	r3, #1
 8007490:	72fb      	strb	r3, [r7, #11]
          break;
 8007492:	e03b      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800749a:	695b      	ldr	r3, [r3, #20]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d00b      	beq.n	80074b8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074a6:	695b      	ldr	r3, [r3, #20]
 80074a8:	687a      	ldr	r2, [r7, #4]
 80074aa:	7c12      	ldrb	r2, [r2, #16]
 80074ac:	f107 0108 	add.w	r1, r7, #8
 80074b0:	4610      	mov	r0, r2
 80074b2:	4798      	blx	r3
 80074b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074b6:	e029      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074b8:	6839      	ldr	r1, [r7, #0]
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 fa63 	bl	8007986 <USBD_CtlError>
            err++;
 80074c0:	7afb      	ldrb	r3, [r7, #11]
 80074c2:	3301      	adds	r3, #1
 80074c4:	72fb      	strb	r3, [r7, #11]
          break;
 80074c6:	e021      	b.n	800750c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074ce:	699b      	ldr	r3, [r3, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00b      	beq.n	80074ec <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80074da:	699b      	ldr	r3, [r3, #24]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	7c12      	ldrb	r2, [r2, #16]
 80074e0:	f107 0108 	add.w	r1, r7, #8
 80074e4:	4610      	mov	r0, r2
 80074e6:	4798      	blx	r3
 80074e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074ea:	e00f      	b.n	800750c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fa49 	bl	8007986 <USBD_CtlError>
            err++;
 80074f4:	7afb      	ldrb	r3, [r7, #11]
 80074f6:	3301      	adds	r3, #1
 80074f8:	72fb      	strb	r3, [r7, #11]
          break;
 80074fa:	e007      	b.n	800750c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	6878      	ldr	r0, [r7, #4]
 8007500:	f000 fa41 	bl	8007986 <USBD_CtlError>
          err++;
 8007504:	7afb      	ldrb	r3, [r7, #11]
 8007506:	3301      	adds	r3, #1
 8007508:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800750a:	bf00      	nop
      }
      break;
 800750c:	e037      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	7c1b      	ldrb	r3, [r3, #16]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d109      	bne.n	800752a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800751c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800751e:	f107 0208 	add.w	r2, r7, #8
 8007522:	4610      	mov	r0, r2
 8007524:	4798      	blx	r3
 8007526:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007528:	e029      	b.n	800757e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800752a:	6839      	ldr	r1, [r7, #0]
 800752c:	6878      	ldr	r0, [r7, #4]
 800752e:	f000 fa2a 	bl	8007986 <USBD_CtlError>
        err++;
 8007532:	7afb      	ldrb	r3, [r7, #11]
 8007534:	3301      	adds	r3, #1
 8007536:	72fb      	strb	r3, [r7, #11]
      break;
 8007538:	e021      	b.n	800757e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	7c1b      	ldrb	r3, [r3, #16]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10d      	bne.n	800755e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800754a:	f107 0208 	add.w	r2, r7, #8
 800754e:	4610      	mov	r0, r2
 8007550:	4798      	blx	r3
 8007552:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	3301      	adds	r3, #1
 8007558:	2207      	movs	r2, #7
 800755a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800755c:	e00f      	b.n	800757e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800755e:	6839      	ldr	r1, [r7, #0]
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fa10 	bl	8007986 <USBD_CtlError>
        err++;
 8007566:	7afb      	ldrb	r3, [r7, #11]
 8007568:	3301      	adds	r3, #1
 800756a:	72fb      	strb	r3, [r7, #11]
      break;
 800756c:	e007      	b.n	800757e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800756e:	6839      	ldr	r1, [r7, #0]
 8007570:	6878      	ldr	r0, [r7, #4]
 8007572:	f000 fa08 	bl	8007986 <USBD_CtlError>
      err++;
 8007576:	7afb      	ldrb	r3, [r7, #11]
 8007578:	3301      	adds	r3, #1
 800757a:	72fb      	strb	r3, [r7, #11]
      break;
 800757c:	bf00      	nop
  }

  if (err != 0U)
 800757e:	7afb      	ldrb	r3, [r7, #11]
 8007580:	2b00      	cmp	r3, #0
 8007582:	d11e      	bne.n	80075c2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007584:	683b      	ldr	r3, [r7, #0]
 8007586:	88db      	ldrh	r3, [r3, #6]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d016      	beq.n	80075ba <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800758c:	893b      	ldrh	r3, [r7, #8]
 800758e:	2b00      	cmp	r3, #0
 8007590:	d00e      	beq.n	80075b0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007592:	683b      	ldr	r3, [r7, #0]
 8007594:	88da      	ldrh	r2, [r3, #6]
 8007596:	893b      	ldrh	r3, [r7, #8]
 8007598:	4293      	cmp	r3, r2
 800759a:	bf28      	it	cs
 800759c:	4613      	movcs	r3, r2
 800759e:	b29b      	uxth	r3, r3
 80075a0:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80075a2:	893b      	ldrh	r3, [r7, #8]
 80075a4:	461a      	mov	r2, r3
 80075a6:	68f9      	ldr	r1, [r7, #12]
 80075a8:	6878      	ldr	r0, [r7, #4]
 80075aa:	f000 fa5d 	bl	8007a68 <USBD_CtlSendData>
 80075ae:	e009      	b.n	80075c4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80075b0:	6839      	ldr	r1, [r7, #0]
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f000 f9e7 	bl	8007986 <USBD_CtlError>
 80075b8:	e004      	b.n	80075c4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f000 faae 	bl	8007b1c <USBD_CtlSendStatus>
 80075c0:	e000      	b.n	80075c4 <USBD_GetDescriptor+0x2cc>
    return;
 80075c2:	bf00      	nop
  }
}
 80075c4:	3710      	adds	r7, #16
 80075c6:	46bd      	mov	sp, r7
 80075c8:	bd80      	pop	{r7, pc}
 80075ca:	bf00      	nop

080075cc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b084      	sub	sp, #16
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	889b      	ldrh	r3, [r3, #4]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d131      	bne.n	8007642 <USBD_SetAddress+0x76>
 80075de:	683b      	ldr	r3, [r7, #0]
 80075e0:	88db      	ldrh	r3, [r3, #6]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d12d      	bne.n	8007642 <USBD_SetAddress+0x76>
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	2b7f      	cmp	r3, #127	; 0x7f
 80075ec:	d829      	bhi.n	8007642 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	885b      	ldrh	r3, [r3, #2]
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80075f8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007600:	b2db      	uxtb	r3, r3
 8007602:	2b03      	cmp	r3, #3
 8007604:	d104      	bne.n	8007610 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f9bc 	bl	8007986 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800760e:	e01d      	b.n	800764c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	7bfa      	ldrb	r2, [r7, #15]
 8007614:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007618:	7bfb      	ldrb	r3, [r7, #15]
 800761a:	4619      	mov	r1, r3
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 feed 	bl	80083fc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007622:	6878      	ldr	r0, [r7, #4]
 8007624:	f000 fa7a 	bl	8007b1c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007628:	7bfb      	ldrb	r3, [r7, #15]
 800762a:	2b00      	cmp	r3, #0
 800762c:	d004      	beq.n	8007638 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	2202      	movs	r2, #2
 8007632:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007636:	e009      	b.n	800764c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007640:	e004      	b.n	800764c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007642:	6839      	ldr	r1, [r7, #0]
 8007644:	6878      	ldr	r0, [r7, #4]
 8007646:	f000 f99e 	bl	8007986 <USBD_CtlError>
  }
}
 800764a:	bf00      	nop
 800764c:	bf00      	nop
 800764e:	3710      	adds	r7, #16
 8007650:	46bd      	mov	sp, r7
 8007652:	bd80      	pop	{r7, pc}

08007654 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800765e:	2300      	movs	r3, #0
 8007660:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007662:	683b      	ldr	r3, [r7, #0]
 8007664:	885b      	ldrh	r3, [r3, #2]
 8007666:	b2da      	uxtb	r2, r3
 8007668:	4b4e      	ldr	r3, [pc, #312]	; (80077a4 <USBD_SetConfig+0x150>)
 800766a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800766c:	4b4d      	ldr	r3, [pc, #308]	; (80077a4 <USBD_SetConfig+0x150>)
 800766e:	781b      	ldrb	r3, [r3, #0]
 8007670:	2b01      	cmp	r3, #1
 8007672:	d905      	bls.n	8007680 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007674:	6839      	ldr	r1, [r7, #0]
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f000 f985 	bl	8007986 <USBD_CtlError>
    return USBD_FAIL;
 800767c:	2303      	movs	r3, #3
 800767e:	e08c      	b.n	800779a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007686:	b2db      	uxtb	r3, r3
 8007688:	2b02      	cmp	r3, #2
 800768a:	d002      	beq.n	8007692 <USBD_SetConfig+0x3e>
 800768c:	2b03      	cmp	r3, #3
 800768e:	d029      	beq.n	80076e4 <USBD_SetConfig+0x90>
 8007690:	e075      	b.n	800777e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007692:	4b44      	ldr	r3, [pc, #272]	; (80077a4 <USBD_SetConfig+0x150>)
 8007694:	781b      	ldrb	r3, [r3, #0]
 8007696:	2b00      	cmp	r3, #0
 8007698:	d020      	beq.n	80076dc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800769a:	4b42      	ldr	r3, [pc, #264]	; (80077a4 <USBD_SetConfig+0x150>)
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	461a      	mov	r2, r3
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80076a4:	4b3f      	ldr	r3, [pc, #252]	; (80077a4 <USBD_SetConfig+0x150>)
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7fe ffe7 	bl	800667e <USBD_SetClassConfig>
 80076b0:	4603      	mov	r3, r0
 80076b2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80076b4:	7bfb      	ldrb	r3, [r7, #15]
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d008      	beq.n	80076cc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80076ba:	6839      	ldr	r1, [r7, #0]
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f962 	bl	8007986 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	2202      	movs	r2, #2
 80076c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80076ca:	e065      	b.n	8007798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 fa25 	bl	8007b1c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2203      	movs	r2, #3
 80076d6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80076da:	e05d      	b.n	8007798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa1d 	bl	8007b1c <USBD_CtlSendStatus>
      break;
 80076e2:	e059      	b.n	8007798 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80076e4:	4b2f      	ldr	r3, [pc, #188]	; (80077a4 <USBD_SetConfig+0x150>)
 80076e6:	781b      	ldrb	r3, [r3, #0]
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d112      	bne.n	8007712 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2202      	movs	r2, #2
 80076f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80076f4:	4b2b      	ldr	r3, [pc, #172]	; (80077a4 <USBD_SetConfig+0x150>)
 80076f6:	781b      	ldrb	r3, [r3, #0]
 80076f8:	461a      	mov	r2, r3
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076fe:	4b29      	ldr	r3, [pc, #164]	; (80077a4 <USBD_SetConfig+0x150>)
 8007700:	781b      	ldrb	r3, [r3, #0]
 8007702:	4619      	mov	r1, r3
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f7fe ffd6 	bl	80066b6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800770a:	6878      	ldr	r0, [r7, #4]
 800770c:	f000 fa06 	bl	8007b1c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007710:	e042      	b.n	8007798 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007712:	4b24      	ldr	r3, [pc, #144]	; (80077a4 <USBD_SetConfig+0x150>)
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	461a      	mov	r2, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	685b      	ldr	r3, [r3, #4]
 800771c:	429a      	cmp	r2, r3
 800771e:	d02a      	beq.n	8007776 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	685b      	ldr	r3, [r3, #4]
 8007724:	b2db      	uxtb	r3, r3
 8007726:	4619      	mov	r1, r3
 8007728:	6878      	ldr	r0, [r7, #4]
 800772a:	f7fe ffc4 	bl	80066b6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800772e:	4b1d      	ldr	r3, [pc, #116]	; (80077a4 <USBD_SetConfig+0x150>)
 8007730:	781b      	ldrb	r3, [r3, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007738:	4b1a      	ldr	r3, [pc, #104]	; (80077a4 <USBD_SetConfig+0x150>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	4619      	mov	r1, r3
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f7fe ff9d 	bl	800667e <USBD_SetClassConfig>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d00f      	beq.n	800776e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800774e:	6839      	ldr	r1, [r7, #0]
 8007750:	6878      	ldr	r0, [r7, #4]
 8007752:	f000 f918 	bl	8007986 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b2db      	uxtb	r3, r3
 800775c:	4619      	mov	r1, r3
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f7fe ffa9 	bl	80066b6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800776c:	e014      	b.n	8007798 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f000 f9d4 	bl	8007b1c <USBD_CtlSendStatus>
      break;
 8007774:	e010      	b.n	8007798 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9d0 	bl	8007b1c <USBD_CtlSendStatus>
      break;
 800777c:	e00c      	b.n	8007798 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800777e:	6839      	ldr	r1, [r7, #0]
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 f900 	bl	8007986 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007786:	4b07      	ldr	r3, [pc, #28]	; (80077a4 <USBD_SetConfig+0x150>)
 8007788:	781b      	ldrb	r3, [r3, #0]
 800778a:	4619      	mov	r1, r3
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f7fe ff92 	bl	80066b6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007792:	2303      	movs	r3, #3
 8007794:	73fb      	strb	r3, [r7, #15]
      break;
 8007796:	bf00      	nop
  }

  return ret;
 8007798:	7bfb      	ldrb	r3, [r7, #15]
}
 800779a:	4618      	mov	r0, r3
 800779c:	3710      	adds	r7, #16
 800779e:	46bd      	mov	sp, r7
 80077a0:	bd80      	pop	{r7, pc}
 80077a2:	bf00      	nop
 80077a4:	200001b0 	.word	0x200001b0

080077a8 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b082      	sub	sp, #8
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
 80077b0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	88db      	ldrh	r3, [r3, #6]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d004      	beq.n	80077c4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80077ba:	6839      	ldr	r1, [r7, #0]
 80077bc:	6878      	ldr	r0, [r7, #4]
 80077be:	f000 f8e2 	bl	8007986 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80077c2:	e023      	b.n	800780c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80077ca:	b2db      	uxtb	r3, r3
 80077cc:	2b02      	cmp	r3, #2
 80077ce:	dc02      	bgt.n	80077d6 <USBD_GetConfig+0x2e>
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	dc03      	bgt.n	80077dc <USBD_GetConfig+0x34>
 80077d4:	e015      	b.n	8007802 <USBD_GetConfig+0x5a>
 80077d6:	2b03      	cmp	r3, #3
 80077d8:	d00b      	beq.n	80077f2 <USBD_GetConfig+0x4a>
 80077da:	e012      	b.n	8007802 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2200      	movs	r2, #0
 80077e0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	3308      	adds	r3, #8
 80077e6:	2201      	movs	r2, #1
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f93c 	bl	8007a68 <USBD_CtlSendData>
        break;
 80077f0:	e00c      	b.n	800780c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	3304      	adds	r3, #4
 80077f6:	2201      	movs	r2, #1
 80077f8:	4619      	mov	r1, r3
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 f934 	bl	8007a68 <USBD_CtlSendData>
        break;
 8007800:	e004      	b.n	800780c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8007802:	6839      	ldr	r1, [r7, #0]
 8007804:	6878      	ldr	r0, [r7, #4]
 8007806:	f000 f8be 	bl	8007986 <USBD_CtlError>
        break;
 800780a:	bf00      	nop
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007824:	b2db      	uxtb	r3, r3
 8007826:	3b01      	subs	r3, #1
 8007828:	2b02      	cmp	r3, #2
 800782a:	d81e      	bhi.n	800786a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	88db      	ldrh	r3, [r3, #6]
 8007830:	2b02      	cmp	r3, #2
 8007832:	d004      	beq.n	800783e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007834:	6839      	ldr	r1, [r7, #0]
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f000 f8a5 	bl	8007986 <USBD_CtlError>
        break;
 800783c:	e01a      	b.n	8007874 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2201      	movs	r2, #1
 8007842:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800784a:	2b00      	cmp	r3, #0
 800784c:	d005      	beq.n	800785a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	68db      	ldr	r3, [r3, #12]
 8007852:	f043 0202 	orr.w	r2, r3, #2
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	330c      	adds	r3, #12
 800785e:	2202      	movs	r2, #2
 8007860:	4619      	mov	r1, r3
 8007862:	6878      	ldr	r0, [r7, #4]
 8007864:	f000 f900 	bl	8007a68 <USBD_CtlSendData>
      break;
 8007868:	e004      	b.n	8007874 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800786a:	6839      	ldr	r1, [r7, #0]
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 f88a 	bl	8007986 <USBD_CtlError>
      break;
 8007872:	bf00      	nop
  }
}
 8007874:	bf00      	nop
 8007876:	3708      	adds	r7, #8
 8007878:	46bd      	mov	sp, r7
 800787a:	bd80      	pop	{r7, pc}

0800787c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800787c:	b580      	push	{r7, lr}
 800787e:	b082      	sub	sp, #8
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	885b      	ldrh	r3, [r3, #2]
 800788a:	2b01      	cmp	r3, #1
 800788c:	d107      	bne.n	800789e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2201      	movs	r2, #1
 8007892:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007896:	6878      	ldr	r0, [r7, #4]
 8007898:	f000 f940 	bl	8007b1c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800789c:	e013      	b.n	80078c6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	885b      	ldrh	r3, [r3, #2]
 80078a2:	2b02      	cmp	r3, #2
 80078a4:	d10b      	bne.n	80078be <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	889b      	ldrh	r3, [r3, #4]
 80078aa:	0a1b      	lsrs	r3, r3, #8
 80078ac:	b29b      	uxth	r3, r3
 80078ae:	b2da      	uxtb	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f930 	bl	8007b1c <USBD_CtlSendStatus>
}
 80078bc:	e003      	b.n	80078c6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80078be:	6839      	ldr	r1, [r7, #0]
 80078c0:	6878      	ldr	r0, [r7, #4]
 80078c2:	f000 f860 	bl	8007986 <USBD_CtlError>
}
 80078c6:	bf00      	nop
 80078c8:	3708      	adds	r7, #8
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	3b01      	subs	r3, #1
 80078e2:	2b02      	cmp	r3, #2
 80078e4:	d80b      	bhi.n	80078fe <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80078e6:	683b      	ldr	r3, [r7, #0]
 80078e8:	885b      	ldrh	r3, [r3, #2]
 80078ea:	2b01      	cmp	r3, #1
 80078ec:	d10c      	bne.n	8007908 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80078f6:	6878      	ldr	r0, [r7, #4]
 80078f8:	f000 f910 	bl	8007b1c <USBD_CtlSendStatus>
      }
      break;
 80078fc:	e004      	b.n	8007908 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80078fe:	6839      	ldr	r1, [r7, #0]
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f840 	bl	8007986 <USBD_CtlError>
      break;
 8007906:	e000      	b.n	800790a <USBD_ClrFeature+0x3c>
      break;
 8007908:	bf00      	nop
  }
}
 800790a:	bf00      	nop
 800790c:	3708      	adds	r7, #8
 800790e:	46bd      	mov	sp, r7
 8007910:	bd80      	pop	{r7, pc}

08007912 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007912:	b580      	push	{r7, lr}
 8007914:	b084      	sub	sp, #16
 8007916:	af00      	add	r7, sp, #0
 8007918:	6078      	str	r0, [r7, #4]
 800791a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	781a      	ldrb	r2, [r3, #0]
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	3301      	adds	r3, #1
 800792c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	781a      	ldrb	r2, [r3, #0]
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	3301      	adds	r3, #1
 800793a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800793c:	68f8      	ldr	r0, [r7, #12]
 800793e:	f7ff fa41 	bl	8006dc4 <SWAPBYTE>
 8007942:	4603      	mov	r3, r0
 8007944:	461a      	mov	r2, r3
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	3301      	adds	r3, #1
 800794e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	3301      	adds	r3, #1
 8007954:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007956:	68f8      	ldr	r0, [r7, #12]
 8007958:	f7ff fa34 	bl	8006dc4 <SWAPBYTE>
 800795c:	4603      	mov	r3, r0
 800795e:	461a      	mov	r2, r3
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	3301      	adds	r3, #1
 8007968:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	3301      	adds	r3, #1
 800796e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007970:	68f8      	ldr	r0, [r7, #12]
 8007972:	f7ff fa27 	bl	8006dc4 <SWAPBYTE>
 8007976:	4603      	mov	r3, r0
 8007978:	461a      	mov	r2, r3
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	80da      	strh	r2, [r3, #6]
}
 800797e:	bf00      	nop
 8007980:	3710      	adds	r7, #16
 8007982:	46bd      	mov	sp, r7
 8007984:	bd80      	pop	{r7, pc}

08007986 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
 800798e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007990:	2180      	movs	r1, #128	; 0x80
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f000 fcc8 	bl	8008328 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007998:	2100      	movs	r1, #0
 800799a:	6878      	ldr	r0, [r7, #4]
 800799c:	f000 fcc4 	bl	8008328 <USBD_LL_StallEP>
}
 80079a0:	bf00      	nop
 80079a2:	3708      	adds	r7, #8
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80079b4:	2300      	movs	r3, #0
 80079b6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d036      	beq.n	8007a2c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80079c2:	6938      	ldr	r0, [r7, #16]
 80079c4:	f000 f836 	bl	8007a34 <USBD_GetLen>
 80079c8:	4603      	mov	r3, r0
 80079ca:	3301      	adds	r3, #1
 80079cc:	b29b      	uxth	r3, r3
 80079ce:	005b      	lsls	r3, r3, #1
 80079d0:	b29a      	uxth	r2, r3
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80079d6:	7dfb      	ldrb	r3, [r7, #23]
 80079d8:	68ba      	ldr	r2, [r7, #8]
 80079da:	4413      	add	r3, r2
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	7812      	ldrb	r2, [r2, #0]
 80079e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	3301      	adds	r3, #1
 80079e6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80079e8:	7dfb      	ldrb	r3, [r7, #23]
 80079ea:	68ba      	ldr	r2, [r7, #8]
 80079ec:	4413      	add	r3, r2
 80079ee:	2203      	movs	r2, #3
 80079f0:	701a      	strb	r2, [r3, #0]
  idx++;
 80079f2:	7dfb      	ldrb	r3, [r7, #23]
 80079f4:	3301      	adds	r3, #1
 80079f6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80079f8:	e013      	b.n	8007a22 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80079fa:	7dfb      	ldrb	r3, [r7, #23]
 80079fc:	68ba      	ldr	r2, [r7, #8]
 80079fe:	4413      	add	r3, r2
 8007a00:	693a      	ldr	r2, [r7, #16]
 8007a02:	7812      	ldrb	r2, [r2, #0]
 8007a04:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007a06:	693b      	ldr	r3, [r7, #16]
 8007a08:	3301      	adds	r3, #1
 8007a0a:	613b      	str	r3, [r7, #16]
    idx++;
 8007a0c:	7dfb      	ldrb	r3, [r7, #23]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007a12:	7dfb      	ldrb	r3, [r7, #23]
 8007a14:	68ba      	ldr	r2, [r7, #8]
 8007a16:	4413      	add	r3, r2
 8007a18:	2200      	movs	r2, #0
 8007a1a:	701a      	strb	r2, [r3, #0]
    idx++;
 8007a1c:	7dfb      	ldrb	r3, [r7, #23]
 8007a1e:	3301      	adds	r3, #1
 8007a20:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	781b      	ldrb	r3, [r3, #0]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1e7      	bne.n	80079fa <USBD_GetString+0x52>
 8007a2a:	e000      	b.n	8007a2e <USBD_GetString+0x86>
    return;
 8007a2c:	bf00      	nop
  }
}
 8007a2e:	3718      	adds	r7, #24
 8007a30:	46bd      	mov	sp, r7
 8007a32:	bd80      	pop	{r7, pc}

08007a34 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007a34:	b480      	push	{r7}
 8007a36:	b085      	sub	sp, #20
 8007a38:	af00      	add	r7, sp, #0
 8007a3a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007a44:	e005      	b.n	8007a52 <USBD_GetLen+0x1e>
  {
    len++;
 8007a46:	7bfb      	ldrb	r3, [r7, #15]
 8007a48:	3301      	adds	r3, #1
 8007a4a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007a4c:	68bb      	ldr	r3, [r7, #8]
 8007a4e:	3301      	adds	r3, #1
 8007a50:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	781b      	ldrb	r3, [r3, #0]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d1f5      	bne.n	8007a46 <USBD_GetLen+0x12>
  }

  return len;
 8007a5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3714      	adds	r7, #20
 8007a60:	46bd      	mov	sp, r7
 8007a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a66:	4770      	bx	lr

08007a68 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	2202      	movs	r2, #2
 8007a78:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	687a      	ldr	r2, [r7, #4]
 8007a86:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	68ba      	ldr	r2, [r7, #8]
 8007a8c:	2100      	movs	r1, #0
 8007a8e:	68f8      	ldr	r0, [r7, #12]
 8007a90:	f000 fcd3 	bl	800843a <USBD_LL_Transmit>

  return USBD_OK;
 8007a94:	2300      	movs	r3, #0
}
 8007a96:	4618      	mov	r0, r3
 8007a98:	3710      	adds	r7, #16
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	bd80      	pop	{r7, pc}

08007a9e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a9e:	b580      	push	{r7, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
 8007aa4:	60f8      	str	r0, [r7, #12]
 8007aa6:	60b9      	str	r1, [r7, #8]
 8007aa8:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	68ba      	ldr	r2, [r7, #8]
 8007aae:	2100      	movs	r1, #0
 8007ab0:	68f8      	ldr	r0, [r7, #12]
 8007ab2:	f000 fcc2 	bl	800843a <USBD_LL_Transmit>

  return USBD_OK;
 8007ab6:	2300      	movs	r3, #0
}
 8007ab8:	4618      	mov	r0, r3
 8007aba:	3710      	adds	r7, #16
 8007abc:	46bd      	mov	sp, r7
 8007abe:	bd80      	pop	{r7, pc}

08007ac0 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b084      	sub	sp, #16
 8007ac4:	af00      	add	r7, sp, #0
 8007ac6:	60f8      	str	r0, [r7, #12]
 8007ac8:	60b9      	str	r1, [r7, #8]
 8007aca:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	2203      	movs	r2, #3
 8007ad0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	687a      	ldr	r2, [r7, #4]
 8007ad8:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	687a      	ldr	r2, [r7, #4]
 8007ae0:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	68ba      	ldr	r2, [r7, #8]
 8007ae8:	2100      	movs	r1, #0
 8007aea:	68f8      	ldr	r0, [r7, #12]
 8007aec:	f000 fcc6 	bl	800847c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3710      	adds	r7, #16
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}

08007afa <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007afa:	b580      	push	{r7, lr}
 8007afc:	b084      	sub	sp, #16
 8007afe:	af00      	add	r7, sp, #0
 8007b00:	60f8      	str	r0, [r7, #12]
 8007b02:	60b9      	str	r1, [r7, #8]
 8007b04:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	2100      	movs	r1, #0
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 fcb5 	bl	800847c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b12:	2300      	movs	r3, #0
}
 8007b14:	4618      	mov	r0, r3
 8007b16:	3710      	adds	r7, #16
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	bd80      	pop	{r7, pc}

08007b1c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007b1c:	b580      	push	{r7, lr}
 8007b1e:	b082      	sub	sp, #8
 8007b20:	af00      	add	r7, sp, #0
 8007b22:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	2204      	movs	r2, #4
 8007b28:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	2200      	movs	r2, #0
 8007b30:	2100      	movs	r1, #0
 8007b32:	6878      	ldr	r0, [r7, #4]
 8007b34:	f000 fc81 	bl	800843a <USBD_LL_Transmit>

  return USBD_OK;
 8007b38:	2300      	movs	r3, #0
}
 8007b3a:	4618      	mov	r0, r3
 8007b3c:	3708      	adds	r7, #8
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007b42:	b580      	push	{r7, lr}
 8007b44:	b082      	sub	sp, #8
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2205      	movs	r2, #5
 8007b4e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007b52:	2300      	movs	r3, #0
 8007b54:	2200      	movs	r2, #0
 8007b56:	2100      	movs	r1, #0
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fc8f 	bl	800847c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007b5e:	2300      	movs	r3, #0
}
 8007b60:	4618      	mov	r0, r3
 8007b62:	3708      	adds	r7, #8
 8007b64:	46bd      	mov	sp, r7
 8007b66:	bd80      	pop	{r7, pc}

08007b68 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	4912      	ldr	r1, [pc, #72]	; (8007bb8 <MX_USB_DEVICE_Init+0x50>)
 8007b70:	4812      	ldr	r0, [pc, #72]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007b72:	f7fe fd07 	bl	8006584 <USBD_Init>
 8007b76:	4603      	mov	r3, r0
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d001      	beq.n	8007b80 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007b7c:	f7f8 fe32 	bl	80007e4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007b80:	490f      	ldr	r1, [pc, #60]	; (8007bc0 <MX_USB_DEVICE_Init+0x58>)
 8007b82:	480e      	ldr	r0, [pc, #56]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007b84:	f7fe fd2e 	bl	80065e4 <USBD_RegisterClass>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d001      	beq.n	8007b92 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007b8e:	f7f8 fe29 	bl	80007e4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b92:	490c      	ldr	r1, [pc, #48]	; (8007bc4 <MX_USB_DEVICE_Init+0x5c>)
 8007b94:	4809      	ldr	r0, [pc, #36]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007b96:	f7fe fc65 	bl	8006464 <USBD_CDC_RegisterInterface>
 8007b9a:	4603      	mov	r3, r0
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d001      	beq.n	8007ba4 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007ba0:	f7f8 fe20 	bl	80007e4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007ba4:	4805      	ldr	r0, [pc, #20]	; (8007bbc <MX_USB_DEVICE_Init+0x54>)
 8007ba6:	f7fe fd53 	bl	8006650 <USBD_Start>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d001      	beq.n	8007bb4 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007bb0:	f7f8 fe18 	bl	80007e4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007bb4:	bf00      	nop
 8007bb6:	bd80      	pop	{r7, pc}
 8007bb8:	200000ac 	.word	0x200000ac
 8007bbc:	200001b4 	.word	0x200001b4
 8007bc0:	20000018 	.word	0x20000018
 8007bc4:	20000098 	.word	0x20000098

08007bc8 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007bcc:	2200      	movs	r2, #0
 8007bce:	4905      	ldr	r1, [pc, #20]	; (8007be4 <CDC_Init_FS+0x1c>)
 8007bd0:	4805      	ldr	r0, [pc, #20]	; (8007be8 <CDC_Init_FS+0x20>)
 8007bd2:	f7fe fc61 	bl	8006498 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007bd6:	4905      	ldr	r1, [pc, #20]	; (8007bec <CDC_Init_FS+0x24>)
 8007bd8:	4803      	ldr	r0, [pc, #12]	; (8007be8 <CDC_Init_FS+0x20>)
 8007bda:	f7fe fc7f 	bl	80064dc <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007bde:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	bd80      	pop	{r7, pc}
 8007be4:	20000c90 	.word	0x20000c90
 8007be8:	200001b4 	.word	0x200001b4
 8007bec:	20000490 	.word	0x20000490

08007bf0 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007bf0:	b480      	push	{r7}
 8007bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007bf4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	46bd      	mov	sp, r7
 8007bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bfe:	4770      	bx	lr

08007c00 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b083      	sub	sp, #12
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	4603      	mov	r3, r0
 8007c08:	6039      	str	r1, [r7, #0]
 8007c0a:	71fb      	strb	r3, [r7, #7]
 8007c0c:	4613      	mov	r3, r2
 8007c0e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007c10:	79fb      	ldrb	r3, [r7, #7]
 8007c12:	2b23      	cmp	r3, #35	; 0x23
 8007c14:	d84a      	bhi.n	8007cac <CDC_Control_FS+0xac>
 8007c16:	a201      	add	r2, pc, #4	; (adr r2, 8007c1c <CDC_Control_FS+0x1c>)
 8007c18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c1c:	08007cad 	.word	0x08007cad
 8007c20:	08007cad 	.word	0x08007cad
 8007c24:	08007cad 	.word	0x08007cad
 8007c28:	08007cad 	.word	0x08007cad
 8007c2c:	08007cad 	.word	0x08007cad
 8007c30:	08007cad 	.word	0x08007cad
 8007c34:	08007cad 	.word	0x08007cad
 8007c38:	08007cad 	.word	0x08007cad
 8007c3c:	08007cad 	.word	0x08007cad
 8007c40:	08007cad 	.word	0x08007cad
 8007c44:	08007cad 	.word	0x08007cad
 8007c48:	08007cad 	.word	0x08007cad
 8007c4c:	08007cad 	.word	0x08007cad
 8007c50:	08007cad 	.word	0x08007cad
 8007c54:	08007cad 	.word	0x08007cad
 8007c58:	08007cad 	.word	0x08007cad
 8007c5c:	08007cad 	.word	0x08007cad
 8007c60:	08007cad 	.word	0x08007cad
 8007c64:	08007cad 	.word	0x08007cad
 8007c68:	08007cad 	.word	0x08007cad
 8007c6c:	08007cad 	.word	0x08007cad
 8007c70:	08007cad 	.word	0x08007cad
 8007c74:	08007cad 	.word	0x08007cad
 8007c78:	08007cad 	.word	0x08007cad
 8007c7c:	08007cad 	.word	0x08007cad
 8007c80:	08007cad 	.word	0x08007cad
 8007c84:	08007cad 	.word	0x08007cad
 8007c88:	08007cad 	.word	0x08007cad
 8007c8c:	08007cad 	.word	0x08007cad
 8007c90:	08007cad 	.word	0x08007cad
 8007c94:	08007cad 	.word	0x08007cad
 8007c98:	08007cad 	.word	0x08007cad
 8007c9c:	08007cad 	.word	0x08007cad
 8007ca0:	08007cad 	.word	0x08007cad
 8007ca4:	08007cad 	.word	0x08007cad
 8007ca8:	08007cad 	.word	0x08007cad
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007cac:	bf00      	nop
  }

  return (USBD_OK);
 8007cae:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr

08007cbc <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007cbc:	b580      	push	{r7, lr}
 8007cbe:	b082      	sub	sp, #8
 8007cc0:	af00      	add	r7, sp, #0
 8007cc2:	6078      	str	r0, [r7, #4]
 8007cc4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4805      	ldr	r0, [pc, #20]	; (8007ce0 <CDC_Receive_FS+0x24>)
 8007cca:	f7fe fc07 	bl	80064dc <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007cce:	4804      	ldr	r0, [pc, #16]	; (8007ce0 <CDC_Receive_FS+0x24>)
 8007cd0:	f7fe fc22 	bl	8006518 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007cd4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3708      	adds	r7, #8
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}
 8007cde:	bf00      	nop
 8007ce0:	200001b4 	.word	0x200001b4

08007ce4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007ce4:	b480      	push	{r7}
 8007ce6:	b087      	sub	sp, #28
 8007ce8:	af00      	add	r7, sp, #0
 8007cea:	60f8      	str	r0, [r7, #12]
 8007cec:	60b9      	str	r1, [r7, #8]
 8007cee:	4613      	mov	r3, r2
 8007cf0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007cf6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	371c      	adds	r7, #28
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d04:	4770      	bx	lr
	...

08007d08 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d08:	b480      	push	{r7}
 8007d0a:	b083      	sub	sp, #12
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	4603      	mov	r3, r0
 8007d10:	6039      	str	r1, [r7, #0]
 8007d12:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007d14:	683b      	ldr	r3, [r7, #0]
 8007d16:	2212      	movs	r2, #18
 8007d18:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007d1a:	4b03      	ldr	r3, [pc, #12]	; (8007d28 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007d1c:	4618      	mov	r0, r3
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr
 8007d28:	200000c8 	.word	0x200000c8

08007d2c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d2c:	b480      	push	{r7}
 8007d2e:	b083      	sub	sp, #12
 8007d30:	af00      	add	r7, sp, #0
 8007d32:	4603      	mov	r3, r0
 8007d34:	6039      	str	r1, [r7, #0]
 8007d36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007d38:	683b      	ldr	r3, [r7, #0]
 8007d3a:	2204      	movs	r2, #4
 8007d3c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007d3e:	4b03      	ldr	r3, [pc, #12]	; (8007d4c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	370c      	adds	r7, #12
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr
 8007d4c:	200000dc 	.word	0x200000dc

08007d50 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d50:	b580      	push	{r7, lr}
 8007d52:	b082      	sub	sp, #8
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	4603      	mov	r3, r0
 8007d58:	6039      	str	r1, [r7, #0]
 8007d5a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d5c:	79fb      	ldrb	r3, [r7, #7]
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d105      	bne.n	8007d6e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d62:	683a      	ldr	r2, [r7, #0]
 8007d64:	4907      	ldr	r1, [pc, #28]	; (8007d84 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d66:	4808      	ldr	r0, [pc, #32]	; (8007d88 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d68:	f7ff fe1e 	bl	80079a8 <USBD_GetString>
 8007d6c:	e004      	b.n	8007d78 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007d6e:	683a      	ldr	r2, [r7, #0]
 8007d70:	4904      	ldr	r1, [pc, #16]	; (8007d84 <USBD_FS_ProductStrDescriptor+0x34>)
 8007d72:	4805      	ldr	r0, [pc, #20]	; (8007d88 <USBD_FS_ProductStrDescriptor+0x38>)
 8007d74:	f7ff fe18 	bl	80079a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d78:	4b02      	ldr	r3, [pc, #8]	; (8007d84 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007d7a:	4618      	mov	r0, r3
 8007d7c:	3708      	adds	r7, #8
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}
 8007d82:	bf00      	nop
 8007d84:	20001490 	.word	0x20001490
 8007d88:	080085dc 	.word	0x080085dc

08007d8c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b082      	sub	sp, #8
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	4603      	mov	r3, r0
 8007d94:	6039      	str	r1, [r7, #0]
 8007d96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d98:	683a      	ldr	r2, [r7, #0]
 8007d9a:	4904      	ldr	r1, [pc, #16]	; (8007dac <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d9c:	4804      	ldr	r0, [pc, #16]	; (8007db0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d9e:	f7ff fe03 	bl	80079a8 <USBD_GetString>
  return USBD_StrDesc;
 8007da2:	4b02      	ldr	r3, [pc, #8]	; (8007dac <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007da4:	4618      	mov	r0, r3
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}
 8007dac:	20001490 	.word	0x20001490
 8007db0:	080085f4 	.word	0x080085f4

08007db4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	4603      	mov	r3, r0
 8007dbc:	6039      	str	r1, [r7, #0]
 8007dbe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007dc0:	683b      	ldr	r3, [r7, #0]
 8007dc2:	221a      	movs	r2, #26
 8007dc4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007dc6:	f000 f843 	bl	8007e50 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007dca:	4b02      	ldr	r3, [pc, #8]	; (8007dd4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007dcc:	4618      	mov	r0, r3
 8007dce:	3708      	adds	r7, #8
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}
 8007dd4:	200000e0 	.word	0x200000e0

08007dd8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b082      	sub	sp, #8
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	4603      	mov	r3, r0
 8007de0:	6039      	str	r1, [r7, #0]
 8007de2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007de4:	79fb      	ldrb	r3, [r7, #7]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d105      	bne.n	8007df6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007dea:	683a      	ldr	r2, [r7, #0]
 8007dec:	4907      	ldr	r1, [pc, #28]	; (8007e0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dee:	4808      	ldr	r0, [pc, #32]	; (8007e10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007df0:	f7ff fdda 	bl	80079a8 <USBD_GetString>
 8007df4:	e004      	b.n	8007e00 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007df6:	683a      	ldr	r2, [r7, #0]
 8007df8:	4904      	ldr	r1, [pc, #16]	; (8007e0c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007dfa:	4805      	ldr	r0, [pc, #20]	; (8007e10 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007dfc:	f7ff fdd4 	bl	80079a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e00:	4b02      	ldr	r3, [pc, #8]	; (8007e0c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007e02:	4618      	mov	r0, r3
 8007e04:	3708      	adds	r7, #8
 8007e06:	46bd      	mov	sp, r7
 8007e08:	bd80      	pop	{r7, pc}
 8007e0a:	bf00      	nop
 8007e0c:	20001490 	.word	0x20001490
 8007e10:	08008608 	.word	0x08008608

08007e14 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b082      	sub	sp, #8
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	4603      	mov	r3, r0
 8007e1c:	6039      	str	r1, [r7, #0]
 8007e1e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007e20:	79fb      	ldrb	r3, [r7, #7]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d105      	bne.n	8007e32 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e26:	683a      	ldr	r2, [r7, #0]
 8007e28:	4907      	ldr	r1, [pc, #28]	; (8007e48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e2a:	4808      	ldr	r0, [pc, #32]	; (8007e4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e2c:	f7ff fdbc 	bl	80079a8 <USBD_GetString>
 8007e30:	e004      	b.n	8007e3c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007e32:	683a      	ldr	r2, [r7, #0]
 8007e34:	4904      	ldr	r1, [pc, #16]	; (8007e48 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007e36:	4805      	ldr	r0, [pc, #20]	; (8007e4c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007e38:	f7ff fdb6 	bl	80079a8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007e3c:	4b02      	ldr	r3, [pc, #8]	; (8007e48 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3708      	adds	r7, #8
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bd80      	pop	{r7, pc}
 8007e46:	bf00      	nop
 8007e48:	20001490 	.word	0x20001490
 8007e4c:	08008614 	.word	0x08008614

08007e50 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007e50:	b580      	push	{r7, lr}
 8007e52:	b084      	sub	sp, #16
 8007e54:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007e56:	4b0f      	ldr	r3, [pc, #60]	; (8007e94 <Get_SerialNum+0x44>)
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007e5c:	4b0e      	ldr	r3, [pc, #56]	; (8007e98 <Get_SerialNum+0x48>)
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007e62:	4b0e      	ldr	r3, [pc, #56]	; (8007e9c <Get_SerialNum+0x4c>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007e68:	68fa      	ldr	r2, [r7, #12]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4413      	add	r3, r2
 8007e6e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d009      	beq.n	8007e8a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007e76:	2208      	movs	r2, #8
 8007e78:	4909      	ldr	r1, [pc, #36]	; (8007ea0 <Get_SerialNum+0x50>)
 8007e7a:	68f8      	ldr	r0, [r7, #12]
 8007e7c:	f000 f814 	bl	8007ea8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007e80:	2204      	movs	r2, #4
 8007e82:	4908      	ldr	r1, [pc, #32]	; (8007ea4 <Get_SerialNum+0x54>)
 8007e84:	68b8      	ldr	r0, [r7, #8]
 8007e86:	f000 f80f 	bl	8007ea8 <IntToUnicode>
  }
}
 8007e8a:	bf00      	nop
 8007e8c:	3710      	adds	r7, #16
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	1fff7a10 	.word	0x1fff7a10
 8007e98:	1fff7a14 	.word	0x1fff7a14
 8007e9c:	1fff7a18 	.word	0x1fff7a18
 8007ea0:	200000e2 	.word	0x200000e2
 8007ea4:	200000f2 	.word	0x200000f2

08007ea8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007ea8:	b480      	push	{r7}
 8007eaa:	b087      	sub	sp, #28
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	4613      	mov	r3, r2
 8007eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007eba:	2300      	movs	r3, #0
 8007ebc:	75fb      	strb	r3, [r7, #23]
 8007ebe:	e027      	b.n	8007f10 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	0f1b      	lsrs	r3, r3, #28
 8007ec4:	2b09      	cmp	r3, #9
 8007ec6:	d80b      	bhi.n	8007ee0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	0f1b      	lsrs	r3, r3, #28
 8007ecc:	b2da      	uxtb	r2, r3
 8007ece:	7dfb      	ldrb	r3, [r7, #23]
 8007ed0:	005b      	lsls	r3, r3, #1
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	68bb      	ldr	r3, [r7, #8]
 8007ed6:	440b      	add	r3, r1
 8007ed8:	3230      	adds	r2, #48	; 0x30
 8007eda:	b2d2      	uxtb	r2, r2
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	e00a      	b.n	8007ef6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	0f1b      	lsrs	r3, r3, #28
 8007ee4:	b2da      	uxtb	r2, r3
 8007ee6:	7dfb      	ldrb	r3, [r7, #23]
 8007ee8:	005b      	lsls	r3, r3, #1
 8007eea:	4619      	mov	r1, r3
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	440b      	add	r3, r1
 8007ef0:	3237      	adds	r2, #55	; 0x37
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	011b      	lsls	r3, r3, #4
 8007efa:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007efc:	7dfb      	ldrb	r3, [r7, #23]
 8007efe:	005b      	lsls	r3, r3, #1
 8007f00:	3301      	adds	r3, #1
 8007f02:	68ba      	ldr	r2, [r7, #8]
 8007f04:	4413      	add	r3, r2
 8007f06:	2200      	movs	r2, #0
 8007f08:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007f0a:	7dfb      	ldrb	r3, [r7, #23]
 8007f0c:	3301      	adds	r3, #1
 8007f0e:	75fb      	strb	r3, [r7, #23]
 8007f10:	7dfa      	ldrb	r2, [r7, #23]
 8007f12:	79fb      	ldrb	r3, [r7, #7]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d3d3      	bcc.n	8007ec0 <IntToUnicode+0x18>
  }
}
 8007f18:	bf00      	nop
 8007f1a:	bf00      	nop
 8007f1c:	371c      	adds	r7, #28
 8007f1e:	46bd      	mov	sp, r7
 8007f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f24:	4770      	bx	lr
	...

08007f28 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b08a      	sub	sp, #40	; 0x28
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007f30:	f107 0314 	add.w	r3, r7, #20
 8007f34:	2200      	movs	r2, #0
 8007f36:	601a      	str	r2, [r3, #0]
 8007f38:	605a      	str	r2, [r3, #4]
 8007f3a:	609a      	str	r2, [r3, #8]
 8007f3c:	60da      	str	r2, [r3, #12]
 8007f3e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007f48:	d147      	bne.n	8007fda <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	613b      	str	r3, [r7, #16]
 8007f4e:	4b25      	ldr	r3, [pc, #148]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f52:	4a24      	ldr	r2, [pc, #144]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007f54:	f043 0301 	orr.w	r3, r3, #1
 8007f58:	6313      	str	r3, [r2, #48]	; 0x30
 8007f5a:	4b22      	ldr	r3, [pc, #136]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	613b      	str	r3, [r7, #16]
 8007f64:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8007f66:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007f6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007f6c:	2300      	movs	r3, #0
 8007f6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f70:	2300      	movs	r3, #0
 8007f72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f74:	f107 0314 	add.w	r3, r7, #20
 8007f78:	4619      	mov	r1, r3
 8007f7a:	481b      	ldr	r0, [pc, #108]	; (8007fe8 <HAL_PCD_MspInit+0xc0>)
 8007f7c:	f7f9 fb14 	bl	80015a8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007f80:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007f86:	2302      	movs	r3, #2
 8007f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007f8e:	2303      	movs	r3, #3
 8007f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007f92:	230a      	movs	r3, #10
 8007f94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007f96:	f107 0314 	add.w	r3, r7, #20
 8007f9a:	4619      	mov	r1, r3
 8007f9c:	4812      	ldr	r0, [pc, #72]	; (8007fe8 <HAL_PCD_MspInit+0xc0>)
 8007f9e:	f7f9 fb03 	bl	80015a8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007fa2:	4b10      	ldr	r3, [pc, #64]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007fa4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fa6:	4a0f      	ldr	r2, [pc, #60]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007fa8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fac:	6353      	str	r3, [r2, #52]	; 0x34
 8007fae:	2300      	movs	r3, #0
 8007fb0:	60fb      	str	r3, [r7, #12]
 8007fb2:	4b0c      	ldr	r3, [pc, #48]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fb6:	4a0b      	ldr	r2, [pc, #44]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007fb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007fbc:	6453      	str	r3, [r2, #68]	; 0x44
 8007fbe:	4b09      	ldr	r3, [pc, #36]	; (8007fe4 <HAL_PCD_MspInit+0xbc>)
 8007fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007fc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007fc6:	60fb      	str	r3, [r7, #12]
 8007fc8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007fca:	2200      	movs	r2, #0
 8007fcc:	2100      	movs	r1, #0
 8007fce:	2043      	movs	r0, #67	; 0x43
 8007fd0:	f7f9 fab3 	bl	800153a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007fd4:	2043      	movs	r0, #67	; 0x43
 8007fd6:	f7f9 facc 	bl	8001572 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007fda:	bf00      	nop
 8007fdc:	3728      	adds	r7, #40	; 0x28
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40023800 	.word	0x40023800
 8007fe8:	40020000 	.word	0x40020000

08007fec <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b082      	sub	sp, #8
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8008000:	4619      	mov	r1, r3
 8008002:	4610      	mov	r0, r2
 8008004:	f7fe fb71 	bl	80066ea <USBD_LL_SetupStage>
}
 8008008:	bf00      	nop
 800800a:	3708      	adds	r7, #8
 800800c:	46bd      	mov	sp, r7
 800800e:	bd80      	pop	{r7, pc}

08008010 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b082      	sub	sp, #8
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	460b      	mov	r3, r1
 800801a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008022:	78fa      	ldrb	r2, [r7, #3]
 8008024:	6879      	ldr	r1, [r7, #4]
 8008026:	4613      	mov	r3, r2
 8008028:	00db      	lsls	r3, r3, #3
 800802a:	4413      	add	r3, r2
 800802c:	009b      	lsls	r3, r3, #2
 800802e:	440b      	add	r3, r1
 8008030:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8008034:	681a      	ldr	r2, [r3, #0]
 8008036:	78fb      	ldrb	r3, [r7, #3]
 8008038:	4619      	mov	r1, r3
 800803a:	f7fe fbab 	bl	8006794 <USBD_LL_DataOutStage>
}
 800803e:	bf00      	nop
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}

08008046 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008046:	b580      	push	{r7, lr}
 8008048:	b082      	sub	sp, #8
 800804a:	af00      	add	r7, sp, #0
 800804c:	6078      	str	r0, [r7, #4]
 800804e:	460b      	mov	r3, r1
 8008050:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8008058:	78fa      	ldrb	r2, [r7, #3]
 800805a:	6879      	ldr	r1, [r7, #4]
 800805c:	4613      	mov	r3, r2
 800805e:	00db      	lsls	r3, r3, #3
 8008060:	4413      	add	r3, r2
 8008062:	009b      	lsls	r3, r3, #2
 8008064:	440b      	add	r3, r1
 8008066:	334c      	adds	r3, #76	; 0x4c
 8008068:	681a      	ldr	r2, [r3, #0]
 800806a:	78fb      	ldrb	r3, [r7, #3]
 800806c:	4619      	mov	r1, r3
 800806e:	f7fe fc44 	bl	80068fa <USBD_LL_DataInStage>
}
 8008072:	bf00      	nop
 8008074:	3708      	adds	r7, #8
 8008076:	46bd      	mov	sp, r7
 8008078:	bd80      	pop	{r7, pc}

0800807a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800807a:	b580      	push	{r7, lr}
 800807c:	b082      	sub	sp, #8
 800807e:	af00      	add	r7, sp, #0
 8008080:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008088:	4618      	mov	r0, r3
 800808a:	f7fe fd78 	bl	8006b7e <USBD_LL_SOF>
}
 800808e:	bf00      	nop
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}

08008096 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008096:	b580      	push	{r7, lr}
 8008098:	b084      	sub	sp, #16
 800809a:	af00      	add	r7, sp, #0
 800809c:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800809e:	2301      	movs	r3, #1
 80080a0:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	68db      	ldr	r3, [r3, #12]
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d102      	bne.n	80080b0 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80080aa:	2300      	movs	r3, #0
 80080ac:	73fb      	strb	r3, [r7, #15]
 80080ae:	e008      	b.n	80080c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	68db      	ldr	r3, [r3, #12]
 80080b4:	2b02      	cmp	r3, #2
 80080b6:	d102      	bne.n	80080be <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80080b8:	2301      	movs	r3, #1
 80080ba:	73fb      	strb	r3, [r7, #15]
 80080bc:	e001      	b.n	80080c2 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80080be:	f7f8 fb91 	bl	80007e4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080c8:	7bfa      	ldrb	r2, [r7, #15]
 80080ca:	4611      	mov	r1, r2
 80080cc:	4618      	mov	r0, r3
 80080ce:	f7fe fd18 	bl	8006b02 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080d8:	4618      	mov	r0, r3
 80080da:	f7fe fcc0 	bl	8006a5e <USBD_LL_Reset>
}
 80080de:	bf00      	nop
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}
	...

080080e8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080e8:	b580      	push	{r7, lr}
 80080ea:	b082      	sub	sp, #8
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80080f6:	4618      	mov	r0, r3
 80080f8:	f7fe fd13 	bl	8006b22 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	687a      	ldr	r2, [r7, #4]
 8008108:	6812      	ldr	r2, [r2, #0]
 800810a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800810e:	f043 0301 	orr.w	r3, r3, #1
 8008112:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	6a1b      	ldr	r3, [r3, #32]
 8008118:	2b00      	cmp	r3, #0
 800811a:	d005      	beq.n	8008128 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800811c:	4b04      	ldr	r3, [pc, #16]	; (8008130 <HAL_PCD_SuspendCallback+0x48>)
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	4a03      	ldr	r2, [pc, #12]	; (8008130 <HAL_PCD_SuspendCallback+0x48>)
 8008122:	f043 0306 	orr.w	r3, r3, #6
 8008126:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008128:	bf00      	nop
 800812a:	3708      	adds	r7, #8
 800812c:	46bd      	mov	sp, r7
 800812e:	bd80      	pop	{r7, pc}
 8008130:	e000ed00 	.word	0xe000ed00

08008134 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008134:	b580      	push	{r7, lr}
 8008136:	b082      	sub	sp, #8
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008142:	4618      	mov	r0, r3
 8008144:	f7fe fd03 	bl	8006b4e <USBD_LL_Resume>
}
 8008148:	bf00      	nop
 800814a:	3708      	adds	r7, #8
 800814c:	46bd      	mov	sp, r7
 800814e:	bd80      	pop	{r7, pc}

08008150 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	460b      	mov	r3, r1
 800815a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008162:	78fa      	ldrb	r2, [r7, #3]
 8008164:	4611      	mov	r1, r2
 8008166:	4618      	mov	r0, r3
 8008168:	f7fe fd5b 	bl	8006c22 <USBD_LL_IsoOUTIncomplete>
}
 800816c:	bf00      	nop
 800816e:	3708      	adds	r7, #8
 8008170:	46bd      	mov	sp, r7
 8008172:	bd80      	pop	{r7, pc}

08008174 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]
 800817c:	460b      	mov	r3, r1
 800817e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	4611      	mov	r1, r2
 800818a:	4618      	mov	r0, r3
 800818c:	f7fe fd17 	bl	8006bbe <USBD_LL_IsoINIncomplete>
}
 8008190:	bf00      	nop
 8008192:	3708      	adds	r7, #8
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}

08008198 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008198:	b580      	push	{r7, lr}
 800819a:	b082      	sub	sp, #8
 800819c:	af00      	add	r7, sp, #0
 800819e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081a6:	4618      	mov	r0, r3
 80081a8:	f7fe fd6d 	bl	8006c86 <USBD_LL_DevConnected>
}
 80081ac:	bf00      	nop
 80081ae:	3708      	adds	r7, #8
 80081b0:	46bd      	mov	sp, r7
 80081b2:	bd80      	pop	{r7, pc}

080081b4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	b082      	sub	sp, #8
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80081c2:	4618      	mov	r0, r3
 80081c4:	f7fe fd6a 	bl	8006c9c <USBD_LL_DevDisconnected>
}
 80081c8:	bf00      	nop
 80081ca:	3708      	adds	r7, #8
 80081cc:	46bd      	mov	sp, r7
 80081ce:	bd80      	pop	{r7, pc}

080081d0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80081d0:	b580      	push	{r7, lr}
 80081d2:	b082      	sub	sp, #8
 80081d4:	af00      	add	r7, sp, #0
 80081d6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	781b      	ldrb	r3, [r3, #0]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d13c      	bne.n	800825a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80081e0:	4a20      	ldr	r2, [pc, #128]	; (8008264 <USBD_LL_Init+0x94>)
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	4a1e      	ldr	r2, [pc, #120]	; (8008264 <USBD_LL_Init+0x94>)
 80081ec:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80081f0:	4b1c      	ldr	r3, [pc, #112]	; (8008264 <USBD_LL_Init+0x94>)
 80081f2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80081f6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80081f8:	4b1a      	ldr	r3, [pc, #104]	; (8008264 <USBD_LL_Init+0x94>)
 80081fa:	2204      	movs	r2, #4
 80081fc:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80081fe:	4b19      	ldr	r3, [pc, #100]	; (8008264 <USBD_LL_Init+0x94>)
 8008200:	2202      	movs	r2, #2
 8008202:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008204:	4b17      	ldr	r3, [pc, #92]	; (8008264 <USBD_LL_Init+0x94>)
 8008206:	2200      	movs	r2, #0
 8008208:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800820a:	4b16      	ldr	r3, [pc, #88]	; (8008264 <USBD_LL_Init+0x94>)
 800820c:	2202      	movs	r2, #2
 800820e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008210:	4b14      	ldr	r3, [pc, #80]	; (8008264 <USBD_LL_Init+0x94>)
 8008212:	2200      	movs	r2, #0
 8008214:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008216:	4b13      	ldr	r3, [pc, #76]	; (8008264 <USBD_LL_Init+0x94>)
 8008218:	2200      	movs	r2, #0
 800821a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800821c:	4b11      	ldr	r3, [pc, #68]	; (8008264 <USBD_LL_Init+0x94>)
 800821e:	2200      	movs	r2, #0
 8008220:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8008222:	4b10      	ldr	r3, [pc, #64]	; (8008264 <USBD_LL_Init+0x94>)
 8008224:	2201      	movs	r2, #1
 8008226:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008228:	4b0e      	ldr	r3, [pc, #56]	; (8008264 <USBD_LL_Init+0x94>)
 800822a:	2200      	movs	r2, #0
 800822c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800822e:	480d      	ldr	r0, [pc, #52]	; (8008264 <USBD_LL_Init+0x94>)
 8008230:	f7f9 fb56 	bl	80018e0 <HAL_PCD_Init>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d001      	beq.n	800823e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800823a:	f7f8 fad3 	bl	80007e4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800823e:	2180      	movs	r1, #128	; 0x80
 8008240:	4808      	ldr	r0, [pc, #32]	; (8008264 <USBD_LL_Init+0x94>)
 8008242:	f7fa fdae 	bl	8002da2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008246:	2240      	movs	r2, #64	; 0x40
 8008248:	2100      	movs	r1, #0
 800824a:	4806      	ldr	r0, [pc, #24]	; (8008264 <USBD_LL_Init+0x94>)
 800824c:	f7fa fd62 	bl	8002d14 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008250:	2280      	movs	r2, #128	; 0x80
 8008252:	2101      	movs	r1, #1
 8008254:	4803      	ldr	r0, [pc, #12]	; (8008264 <USBD_LL_Init+0x94>)
 8008256:	f7fa fd5d 	bl	8002d14 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800825a:	2300      	movs	r3, #0
}
 800825c:	4618      	mov	r0, r3
 800825e:	3708      	adds	r7, #8
 8008260:	46bd      	mov	sp, r7
 8008262:	bd80      	pop	{r7, pc}
 8008264:	20001690 	.word	0x20001690

08008268 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008270:	2300      	movs	r3, #0
 8008272:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800827e:	4618      	mov	r0, r3
 8008280:	f7f9 fc4b 	bl	8001b1a <HAL_PCD_Start>
 8008284:	4603      	mov	r3, r0
 8008286:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008288:	7bfb      	ldrb	r3, [r7, #15]
 800828a:	4618      	mov	r0, r3
 800828c:	f000 f942 	bl	8008514 <USBD_Get_USB_Status>
 8008290:	4603      	mov	r3, r0
 8008292:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008294:	7bbb      	ldrb	r3, [r7, #14]
}
 8008296:	4618      	mov	r0, r3
 8008298:	3710      	adds	r7, #16
 800829a:	46bd      	mov	sp, r7
 800829c:	bd80      	pop	{r7, pc}

0800829e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800829e:	b580      	push	{r7, lr}
 80082a0:	b084      	sub	sp, #16
 80082a2:	af00      	add	r7, sp, #0
 80082a4:	6078      	str	r0, [r7, #4]
 80082a6:	4608      	mov	r0, r1
 80082a8:	4611      	mov	r1, r2
 80082aa:	461a      	mov	r2, r3
 80082ac:	4603      	mov	r3, r0
 80082ae:	70fb      	strb	r3, [r7, #3]
 80082b0:	460b      	mov	r3, r1
 80082b2:	70bb      	strb	r3, [r7, #2]
 80082b4:	4613      	mov	r3, r2
 80082b6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082bc:	2300      	movs	r3, #0
 80082be:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80082c6:	78bb      	ldrb	r3, [r7, #2]
 80082c8:	883a      	ldrh	r2, [r7, #0]
 80082ca:	78f9      	ldrb	r1, [r7, #3]
 80082cc:	f7fa f91c 	bl	8002508 <HAL_PCD_EP_Open>
 80082d0:	4603      	mov	r3, r0
 80082d2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082d4:	7bfb      	ldrb	r3, [r7, #15]
 80082d6:	4618      	mov	r0, r3
 80082d8:	f000 f91c 	bl	8008514 <USBD_Get_USB_Status>
 80082dc:	4603      	mov	r3, r0
 80082de:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082e0:	7bbb      	ldrb	r3, [r7, #14]
}
 80082e2:	4618      	mov	r0, r3
 80082e4:	3710      	adds	r7, #16
 80082e6:	46bd      	mov	sp, r7
 80082e8:	bd80      	pop	{r7, pc}

080082ea <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082ea:	b580      	push	{r7, lr}
 80082ec:	b084      	sub	sp, #16
 80082ee:	af00      	add	r7, sp, #0
 80082f0:	6078      	str	r0, [r7, #4]
 80082f2:	460b      	mov	r3, r1
 80082f4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082fa:	2300      	movs	r3, #0
 80082fc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008304:	78fa      	ldrb	r2, [r7, #3]
 8008306:	4611      	mov	r1, r2
 8008308:	4618      	mov	r0, r3
 800830a:	f7fa f965 	bl	80025d8 <HAL_PCD_EP_Close>
 800830e:	4603      	mov	r3, r0
 8008310:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008312:	7bfb      	ldrb	r3, [r7, #15]
 8008314:	4618      	mov	r0, r3
 8008316:	f000 f8fd 	bl	8008514 <USBD_Get_USB_Status>
 800831a:	4603      	mov	r3, r0
 800831c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800831e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008320:	4618      	mov	r0, r3
 8008322:	3710      	adds	r7, #16
 8008324:	46bd      	mov	sp, r7
 8008326:	bd80      	pop	{r7, pc}

08008328 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
 800832e:	6078      	str	r0, [r7, #4]
 8008330:	460b      	mov	r3, r1
 8008332:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008338:	2300      	movs	r3, #0
 800833a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008342:	78fa      	ldrb	r2, [r7, #3]
 8008344:	4611      	mov	r1, r2
 8008346:	4618      	mov	r0, r3
 8008348:	f7fa fa3d 	bl	80027c6 <HAL_PCD_EP_SetStall>
 800834c:	4603      	mov	r3, r0
 800834e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008350:	7bfb      	ldrb	r3, [r7, #15]
 8008352:	4618      	mov	r0, r3
 8008354:	f000 f8de 	bl	8008514 <USBD_Get_USB_Status>
 8008358:	4603      	mov	r3, r0
 800835a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800835c:	7bbb      	ldrb	r3, [r7, #14]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
 800836e:	460b      	mov	r3, r1
 8008370:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008376:	2300      	movs	r3, #0
 8008378:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008380:	78fa      	ldrb	r2, [r7, #3]
 8008382:	4611      	mov	r1, r2
 8008384:	4618      	mov	r0, r3
 8008386:	f7fa fa82 	bl	800288e <HAL_PCD_EP_ClrStall>
 800838a:	4603      	mov	r3, r0
 800838c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800838e:	7bfb      	ldrb	r3, [r7, #15]
 8008390:	4618      	mov	r0, r3
 8008392:	f000 f8bf 	bl	8008514 <USBD_Get_USB_Status>
 8008396:	4603      	mov	r3, r0
 8008398:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800839a:	7bbb      	ldrb	r3, [r7, #14]
}
 800839c:	4618      	mov	r0, r3
 800839e:	3710      	adds	r7, #16
 80083a0:	46bd      	mov	sp, r7
 80083a2:	bd80      	pop	{r7, pc}

080083a4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b085      	sub	sp, #20
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80083b6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80083b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	da0b      	bge.n	80083d8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80083c0:	78fb      	ldrb	r3, [r7, #3]
 80083c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083c6:	68f9      	ldr	r1, [r7, #12]
 80083c8:	4613      	mov	r3, r2
 80083ca:	00db      	lsls	r3, r3, #3
 80083cc:	4413      	add	r3, r2
 80083ce:	009b      	lsls	r3, r3, #2
 80083d0:	440b      	add	r3, r1
 80083d2:	333e      	adds	r3, #62	; 0x3e
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	e00b      	b.n	80083f0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80083d8:	78fb      	ldrb	r3, [r7, #3]
 80083da:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80083de:	68f9      	ldr	r1, [r7, #12]
 80083e0:	4613      	mov	r3, r2
 80083e2:	00db      	lsls	r3, r3, #3
 80083e4:	4413      	add	r3, r2
 80083e6:	009b      	lsls	r3, r3, #2
 80083e8:	440b      	add	r3, r1
 80083ea:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80083ee:	781b      	ldrb	r3, [r3, #0]
  }
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3714      	adds	r7, #20
 80083f4:	46bd      	mov	sp, r7
 80083f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fa:	4770      	bx	lr

080083fc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	6078      	str	r0, [r7, #4]
 8008404:	460b      	mov	r3, r1
 8008406:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008408:	2300      	movs	r3, #0
 800840a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800840c:	2300      	movs	r3, #0
 800840e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8008416:	78fa      	ldrb	r2, [r7, #3]
 8008418:	4611      	mov	r1, r2
 800841a:	4618      	mov	r0, r3
 800841c:	f7fa f84f 	bl	80024be <HAL_PCD_SetAddress>
 8008420:	4603      	mov	r3, r0
 8008422:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008424:	7bfb      	ldrb	r3, [r7, #15]
 8008426:	4618      	mov	r0, r3
 8008428:	f000 f874 	bl	8008514 <USBD_Get_USB_Status>
 800842c:	4603      	mov	r3, r0
 800842e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008430:	7bbb      	ldrb	r3, [r7, #14]
}
 8008432:	4618      	mov	r0, r3
 8008434:	3710      	adds	r7, #16
 8008436:	46bd      	mov	sp, r7
 8008438:	bd80      	pop	{r7, pc}

0800843a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800843a:	b580      	push	{r7, lr}
 800843c:	b086      	sub	sp, #24
 800843e:	af00      	add	r7, sp, #0
 8008440:	60f8      	str	r0, [r7, #12]
 8008442:	607a      	str	r2, [r7, #4]
 8008444:	603b      	str	r3, [r7, #0]
 8008446:	460b      	mov	r3, r1
 8008448:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800844a:	2300      	movs	r3, #0
 800844c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800844e:	2300      	movs	r3, #0
 8008450:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008458:	7af9      	ldrb	r1, [r7, #11]
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	687a      	ldr	r2, [r7, #4]
 800845e:	f7fa f968 	bl	8002732 <HAL_PCD_EP_Transmit>
 8008462:	4603      	mov	r3, r0
 8008464:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008466:	7dfb      	ldrb	r3, [r7, #23]
 8008468:	4618      	mov	r0, r3
 800846a:	f000 f853 	bl	8008514 <USBD_Get_USB_Status>
 800846e:	4603      	mov	r3, r0
 8008470:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008472:	7dbb      	ldrb	r3, [r7, #22]
}
 8008474:	4618      	mov	r0, r3
 8008476:	3718      	adds	r7, #24
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b086      	sub	sp, #24
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	607a      	str	r2, [r7, #4]
 8008486:	603b      	str	r3, [r7, #0]
 8008488:	460b      	mov	r3, r1
 800848a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800848c:	2300      	movs	r3, #0
 800848e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008490:	2300      	movs	r3, #0
 8008492:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008494:	68fb      	ldr	r3, [r7, #12]
 8008496:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800849a:	7af9      	ldrb	r1, [r7, #11]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	f7fa f8e4 	bl	800266c <HAL_PCD_EP_Receive>
 80084a4:	4603      	mov	r3, r0
 80084a6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80084a8:	7dfb      	ldrb	r3, [r7, #23]
 80084aa:	4618      	mov	r0, r3
 80084ac:	f000 f832 	bl	8008514 <USBD_Get_USB_Status>
 80084b0:	4603      	mov	r3, r0
 80084b2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80084b4:	7dbb      	ldrb	r3, [r7, #22]
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3718      	adds	r7, #24
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80084d0:	78fa      	ldrb	r2, [r7, #3]
 80084d2:	4611      	mov	r1, r2
 80084d4:	4618      	mov	r0, r3
 80084d6:	f7fa f914 	bl	8002702 <HAL_PCD_EP_GetRxCount>
 80084da:	4603      	mov	r3, r0
}
 80084dc:	4618      	mov	r0, r3
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80084ec:	4b03      	ldr	r3, [pc, #12]	; (80084fc <USBD_static_malloc+0x18>)
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	370c      	adds	r7, #12
 80084f2:	46bd      	mov	sp, r7
 80084f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f8:	4770      	bx	lr
 80084fa:	bf00      	nop
 80084fc:	20001b9c 	.word	0x20001b9c

08008500 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008500:	b480      	push	{r7}
 8008502:	b083      	sub	sp, #12
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]

}
 8008508:	bf00      	nop
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr

08008514 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	4603      	mov	r3, r0
 800851c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008522:	79fb      	ldrb	r3, [r7, #7]
 8008524:	2b03      	cmp	r3, #3
 8008526:	d817      	bhi.n	8008558 <USBD_Get_USB_Status+0x44>
 8008528:	a201      	add	r2, pc, #4	; (adr r2, 8008530 <USBD_Get_USB_Status+0x1c>)
 800852a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800852e:	bf00      	nop
 8008530:	08008541 	.word	0x08008541
 8008534:	08008547 	.word	0x08008547
 8008538:	0800854d 	.word	0x0800854d
 800853c:	08008553 	.word	0x08008553
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008540:	2300      	movs	r3, #0
 8008542:	73fb      	strb	r3, [r7, #15]
    break;
 8008544:	e00b      	b.n	800855e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008546:	2303      	movs	r3, #3
 8008548:	73fb      	strb	r3, [r7, #15]
    break;
 800854a:	e008      	b.n	800855e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800854c:	2301      	movs	r3, #1
 800854e:	73fb      	strb	r3, [r7, #15]
    break;
 8008550:	e005      	b.n	800855e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008552:	2303      	movs	r3, #3
 8008554:	73fb      	strb	r3, [r7, #15]
    break;
 8008556:	e002      	b.n	800855e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008558:	2303      	movs	r3, #3
 800855a:	73fb      	strb	r3, [r7, #15]
    break;
 800855c:	bf00      	nop
  }
  return usb_status;
 800855e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008560:	4618      	mov	r0, r3
 8008562:	3714      	adds	r7, #20
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <__libc_init_array>:
 800856c:	b570      	push	{r4, r5, r6, lr}
 800856e:	4d0d      	ldr	r5, [pc, #52]	; (80085a4 <__libc_init_array+0x38>)
 8008570:	4c0d      	ldr	r4, [pc, #52]	; (80085a8 <__libc_init_array+0x3c>)
 8008572:	1b64      	subs	r4, r4, r5
 8008574:	10a4      	asrs	r4, r4, #2
 8008576:	2600      	movs	r6, #0
 8008578:	42a6      	cmp	r6, r4
 800857a:	d109      	bne.n	8008590 <__libc_init_array+0x24>
 800857c:	4d0b      	ldr	r5, [pc, #44]	; (80085ac <__libc_init_array+0x40>)
 800857e:	4c0c      	ldr	r4, [pc, #48]	; (80085b0 <__libc_init_array+0x44>)
 8008580:	f000 f820 	bl	80085c4 <_init>
 8008584:	1b64      	subs	r4, r4, r5
 8008586:	10a4      	asrs	r4, r4, #2
 8008588:	2600      	movs	r6, #0
 800858a:	42a6      	cmp	r6, r4
 800858c:	d105      	bne.n	800859a <__libc_init_array+0x2e>
 800858e:	bd70      	pop	{r4, r5, r6, pc}
 8008590:	f855 3b04 	ldr.w	r3, [r5], #4
 8008594:	4798      	blx	r3
 8008596:	3601      	adds	r6, #1
 8008598:	e7ee      	b.n	8008578 <__libc_init_array+0xc>
 800859a:	f855 3b04 	ldr.w	r3, [r5], #4
 800859e:	4798      	blx	r3
 80085a0:	3601      	adds	r6, #1
 80085a2:	e7f2      	b.n	800858a <__libc_init_array+0x1e>
 80085a4:	0800863c 	.word	0x0800863c
 80085a8:	0800863c 	.word	0x0800863c
 80085ac:	0800863c 	.word	0x0800863c
 80085b0:	08008640 	.word	0x08008640

080085b4 <memset>:
 80085b4:	4402      	add	r2, r0
 80085b6:	4603      	mov	r3, r0
 80085b8:	4293      	cmp	r3, r2
 80085ba:	d100      	bne.n	80085be <memset+0xa>
 80085bc:	4770      	bx	lr
 80085be:	f803 1b01 	strb.w	r1, [r3], #1
 80085c2:	e7f9      	b.n	80085b8 <memset+0x4>

080085c4 <_init>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr

080085d0 <_fini>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr
